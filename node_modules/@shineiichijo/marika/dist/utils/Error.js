"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MarikaError_assignErrorMessage;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarikaError = void 0;
class MarikaError extends Error {
    constructor(status, type, error, jikanMessage, report_url) {
        super('');
        this.status = status;
        this.type = type;
        this.error = error;
        this.jikanMessage = jikanMessage;
        this.report_url = report_url;
        _MarikaError_assignErrorMessage.set(this, () => {
            const message = typeof this.jikanMessage === 'string'
                ? this.jikanMessage
                : this.jikanMessage !== undefined
                    ? this.jikanMessage[Object.keys(this.jikanMessage)[0]][0]
                    : '';
            this.message = `An error occurred while making the request (Status: ${this.status} - ${this.type}). Message: ${message}`;
        });
        __classPrivateFieldGet(this, _MarikaError_assignErrorMessage, "f").call(this);
    }
}
exports.MarikaError = MarikaError;
_MarikaError_assignErrorMessage = new WeakMap();
