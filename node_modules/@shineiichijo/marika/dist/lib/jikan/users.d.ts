import { CacheOptions } from 'axios-cache-interceptor';
import { ICommonConfig, IPagination, IRandomRecommendation, IUserAbout, IUserBaseRes, IUserById, IUserClub, IUserFavorites, IUserFriend, IUserFull, IUserHistory, IUserHistoryConfig, IUserProfile, IUserReview, IUserSearchConfig, IUserUpdatesResponse } from '../../types';
export declare class Users {
    #private;
    /**
     * Constructs an instance of the [users](https://docs.api.jikan.moe/#tag/users) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions?: CacheOptions);
    /**
     * Searches for user in MyAnimeList
     * @param config Config to make the search
     * @returns Results of the user search
     */
    getUsersSearch: (config?: IUserSearchConfig) => Promise<{
        data: IUserBaseRes[];
        pagination: IPagination;
    }>;
    /**
     * Gets the URL & username of a user from its MyAnimeList ID
     * @param id MyAnimeList ID of the user
     * @returns The URL & username of the user
     */
    getUserById: (id: string | number) => Promise<IUserById>;
    /**
     * Gets the full profile of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns The full profile of the user
     */
    getUserFullProfile: (username: string) => Promise<IUserFull>;
    /**
     * Gets the profile of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns The profile of the user
     */
    getUserProfile: (username: string) => Promise<IUserProfile>;
    /**
     * Gets the statistics of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns The statistics of the user
     */
    getUserStatistics: (username: string) => Promise<IUserFull['statistics']>;
    /**
     * Gets the list of favorites of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns List of favorites of the user
     */
    getUserFavorites: (username: string) => Promise<IUserFavorites>;
    /**
     * Gets the updates of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns The updates of the user
     */
    getUserUpdates: (username: string) => Promise<IUserUpdatesResponse>;
    /**
     * Gets the about of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns About of the user
     */
    getUserAbout: (username: string) => Promise<IUserAbout>;
    /**
     * Gets the list of histories of a user from its MyAnimeList username
     * @param username Username of the user
     * @param config Config to make the request
     * @returns The list of histories of the user
     */
    getUserHistory: (username: string, config?: IUserHistoryConfig) => Promise<IUserHistory[]>;
    /**
     * Gets the list of friends of a user from its MyAnimeList username
     * @param username Username of the user
     * @param config Config to make the request
     * @returns The list of friends of the user
     */
    getUserFriends: (username: string, config?: ICommonConfig) => Promise<{
        data: IUserFriend[];
        pagination: IPagination;
    }>;
    /**
     * Gets the list of reviews posted by a user from its MyAnimeList username
     * @param username Username of the user
     * @param config Config to make the request
     * @returns The list of reviews posted by the user
     */
    getUserReviews: (username: string, config?: ICommonConfig) => Promise<{
        data: IUserReview[];
        pagination: IPagination;
    }>;
    /**
     * Gets the list of recommendations posted by a user from its MyAnimeList username
     * @param username Username of the user
     * @param config Config to make the request
     * @returns The list of recommendations posted by the user
     */
    getUserRecommendations: (username: string, config?: ICommonConfig) => Promise<{
        data: IRandomRecommendation[];
        pagination: IPagination;
    }>;
    /**
     * Gets the list of clubs of a user from its MyAnimeList username
     * @param username Username of the user
     * @param config Config to make the request
     * @returns The list of clubs of the user
     */
    getUserClubs: (username: string, config?: ICommonConfig) => Promise<{
        data: IUserClub[];
        pagination: IPagination;
    }>;
    /**
     * Gets the external sites of a user from its MyAnimeList username
     * @param username Username of the user
     * @returns The external sites of the user
     */
    getUserExternal: (username: string) => Promise<IUserFull['external']>;
}
