"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Anime_fetch;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Anime = void 0;
const utils_1 = require("../../utils");
class Anime {
    /**
     * Constructs an instance of the [anime](https://docs.api.jikan.moe/#tag/anime) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions) {
        _Anime_fetch.set(this, void 0);
        /**
         * Gets anime data by its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns The data of the anime
         */
        this.getAnimeById = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`))).data;
        });
        /**
         * Gets the full data of anime by its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns The full data of the anime
         */
        this.getAnimeFullById = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'full'))).data;
        });
        /**
         * Gets the characters of the anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns The characters of the given anime ID
         */
        this.getAnimeCharacters = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'characters'))).data;
        });
        /**
         * Gets the staffs of the anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns The staffs of given anime ID
         */
        this.getAnimeStaff = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'staff'))).data;
        });
        /**
         * Gets the episodes of the anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @param config Config to make the request
         * @returns List of episodes with the pagination
         */
        this.getAnimeEpisodes = (id, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'episodes').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the data of an anime's episode by its anime & episode ID
         * @param id MyAnimeList ID of the anime
         * @param episode_id Episode ID of the anime
         * @returns Data of the required episode
         */
        this.getAnimeEpisodeById = (id, episode_id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            if (typeof episode_id !== 'string' && typeof episode_id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('episode_id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'episodes', `${episode_id}`)))
                .data;
        });
        /**
         * Gets the list of news related to a anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @param config Config to make the request
         * @returns List of news related to the anime
         */
        this.getAnimeNews = (id, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'news').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the forums related to an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @param config Config to make the request
         * @returns List of the forums related to the anime
         */
        this.getAnimeForum = (id, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'forum').concat((0, utils_1.getQueryString)(config || {})))).data;
        });
        /**
         * Gets the anime videos of the given MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns Videos of the anime
         */
        this.getAnimeVideos = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'videos'))).data;
        });
        /**
         * Gets the episode videos of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @param config Config to make the request
         * @returns Episode videos of the anime
         */
        this.getAnimeVideosEpisodes = (id, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'videos', 'episodes').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the pictures of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns List of images of the anime in different formats
         */
        this.getAnimePictures = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'pictures'))).data;
        });
        /**
         * Gets the statistics of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns Stats of the anime
         */
        this.getAnimeStatistics = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'statistics'))).data;
        });
        /**
         * Gets more info of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns More info of the anime
         */
        this.getAnimeMoreInfo = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'moreinfo'))).data;
        });
        /**
         * Gets recommendations of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns List of recommenedations from the anime
         */
        this.getAnimeRecommendations = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'recommendations'))).data;
        });
        /**
         * Gets the list of user updates of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @param config Config to make the request
         * @returns List of user updates of the anime
         */
        this.getAnimeUserUpdates = (id, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'userupdates').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the reviews of an anime by its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @param config Config to make the request
         * @returns Reviews of the anime
         */
        this.getAnimeReviews = (id, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'reviews').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the relations of an anime by its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns Relations of the anime
         */
        this.getAnimeRelations = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'relations'))).data;
        });
        /**
         * Gets the themes of an anime by its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns Themes of the anime
         */
        this.getAnimeThemes = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'themes'))).data;
        });
        /**
         * Gets the external sites of an anime by its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns External sites of the anime
         */
        this.getAnimeExternal = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'external'))).data;
        });
        /**
         * Gets streaming platforms of an anime from its MyAnimeList ID
         * @param id MyAnimeList ID of the anime
         * @returns Streaming platforms of the anime with their URLs
         */
        this.getAnimeStreaming = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime', `${id}`, 'streaming'))).data;
        });
        /**
         * Searches for anime in MyAnimeList
         * @param config Config to make the search
         * @returns Results of the search
         */
        this.getAnimeSearch = (config) => __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Anime_fetch, "f").call(this, (0, utils_1.getURL)('anime').concat((0, utils_1.getQueryString)(config || {})));
        });
        __classPrivateFieldSet(this, _Anime_fetch, new utils_1.Fetch(cacheOptions).get, "f");
    }
}
exports.Anime = Anime;
_Anime_fetch = new WeakMap();
