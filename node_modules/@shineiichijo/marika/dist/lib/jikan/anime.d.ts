import { CacheOptions } from 'axios-cache-interceptor';
import { IAnime, IAnimeCharacter, IAnimeFull, IAnimeStaff, IPagination, IEpisodeFromList, ICommonConfig, IEpisodeResponse, INewsResponse, IForumConfig, IForum, IAnimeVideo, IAnimeVideosEpisode, IPicture, IAnimeStatistics, IMoreInfo, IRecommendation, IAnimeUserUpdate, IAnimeReview, IReviewConfig, IRelation, IAnimeSearchConfig, IExtendedPagination } from '../../types';
export declare class Anime {
    #private;
    /**
     * Constructs an instance of the [anime](https://docs.api.jikan.moe/#tag/anime) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions?: CacheOptions);
    /**
     * Gets anime data by its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns The data of the anime
     */
    getAnimeById: (id: string | number) => Promise<IAnime>;
    /**
     * Gets the full data of anime by its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns The full data of the anime
     */
    getAnimeFullById: (id: string | number) => Promise<IAnimeFull>;
    /**
     * Gets the characters of the anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns The characters of the given anime ID
     */
    getAnimeCharacters: (id: string | number) => Promise<IAnimeCharacter[]>;
    /**
     * Gets the staffs of the anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns The staffs of given anime ID
     */
    getAnimeStaff: (id: string | number) => Promise<IAnimeStaff[]>;
    /**
     * Gets the episodes of the anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @param config Config to make the request
     * @returns List of episodes with the pagination
     */
    getAnimeEpisodes: (id: string | number, config?: ICommonConfig) => Promise<{
        data: IEpisodeFromList[];
        pagination: IPagination;
    }>;
    /**
     * Gets the data of an anime's episode by its anime & episode ID
     * @param id MyAnimeList ID of the anime
     * @param episode_id Episode ID of the anime
     * @returns Data of the required episode
     */
    getAnimeEpisodeById: (id: string | number, episode_id: string | number) => Promise<IEpisodeResponse>;
    /**
     * Gets the list of news related to a anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @param config Config to make the request
     * @returns List of news related to the anime
     */
    getAnimeNews: (id: string | number, config?: ICommonConfig) => Promise<{
        data: INewsResponse[];
        pagination: IPagination;
    }>;
    /**
     * Gets the forums related to an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @param config Config to make the request
     * @returns List of the forums related to the anime
     */
    getAnimeForum: (id: string | number, config?: IForumConfig) => Promise<IForum[]>;
    /**
     * Gets the anime videos of the given MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns Videos of the anime
     */
    getAnimeVideos: (id: string | number) => Promise<IAnimeVideo>;
    /**
     * Gets the episode videos of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @param config Config to make the request
     * @returns Episode videos of the anime
     */
    getAnimeVideosEpisodes: (id: string | number, config?: ICommonConfig) => Promise<{
        data: IAnimeVideosEpisode[];
        pagination: IPagination;
    }>;
    /**
     * Gets the pictures of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns List of images of the anime in different formats
     */
    getAnimePictures: (id: string | number) => Promise<IPicture[]>;
    /**
     * Gets the statistics of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns Stats of the anime
     */
    getAnimeStatistics: (id: string | number) => Promise<IAnimeStatistics>;
    /**
     * Gets more info of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns More info of the anime
     */
    getAnimeMoreInfo: (id: string | number) => Promise<IMoreInfo>;
    /**
     * Gets recommendations of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns List of recommenedations from the anime
     */
    getAnimeRecommendations: (id: string | number) => Promise<IRecommendation[]>;
    /**
     * Gets the list of user updates of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @param config Config to make the request
     * @returns List of user updates of the anime
     */
    getAnimeUserUpdates: (id: string | number, config?: ICommonConfig) => Promise<{
        data: IAnimeUserUpdate[];
        pagination: IPagination;
    }>;
    /**
     * Gets the reviews of an anime by its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @param config Config to make the request
     * @returns Reviews of the anime
     */
    getAnimeReviews: (id: string | number, config?: IReviewConfig) => Promise<{
        pagination: IPagination;
        data: IAnimeReview[];
    }>;
    /**
     * Gets the relations of an anime by its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns Relations of the anime
     */
    getAnimeRelations: (id: string | number) => Promise<IRelation[]>;
    /**
     * Gets the themes of an anime by its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns Themes of the anime
     */
    getAnimeThemes: (id: string | number) => Promise<IAnime['themes']>;
    /**
     * Gets the external sites of an anime by its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns External sites of the anime
     */
    getAnimeExternal: (id: string | number) => Promise<IAnimeFull['external']>;
    /**
     * Gets streaming platforms of an anime from its MyAnimeList ID
     * @param id MyAnimeList ID of the anime
     * @returns Streaming platforms of the anime with their URLs
     */
    getAnimeStreaming: (id: string | number) => Promise<IAnimeFull['streaming']>;
    /**
     * Searches for anime in MyAnimeList
     * @param config Config to make the search
     * @returns Results of the search
     */
    getAnimeSearch: (config?: IAnimeSearchConfig) => Promise<{
        data: IAnime[];
        pagination: IExtendedPagination;
    }>;
}
