"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Users_fetch;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const utils_1 = require("../../utils");
class Users {
    /**
     * Constructs an instance of the [users](https://docs.api.jikan.moe/#tag/users) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions) {
        _Users_fetch.set(this, void 0);
        /**
         * Searches for user in MyAnimeList
         * @param config Config to make the search
         * @returns Results of the user search
         */
        this.getUsersSearch = (config) => __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the URL & username of a user from its MyAnimeList ID
         * @param id MyAnimeList ID of the user
         * @returns The URL & username of the user
         */
        this.getUserById = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', 'userbyid', `${id}`))).data;
        });
        /**
         * Gets the full profile of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns The full profile of the user
         */
        this.getUserFullProfile = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'full'))).data;
        });
        /**
         * Gets the profile of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns The profile of the user
         */
        this.getUserProfile = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username))).data;
        });
        /**
         * Gets the statistics of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns The statistics of the user
         */
        this.getUserStatistics = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'statistics'))).data;
        });
        /**
         * Gets the list of favorites of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns List of favorites of the user
         */
        this.getUserFavorites = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'favorites'))).data;
        });
        /**
         * Gets the updates of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns The updates of the user
         */
        this.getUserUpdates = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'userupdates'))).data;
        });
        /**
         * Gets the about of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns About of the user
         */
        this.getUserAbout = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'about'))).data;
        });
        /**
         * Gets the list of histories of a user from its MyAnimeList username
         * @param username Username of the user
         * @param config Config to make the request
         * @returns The list of histories of the user
         */
        this.getUserHistory = (username, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'history').concat((0, utils_1.getQueryString)(config || {})))).data;
        });
        /**
         * Gets the list of friends of a user from its MyAnimeList username
         * @param username Username of the user
         * @param config Config to make the request
         * @returns The list of friends of the user
         */
        this.getUserFriends = (username, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'friends').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the list of reviews posted by a user from its MyAnimeList username
         * @param username Username of the user
         * @param config Config to make the request
         * @returns The list of reviews posted by the user
         */
        this.getUserReviews = (username, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'reviews').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the list of recommendations posted by a user from its MyAnimeList username
         * @param username Username of the user
         * @param config Config to make the request
         * @returns The list of recommendations posted by the user
         */
        this.getUserRecommendations = (username, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'recommendations').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the list of clubs of a user from its MyAnimeList username
         * @param username Username of the user
         * @param config Config to make the request
         * @returns The list of clubs of the user
         */
        this.getUserClubs = (username, config) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'clubs').concat((0, utils_1.getQueryString)(config || {})));
        });
        /**
         * Gets the external sites of a user from its MyAnimeList username
         * @param username Username of the user
         * @returns The external sites of the user
         */
        this.getUserExternal = (username) => __awaiter(this, void 0, void 0, function* () {
            if (typeof username !== 'string')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('username', 'string', typeof username));
            return (yield __classPrivateFieldGet(this, _Users_fetch, "f").call(this, (0, utils_1.getURL)('users', username, 'external'))).data;
        });
        __classPrivateFieldSet(this, _Users_fetch, new utils_1.Fetch(cacheOptions).get, "f");
    }
}
exports.Users = Users;
_Users_fetch = new WeakMap();
