"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Random_fetch;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Random = void 0;
const utils_1 = require("../../utils");
class Random {
    /**
     * Constructs an instance of the [random](https://docs.api.jikan.moe/#tag/random) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions) {
        _Random_fetch.set(this, void 0);
        /**
         * Gets the data of a random anime
         * @returns Data of the random anime
         */
        this.getRandomAnime = () => __awaiter(this, void 0, void 0, function* () { return (yield __classPrivateFieldGet(this, _Random_fetch, "f").call(this, (0, utils_1.getURL)('random', 'anime'))).data; });
        /**
         * Gets the data of a random manga
         * @returns Data of the random manga
         */
        this.getRandomManga = () => __awaiter(this, void 0, void 0, function* () { return (yield __classPrivateFieldGet(this, _Random_fetch, "f").call(this, (0, utils_1.getURL)('random', 'manga'))).data; });
        /**
         * Gets the data of a random character
         * @returns Data of the random character
         */
        this.getRandomCharacters = () => __awaiter(this, void 0, void 0, function* () { return (yield __classPrivateFieldGet(this, _Random_fetch, "f").call(this, (0, utils_1.getURL)('random', 'characters'))).data; });
        /**
         * Gets the data of a random person
         * @returns Data of the random person
         */
        this.getRandomPeople = () => __awaiter(this, void 0, void 0, function* () { return (yield __classPrivateFieldGet(this, _Random_fetch, "f").call(this, (0, utils_1.getURL)('random', 'people'))).data; });
        /**
         * Gets the profile of a random MyAnimeList user
         * @returns Profile of the random MyAnimeList user
         */
        this.getRandomUsers = () => __awaiter(this, void 0, void 0, function* () { return (yield __classPrivateFieldGet(this, _Random_fetch, "f").call(this, (0, utils_1.getURL)('random', 'users'))).data; });
        __classPrivateFieldSet(this, _Random_fetch, new utils_1.Fetch(cacheOptions).get, "f");
    }
}
exports.Random = Random;
_Random_fetch = new WeakMap();
