import { CacheOptions } from 'axios-cache-interceptor';
import { ICharacterFromSource, ICommonConfig, IForum, IManga, IMangaFull, IMangaStatistics, IMangaUserUpdate, IMoreInfo, INewsResponse, IPagination, IPicture, IRecommendation, IMangaReview, IReviewConfig, IExtendedPagination, IMangaSearchConfig, IForumConfig } from '../../types';
export declare class Manga {
    #private;
    /**
     * Constructs an instance of the [manga](https://docs.api.jikan.moe/#tag/manga) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions?: CacheOptions);
    /**
     * Gets the data of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns The data of the manga
     */
    getMangaById: (id: string | number) => Promise<IManga>;
    /**
     * Gets the full data of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns The full data of the manga
     */
    getMangaFullById: (id: string | number) => Promise<IMangaFull>;
    /**
     * Gets the list of characters of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns List of characters of the manga
     */
    getMangaCharacters: (id: string | number) => Promise<ICharacterFromSource[]>;
    /**
     * Gets the list of news related to a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @param config Config to make the request
     * @returns List of news related to the manga
     */
    getMangaNews: (id: string | number, config?: ICommonConfig) => Promise<{
        data: INewsResponse[];
        pagination: IPagination;
    }>;
    /**
     * Gets the topics related to a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns List of topics related to the manga
     */
    getMangaTopics: (id: string | number, config?: IForumConfig) => Promise<IForum[]>;
    /**
     * Gets the pictures of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns Pictures of the manga
     */
    getMangaPictures: (id: string | number) => Promise<IPicture[]>;
    /**
     * Gets the statistics of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns Statistics of the manga
     */
    getMangaStatistics: (id: string | number) => Promise<IMangaStatistics>;
    /**
     * Gets more info of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns More info of the manga
     */
    getMangaMoreInfo: (id: string | number) => Promise<IMoreInfo>;
    /**
     * Gets recommendations of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns List of recommendations from the manga
     */
    getMangaRecommendations: (id: string | number) => Promise<IRecommendation[]>;
    /**
     * Gets user updates of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @param config Config to make the request
     * @returns List of user updates of the manga
     */
    getMangaUserUpdates: (id: string | number, config?: ICommonConfig) => Promise<{
        data: IMangaUserUpdate[];
        pagination: IPagination;
    }>;
    /**
     * Gets the reviews of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @param config Config to make the request
     * @returns
     */
    getMangaReviews: (id: string | number, config?: IReviewConfig) => Promise<{
        data: IMangaReview[];
        pagination: IPagination;
    }>;
    /**
     * Gets relation of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns Relations of the manga
     */
    getMangaRelations: (id: string | number) => Promise<IMangaFull['relations']>;
    /**
     * Get external sites of a manga from its MyAnimeList ID
     * @param id MyAnimeList ID of the manga
     * @returns External sites of the manga
     */
    getMangaExternal: (id: string | number) => Promise<IMangaFull['external']>;
    /**
     * Searches for manga in MyAnimeList
     * @param config Config to make the search
     * @returns Search results of the manga
     */
    getMangaSearch: (config?: IMangaSearchConfig) => Promise<{
        data: IManga[];
        pagination: IExtendedPagination;
    }>;
}
