"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Producers_fetch;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Producers = void 0;
const utils_1 = require("../../utils");
class Producers {
    /**
     * Constructs an instance of the [producers](https://docs.api.jikan.moe/#tag/producers) client
     * @param cacheOptions [Cache options](https://axios-cache-interceptor.js.org/config) for the client to make requests
     */
    constructor(cacheOptions) {
        _Producers_fetch.set(this, void 0);
        /**
         * Gets the data of a producer from its MyAnimeList ID
         * @param id MyAnimeList ID of the producer
         * @returns Data of the producer
         */
        this.getProducerById = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Producers_fetch, "f").call(this, (0, utils_1.getURL)('producers', `${id}`))).data;
        });
        /**
         * Gets the full data of a producer from its MyAnimeList ID
         * @param id MyAnimeList ID of the producer
         * @returns Full data of the producer
         */
        this.getProducerFullById = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Producers_fetch, "f").call(this, (0, utils_1.getURL)('producers', `${id}`, 'full'))).data;
        });
        /**
         * Gets the external sites of a producer from its MyAnimeList ID
         * @param id MyAnimeList ID of the producer
         * @returns External sites of the producer
         */
        this.getProducerExternal = (id) => __awaiter(this, void 0, void 0, function* () {
            if (typeof id !== 'string' && typeof id !== 'number')
                throw new TypeError((0, utils_1.getTypeErrorMessage)('id', 'string or number', typeof id));
            return (yield __classPrivateFieldGet(this, _Producers_fetch, "f").call(this, (0, utils_1.getURL)('producers', `${id}`, 'external'))).data;
        });
        /**
         * Searches for producers in MyAnimeList
         * @param config Config to make the request
         * @returns Result of the search
         */
        this.getProducers = (config) => __awaiter(this, void 0, void 0, function* () {
            return yield __classPrivateFieldGet(this, _Producers_fetch, "f").call(this, (0, utils_1.getURL)('producers').concat((0, utils_1.getQueryString)(config || {})));
        });
        __classPrivateFieldSet(this, _Producers_fetch, new utils_1.Fetch(cacheOptions).get, "f");
    }
}
exports.Producers = Producers;
_Producers_fetch = new WeakMap();
