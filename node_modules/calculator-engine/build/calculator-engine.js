(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();class s{static mathOperations(t,s,i){switch(i){case"+":return s+t;case"-":return s-t;case"*":return s*t;case"/":return s/t;case"%":return s%t;case"^":return Math.pow(s,t);default:return 0}}}s.availableOperators="+-*/%^";class i{constructor(t){this.in=t,this.out=null}getOutput(){return null==this.out?this.convert():this.out}}class e extends i{constructor(t,s){super(t),this.exprs=[],this.regex=/(?<input>(?<fun>[A-Za-z]+)\s{0,}\((?<params>[0-9\.\s\+\-,\*\/\%\^]+)\))/g,this.funcs=null==s?{}:s}prepare(){let t;for(;null!==(t=this.regex.exec(this.in));)if("function"==typeof this.funcs[t.groups.fun])this.exprs.push({input:t.groups.input,output:this.funcs[t.groups.fun](...t.groups.params.split(",").map((t=>parseFloat(t))))});else{if("function"!=typeof Math[t.groups.fun])throw new Error(`Method ${t.groups.fun} not found `);this.exprs.push({input:t.groups.input,output:Math[t.groups.fun](...t.groups.params.split(",").map((t=>parseFloat(t))))})}}convert(){null==this.out&&this.prepare(),this.out=this.in;for(let t=0;t<this.exprs.length;t++)this.out=this.out.replace(this.exprs[t].input,this.exprs[t].output);return this.out=this.out.replace(/[A-Za-z]*/g,""),this.out}}class r{constructor(t){this.data=t,this.next=this.previous=null}display(){console.log(this.data)}}class n{constructor(t){this.len=0,null==t?this.first=this.last=null:this.entryPoint(t)}entryPoint(t){this.last=this.first=new r(t),this.len++}isEmpty(){return null==this.first&&null==this.last||this.len<=0}insertFirst(t){if(this.isEmpty())this.entryPoint(t);else{let s=this.first;this.first=new r(t),this.first.next=s,s.previous=this.first,this.len++}return 0}insertLast(t){if(this.isEmpty)this.entryPoint(t);else{let s=this.last;this.last=new r(t),this.last.previous=s,s.next=this.last,this.len++}return 0}removeFirst(){if(this.isEmpty())return null;let t=this.first;return null==t.next?this.first=this.last=null:this.first=t.next,this.len--,t.data}removeLast(){if(this.isEmpty())return null;let t=this.last;return null==t.previous?(this.last=t.previous,null!=this.last.next&&(this.last.next=null)):this.first=this.last=null,this.len--,t.data}getFirst(){return null==this.first?null:this.first.data}getLast(){return null==this.last?null:this.last.data}length(){return this.len}display(){let t=this.first;for(;null!=t;)t.display(),t=t.next}}class u{constructor(){this.list=new n}push(t){this.list.insertFirst(t)}pop(){if(this.isEmpty())throw new Error("Stack Is Empty");return this.list.removeFirst()}peek(){if(this.isEmpty())throw new Error("Stack Is Empty");return this.list.getFirst()}isEmpty(){return this.list.isEmpty()}size(){return this.list.length()}display(){this.list.display()}}class l{static isDigit(t){return!isNaN(parseFloat(t))}static isDot(t){return"."===t}static isSpace(t){return" "===t}static isOpenBracket(t){return"("===t}static isClosedBracket(t){return")"===t}static isMiuns(t,s){return"-"===t&&l.isDigit(s)}static mathOperatorPriority(t){switch(t){case"+":case"-":return 1;case"*":case"/":case"%":return 2;case"^":return 3;default:return 0}}}class a extends i{constructor(t){super(t)}convert(){if(null!=this.out)return this.out;let t=new u;this.out="";let i="",e=-1;for(let r=0;r<this.in.length;r++){if(i=this.in.charAt(r),l.isMiuns(i,this.in.charAt(r+1))&&r!=e){let t=this.in.slice(0,r).trim();t.length>0&&l.isDigit(t.charAt(t.length-1))&&(i="+",e=r,--r)}if(l.isDigit(i)||l.isDot(i)||l.isSpace(i)||l.isMiuns(i,this.in.charAt(r+1)))this.out+=i;else if(l.isOpenBracket(i))t.push(i);else if(l.isClosedBracket(i)){for(;!t.isEmpty()&&!l.isOpenBracket(t.peek());)this.out+=" "+t.pop();t.pop()}else if(-1==s.availableOperators.indexOf(i))this.out+="0";else{for(this.out+=" ";!t.isEmpty()&&l.mathOperatorPriority(i)<=l.mathOperatorPriority(t.peek());)this.out+=t.pop()+" ";t.push(i)}}for(;!t.isEmpty();)this.out+=" "+t.pop()+" ";return this.out}evaluate(){null==this.out&&this.convert();let t=new u;for(let i of this.out.trim().split(" "))""!=i&&(l.isDigit(i)?t.push(i):t.push(s.mathOperations(t.isEmpty()?0:parseFloat(t.pop()),t.isEmpty()?0:parseFloat(t.pop()),i).toString()));return t.isEmpty()||isNaN(parseFloat(t.peek()))?0:parseFloat(t.pop())}}class h{static execute(t){return new a(new e(t,h.fucs).convert()).evaluate()}static setFucs(t){h.fucs=t}}h.fucs={},"undefined"==typeof window?t.g.Calculator=h:window.Calculator=h})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,