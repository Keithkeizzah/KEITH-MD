'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _esutils = require('esutils');

var _coderep = require('./coderep');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function p(node, precedence, a) {
  return (0, _coderep.getPrecedence)(node) < precedence ? paren(a) : a;
}

function t(token) {
  var isRegExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  return new _coderep.Token(token, isRegExp);
}

function paren(rep) {
  return new _coderep.Paren(rep);
}

function brace(rep) {
  return new _coderep.Brace(rep);
}

function bracket(rep) {
  return new _coderep.Bracket(rep);
}

function noIn(rep) {
  return new _coderep.NoIn(rep);
}

function markContainsIn(state) {
  return state.containsIn ? new _coderep.ContainsIn(state) : state;
}

function seq() {
  for (var _len = arguments.length, reps = Array(_len), _key = 0; _key < _len; _key++) {
    reps[_key] = arguments[_key];
  }

  return new _coderep.Seq(reps);
}

function semi() {
  return new _coderep.Semi();
}

function semiOp() {
  return new _coderep.SemiOp();
}

function empty() {
  return new _coderep.Empty();
}

function commaSep(pieces) {
  return new _coderep.CommaSep(pieces);
}

function getAssignmentExpr(state) {
  return state ? state.containsGroup ? paren(state) : state : empty();
}

var MinimalCodeGen = function () {
  function MinimalCodeGen() {
    _classCallCheck(this, MinimalCodeGen);
  }

  _createClass(MinimalCodeGen, [{
    key: 'parenToAvoidBeingDirective',
    value: function parenToAvoidBeingDirective(element, original) {
      if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {
        return seq(paren(original.children[0]), semiOp());
      }
      return original;
    }
  }, {
    key: 'regenerateArrowParams',
    value: function regenerateArrowParams(element, original) {
      if (element.rest == null && element.items.length === 1 && element.items[0].type === 'BindingIdentifier') {
        // FormalParameters unconditionally include parentheses, but they're not necessary here
        return this.reduceBindingIdentifier(element.items[0]);
      }
      return original;
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref) {
      var elements = _ref.elements;

      if (elements.length === 0) {
        return bracket(empty());
      }

      var content = commaSep(elements.map(getAssignmentExpr));
      if (elements.length > 0 && elements[elements.length - 1] == null) {
        content = seq(content, t(','));
      }
      return bracket(content);
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref2) {
      var expression = _ref2.expression;

      return seq(t('await'), p(node.expression, (0, _coderep.getPrecedence)(node), expression));
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref3) {
      var expression = _ref3.expression;

      return seq(t('...'), p(node.expression, _coderep.Precedence.Assignment, expression));
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref4) {
      var expression = _ref4.expression;

      return seq(t('...'), getAssignmentExpr(expression));
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      var leftCode = binding;
      var rightCode = expression;
      var containsIn = expression.containsIn;
      var startsWithCurly = binding.startsWithCurly;
      var startsWithLetSquareBracket = binding.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = binding.startsWithFunctionOrClass;
      if ((0, _coderep.getPrecedence)(node.expression) < (0, _coderep.getPrecedence)(node)) {
        rightCode = paren(rightCode);
        containsIn = false;
      }
      return (0, _objectAssign2.default)(seq(leftCode, t('='), rightCode), { containsIn: containsIn, startsWithCurly: startsWithCurly, startsWithLetSquareBracket: startsWithLetSquareBracket, startsWithFunctionOrClass: startsWithFunctionOrClass });
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      var a = t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return seq(binding, t('='), p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref7) {
      var binding = _ref7.binding,
          expression = _ref7.expression;

      var leftCode = binding;
      var rightCode = expression;
      var containsIn = expression.containsIn;
      var startsWithCurly = binding.startsWithCurly;
      var startsWithLetSquareBracket = binding.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = binding.startsWithFunctionOrClass;
      if ((0, _coderep.getPrecedence)(node.expression) < (0, _coderep.getPrecedence)(node)) {
        rightCode = paren(rightCode);
        containsIn = false;
      }
      return (0, _objectAssign2.default)(seq(leftCode, t(node.operator), rightCode), { containsIn: containsIn, startsWithCurly: startsWithCurly, startsWithLetSquareBracket: startsWithLetSquareBracket, startsWithFunctionOrClass: startsWithFunctionOrClass });
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref8) {
      var left = _ref8.left,
          right = _ref8.right;

      var leftCode = left;
      var startsWithCurly = left.startsWithCurly;
      var startsWithLetSquareBracket = left.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = left.startsWithFunctionOrClass;
      var leftContainsIn = left.containsIn;
      var isRightAssociative = node.operator === '**';
      if ((0, _coderep.getPrecedence)(node.left) < (0, _coderep.getPrecedence)(node) || isRightAssociative && ((0, _coderep.getPrecedence)(node.left) === (0, _coderep.getPrecedence)(node) || node.left.type === 'UnaryExpression')) {
        leftCode = paren(leftCode);
        startsWithCurly = false;
        startsWithLetSquareBracket = false;
        startsWithFunctionOrClass = false;
        leftContainsIn = false;
      }
      var rightCode = right;
      var rightContainsIn = right.containsIn;
      if ((0, _coderep.getPrecedence)(node.right) < (0, _coderep.getPrecedence)(node) || !isRightAssociative && (0, _coderep.getPrecedence)(node.right) === (0, _coderep.getPrecedence)(node)) {
        rightCode = paren(rightCode);
        rightContainsIn = false;
      }
      return (0, _objectAssign2.default)(seq(leftCode, t(node.operator), rightCode), {
        containsIn: leftContainsIn || rightContainsIn || node.operator === 'in',
        containsGroup: node.operator === ',',
        startsWithCurly: startsWithCurly,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithFunctionOrClass: startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref9) {
      var binding = _ref9.binding,
          init = _ref9.init;

      return seq(binding, t('='), p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      var a = t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref10) {
      var elements = _ref10.elements,
          rest = _ref10.rest;

      var content = void 0;
      if (elements.length === 0) {
        content = rest == null ? empty() : seq(t('...'), rest);
      } else {
        elements = elements.concat(rest == null ? [] : [seq(t('...'), rest)]);
        content = commaSep(elements.map(getAssignmentExpr));
        if (elements.length > 0 && elements[elements.length - 1] == null) {
          content = seq(content, t(','));
        }
      }
      return bracket(content);
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref11) {
      var elements = _ref11.elements,
          rest = _ref11.rest;

      var content = void 0;
      if (elements.length === 0) {
        content = rest == null ? empty() : seq(t('...'), rest);
      } else {
        elements = elements.concat(rest == null ? [] : [seq(t('...'), rest)]);
        content = commaSep(elements.map(getAssignmentExpr));
        if (elements.length > 0 && elements[elements.length - 1] == null) {
          content = seq(content, t(','));
        }
      }
      return bracket(content);
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref12) {
      var properties = _ref12.properties,
          rest = _ref12.rest;

      var content = commaSep(properties);
      if (properties.length === 0) {
        content = rest == null ? empty() : seq(t('...'), rest);
      } else {
        content = rest == null ? content : seq(content, t(','), t('...'), rest);
      }
      var state = brace(content);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref13) {
      var properties = _ref13.properties,
          rest = _ref13.rest;

      var content = commaSep(properties);
      if (properties.length === 0) {
        content = rest == null ? empty() : seq(t('...'), rest);
      } else {
        content = rest == null ? content : seq(content, t(','), t('...'), rest);
      }
      var state = brace(content);
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref14) {
      var binding = _ref14.binding,
          init = _ref14.init;

      if (node.init == null) return binding;
      return seq(binding, t('='), p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref15) {
      var name = _ref15.name,
          binding = _ref15.binding;

      return seq(name, t(':'), binding);
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref16) {
      var binding = _ref16.binding,
          init = _ref16.init;

      if (node.init == null) return binding;
      return seq(binding, t('='), p(node.init, _coderep.Precedence.Assignment, init));
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref17) {
      var name = _ref17.name,
          binding = _ref17.binding;

      return seq(name, t(':'), binding);
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref18) {
      var statements = _ref18.statements;

      return brace(seq.apply(undefined, _toConsumableArray(statements)));
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref19) {
      var block = _ref19.block;

      return block;
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return seq(t('break'), node.label ? t(node.label) : empty(), semiOp());
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref20) {
      var callee = _ref20.callee,
          args = _ref20.arguments;

      var parenthizedArgs = args.map(function (a, i) {
        return p(node.arguments[i], _coderep.Precedence.Assignment, a);
      });
      return (0, _objectAssign2.default)(seq(p(node.callee, (0, _coderep.getPrecedence)(node), callee), paren(commaSep(parenthizedArgs))), {
        startsWithCurly: callee.startsWithCurly,
        startsWithLet: callee.startsWithLet,
        startsWithLetSquareBracket: callee.startsWithLetSquareBracket,
        startsWithFunctionOrClass: callee.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref21) {
      var binding = _ref21.binding,
          body = _ref21.body;

      return seq(t('catch'), paren(binding), body);
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref22) {
      var name = _ref22.name,
          _super = _ref22.super,
          elements = _ref22.elements;

      var state = seq(t('class'), node.name.name === '*default*' ? empty() : name);
      if (_super != null) {
        state = seq(state, t('extends'), p(node.super, _coderep.Precedence.New, _super));
      }
      state = seq.apply(undefined, [state, t('{')].concat(_toConsumableArray(elements), [t('}')]));
      return state;
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref23) {
      var name = _ref23.name,
          _super = _ref23.super,
          elements = _ref23.elements;

      var state = t('class');
      if (name != null) {
        state = seq(state, name);
      }
      if (_super != null) {
        state = seq(state, t('extends'), p(node.super, _coderep.Precedence.New, _super));
      }
      state = seq.apply(undefined, [state, t('{')].concat(_toConsumableArray(elements), [t('}')]));
      state.startsWithFunctionOrClass = true;
      return state;
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref24) {
      var method = _ref24.method;

      if (!node.isStatic) return method;
      return seq(t('static'), method);
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref25) {
      var object = _ref25.object,
          expression = _ref25.expression;

      var startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';
      return (0, _objectAssign2.default)(seq(p(node.object, (0, _coderep.getPrecedence)(node), object), bracket(expression)), {
        startsWithLet: object.startsWithLet,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithCurly: object.startsWithCurly,
        startsWithFunctionOrClass: object.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref26) {
      var object = _ref26.object,
          expression = _ref26.expression;

      var startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';
      return (0, _objectAssign2.default)(seq(p(node.object, (0, _coderep.getPrecedence)(node), object), bracket(expression)), {
        startsWithLet: object.startsWithLet,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithCurly: object.startsWithCurly,
        startsWithFunctionOrClass: object.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref27) {
      var expression = _ref27.expression;

      return bracket(p(node.expression, _coderep.Precedence.Assignment, expression));
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref28) {
      var test = _ref28.test,
          consequent = _ref28.consequent,
          alternate = _ref28.alternate;

      var containsIn = test.containsIn || alternate.containsIn;
      var startsWithCurly = test.startsWithCurly;
      var startsWithLetSquareBracket = test.startsWithLetSquareBracket;
      var startsWithFunctionOrClass = test.startsWithFunctionOrClass;
      return (0, _objectAssign2.default)(seq(p(node.test, _coderep.Precedence.LogicalOR, test), t('?'), p(node.consequent, _coderep.Precedence.Assignment, consequent), t(':'), p(node.alternate, _coderep.Precedence.Assignment, alternate)), {
        containsIn: containsIn,
        startsWithCurly: startsWithCurly,
        startsWithLetSquareBracket: startsWithLetSquareBracket,
        startsWithFunctionOrClass: startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return seq(t('continue'), node.label ? t(node.label) : empty(), semiOp());
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref29) {
      var name = _ref29.name,
          expression = _ref29.expression;

      return seq(name, t(':'), getAssignmentExpr(expression));
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement() /* node */{
      return seq(t('debugger'), semiOp());
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref30) {
      var body = _ref30.body,
          test = _ref30.test;

      return seq(t('do'), body, t('while'), paren(test), semiOp());
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement() /* node */{
      return semi();
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref31) {
      var expression = _ref31.expression;

      var needsParens = expression.startsWithCurly || expression.startsWithLetSquareBracket || expression.startsWithFunctionOrClass;
      return seq(needsParens ? paren(expression) : expression, semiOp());
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref32) {
      var left = _ref32.left,
          right = _ref32.right,
          body = _ref32.body;

      left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;
      return (0, _objectAssign2.default)(seq(t('for'), paren(seq(left.startsWithLet ? paren(left) : left, t('in'), right)), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref33) {
      var left = _ref33.left,
          right = _ref33.right,
          body = _ref33.body;

      left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;
      return (0, _objectAssign2.default)(seq(t('for'), paren(seq(left.startsWithLet ? paren(left) : left, t('of'), p(node.right, _coderep.Precedence.Assignment, right))), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref34) {
      var init = _ref34.init,
          test = _ref34.test,
          update = _ref34.update,
          body = _ref34.body;

      if (init) {
        if (init.startsWithLetSquareBracket) {
          init = paren(init);
        }
        init = noIn(markContainsIn(init));
      }
      return (0, _objectAssign2.default)(seq(t('for'), paren(seq(init ? init : empty(), semi(), test || empty(), semi(), update || empty())), body), {
        endsWithMissingElse: body.endsWithMissingElse
      });
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;
      return (0, _objectAssign2.default)(seq(t('for'), t('await'), paren(seq(left.startsWithLet ? paren(left) : left, t('of'), p(node.right, _coderep.Precedence.Assignment, right))), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref36) {
      var directives = _ref36.directives,
          statements = _ref36.statements;

      if (statements.length) {
        statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);
      }
      return brace(seq.apply(undefined, _toConsumableArray(directives).concat(_toConsumableArray(statements))));
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref37) {
      var name = _ref37.name,
          params = _ref37.params,
          body = _ref37.body;

      return seq(node.isAsync ? t('async') : empty(), t('function'), node.isGenerator ? t('*') : empty(), node.name.name === '*default*' ? empty() : name, params, body);
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref38) {
      var name = _ref38.name,
          params = _ref38.params,
          body = _ref38.body;

      var state = seq(node.isAsync ? t('async') : empty(), t('function'), node.isGenerator ? t('*') : empty(), name ? name : empty(), params, body);
      state.startsWithFunctionOrClass = true;
      return state;
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref39) {
      var items = _ref39.items,
          rest = _ref39.rest;

      return paren(commaSep(items.concat(rest == null ? [] : [seq(t('...'), rest)])));
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref40) {
      var params = _ref40.params,
          body = _ref40.body;

      params = this.regenerateArrowParams(node.params, params);
      var containsIn = false;
      if (node.body.type !== 'FunctionBody') {
        if (body.startsWithCurly) {
          body = paren(body);
        } else if (body.containsIn) {
          containsIn = true;
        }
      }
      return (0, _objectAssign2.default)(seq(node.isAsync ? t('async') : empty(), params, t('=>'), p(node.body, _coderep.Precedence.Assignment, body)), { containsIn: containsIn });
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref41) {
      var name = _ref41.name,
          body = _ref41.body;

      return seq(t('get'), name, paren(empty()), body);
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      var a = t(node.name);
      if (node.name === 'let') {
        a.startsWithLet = true;
      }
      return a;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref42) {
      var test = _ref42.test,
          consequent = _ref42.consequent,
          alternate = _ref42.alternate;

      if (alternate && consequent.endsWithMissingElse) {
        consequent = brace(consequent);
      }
      return (0, _objectAssign2.default)(seq(t('if'), paren(test), consequent, alternate ? seq(t('else'), alternate) : empty()), { endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true });
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref43) {
      var defaultBinding = _ref43.defaultBinding,
          namedImports = _ref43.namedImports;

      var bindings = [];
      if (defaultBinding != null) {
        bindings.push(defaultBinding);
      }
      if (namedImports.length > 0) {
        bindings.push(brace(commaSep(namedImports)));
      }
      if (bindings.length === 0) {
        return seq(t('import'), t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
      }
      return seq(t('import'), commaSep(bindings), t('from'), t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namespaceBinding = _ref44.namespaceBinding;

      return seq(t('import'), defaultBinding == null ? empty() : seq(defaultBinding, t(',')), t('*'), t('as'), namespaceBinding, t('from'), t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref45) {
      var binding = _ref45.binding;

      if (node.name == null) return binding;
      return seq(t(node.name), t('as'), binding);
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return seq(t('export'), t('*'), t('from'), t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref46) {
      var namedExports = _ref46.namedExports;

      return seq(t('export'), brace(commaSep(namedExports)), t('from'), t((0, _coderep.escapeStringLiteral)(node.moduleSpecifier)), semiOp());
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref47) {
      var namedExports = _ref47.namedExports;

      return seq(t('export'), brace(commaSep(namedExports)), semiOp());
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref48) {
      var declaration = _ref48.declaration;

      switch (node.declaration.type) {
        case 'FunctionDeclaration':
        case 'ClassDeclaration':
          break;
        default:
          declaration = seq(declaration, semiOp());
      }
      return seq(t('export'), declaration);
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref49) {
      var body = _ref49.body;

      body = body.startsWithFunctionOrClass ? paren(body) : body;
      switch (node.body.type) {
        case 'FunctionDeclaration':
        case 'ClassDeclaration':
          return seq(t('export default'), body);
        default:
          return seq(t('export default'), p(node.body, _coderep.Precedence.Assignment, body), semiOp());
      }
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      if (node.exportedName == null) return t(node.name);
      return seq(t(node.name), t('as'), t(node.exportedName));
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref50) {
      var name = _ref50.name;

      if (node.exportedName == null) return name;
      return seq(name, t('as'), t(node.exportedName));
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref51) {
      var body = _ref51.body;

      return (0, _objectAssign2.default)(seq(t(node.label + ':'), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return t(node.value.toString());
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression() /* node */{
      return t('null');
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression() /* node */{
      return t('2e308');
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return new _coderep.NumberCodeRep(node.value);
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return t('/' + node.pattern + '/' + (node.global ? 'g' : '') + (node.ignoreCase ? 'i' : '') + (node.multiLine ? 'm' : '') + (node.dotAll ? 's' : '') + (node.unicode ? 'u' : '') + (node.sticky ? 'y' : ''), true);
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return t((0, _coderep.escapeStringLiteral)(node.value));
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref52) {
      var name = _ref52.name,
          params = _ref52.params,
          body = _ref52.body;

      return seq(node.isAsync ? t('async') : empty(), node.isGenerator ? t('*') : empty(), name, params, body);
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref53) {
      var directives = _ref53.directives,
          items = _ref53.items;

      if (items.length) {
        items[0] = this.parenToAvoidBeingDirective(node.items[0], items[0]);
      }
      return seq.apply(undefined, _toConsumableArray(directives).concat(_toConsumableArray(items)));
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref54) {
      var callee = _ref54.callee,
          args = _ref54.arguments;

      var parenthizedArgs = args.map(function (a, i) {
        return p(node.arguments[i], _coderep.Precedence.Assignment, a);
      });
      var calleeRep = (0, _coderep.getPrecedence)(node.callee) === _coderep.Precedence.Call ? paren(callee) : p(node.callee, (0, _coderep.getPrecedence)(node), callee);
      return seq(t('new'), calleeRep, args.length === 0 ? empty() : paren(commaSep(parenthizedArgs)));
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression() {
      return t('new.target');
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref55) {
      var properties = _ref55.properties;

      var state = brace(commaSep(properties));
      state.startsWithCurly = true;
      return state;
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref56) {
      var operand = _ref56.operand;

      if (node.isPrefix) {
        return this.reduceUnaryExpression.apply(this, arguments);
      }
      return (0, _objectAssign2.default)(seq(p(node.operand, _coderep.Precedence.New, operand), t(node.operator)), {
        startsWithCurly: operand.startsWithCurly,
        startsWithLetSquareBracket: operand.startsWithLetSquareBracket,
        startsWithFunctionOrClass: operand.startsWithFunctionOrClass
      });
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref57) {
      var operand = _ref57.operand;

      return seq(t(node.operator), p(node.operand, (0, _coderep.getPrecedence)(node), operand));
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref58) {
      var expression = _ref58.expression;

      return seq(t('return'), expression || empty(), semiOp());
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref59) {
      var directives = _ref59.directives,
          statements = _ref59.statements;

      if (statements.length) {
        statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);
      }
      return seq.apply(undefined, _toConsumableArray(directives).concat(_toConsumableArray(statements)));
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref60) {
      var name = _ref60.name,
          param = _ref60.param,
          body = _ref60.body;

      return seq(t('set'), name, paren(param), body);
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref61) {
      var name = _ref61.name;

      return name;
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref62) {
      var object = _ref62.object;

      var state = seq(p(node.object, (0, _coderep.getPrecedence)(node), object), t('.'), t(node.property));
      state.startsWithLet = object.startsWithLet;
      state.startsWithCurly = object.startsWithCurly;
      state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;
      state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;
      return state;
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref63) {
      var object = _ref63.object;

      var state = seq(p(node.object, (0, _coderep.getPrecedence)(node), object), t('.'), t(node.property));
      state.startsWithLet = object.startsWithLet;
      state.startsWithCurly = object.startsWithCurly;
      state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;
      state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;
      return state;
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      if (_esutils.keyword.isIdentifierNameES6(node.value)) {
        return t(node.value);
      }
      var n = parseFloat(node.value);
      if (n >= 0 && n.toString() === node.value) {
        return new _coderep.NumberCodeRep(n);
      }
      return t((0, _coderep.escapeStringLiteral)(node.value));
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper() {
      return t('super');
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref64) {
      var test = _ref64.test,
          consequent = _ref64.consequent;

      return seq(t('case'), test, t(':'), seq.apply(undefined, _toConsumableArray(consequent)));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref65) {
      var consequent = _ref65.consequent;

      return seq(t('default:'), seq.apply(undefined, _toConsumableArray(consequent)));
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref66) {
      var discriminant = _ref66.discriminant,
          cases = _ref66.cases;

      return seq(t('switch'), paren(discriminant), brace(seq.apply(undefined, _toConsumableArray(cases))));
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref67) {
      var discriminant = _ref67.discriminant,
          preDefaultCases = _ref67.preDefaultCases,
          defaultCase = _ref67.defaultCase,
          postDefaultCases = _ref67.postDefaultCases;

      return seq(t('switch'), paren(discriminant), brace(seq.apply(undefined, _toConsumableArray(preDefaultCases).concat([defaultCase], _toConsumableArray(postDefaultCases)))));
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref68) {
      var tag = _ref68.tag,
          elements = _ref68.elements;

      var state = node.tag == null ? empty() : p(node.tag, (0, _coderep.getPrecedence)(node), tag);
      state = seq(state, t('`'));
      for (var i = 0, l = node.elements.length; i < l; ++i) {
        if (node.elements[i].type === 'TemplateElement') {
          state = seq(state, i > 0 ? t('}') : empty(), elements[i], i < l - 1 ? t('${') : empty());
        } else {
          state = seq(state, elements[i]);
        }
      }
      state = seq(state, t('`'));
      if (node.tag != null) {
        state.startsWithCurly = tag.startsWithCurly;
        state.startsWithLet = tag.startsWithLet;
        state.startsWithLetSquareBracket = tag.startsWithLetSquareBracket;
        state.startsWithFunctionOrClass = tag.startsWithFunctionOrClass;
      }
      return state;
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return new _coderep.RawToken(node.rawValue);
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression() /* node */{
      return t('this');
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref69) {
      var expression = _ref69.expression;

      return seq(t('throw'), expression, semiOp());
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref70) {
      var body = _ref70.body,
          catchClause = _ref70.catchClause;

      return seq(t('try'), body, catchClause);
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref71) {
      var body = _ref71.body,
          catchClause = _ref71.catchClause,
          finalizer = _ref71.finalizer;

      return seq(t('try'), body, catchClause || empty(), t('finally'), finalizer);
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref72) {
      var expression = _ref72.expression;

      if (node.expression == null) return t('yield');
      return (0, _objectAssign2.default)(seq(t('yield'), p(node.expression, (0, _coderep.getPrecedence)(node), expression)), { containsIn: expression.containsIn });
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref73) {
      var expression = _ref73.expression;

      return (0, _objectAssign2.default)(seq(t('yield'), t('*'), p(node.expression, (0, _coderep.getPrecedence)(node), expression)), { containsIn: expression.containsIn });
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      var delim = node.rawValue.match(/(^|[^\\])(\\\\)*"/) ? '\'' : '"';
      return seq(t(delim + node.rawValue + delim), semiOp());
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref74) {
      var declarators = _ref74.declarators;

      return seq(t(node.kind), commaSep(declarators));
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref75) {
      var declaration = _ref75.declaration;

      return seq(declaration, semiOp());
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref76) {
      var binding = _ref76.binding,
          init = _ref76.init;

      var containsIn = init && init.containsIn && !init.containsGroup;
      if (init) {
        if (init.containsGroup) {
          init = paren(init);
        } else {
          init = markContainsIn(init);
        }
      }
      return (0, _objectAssign2.default)(init == null ? binding : seq(binding, t('='), init), { containsIn: containsIn });
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref77) {
      var test = _ref77.test,
          body = _ref77.body;

      return (0, _objectAssign2.default)(seq(t('while'), paren(test), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref78) {
      var object = _ref78.object,
          body = _ref78.body;

      return (0, _objectAssign2.default)(seq(t('with'), paren(object), body), { endsWithMissingElse: body.endsWithMissingElse });
    }
  }]);

  return MinimalCodeGen;
}();

exports.default = MinimalCodeGen;