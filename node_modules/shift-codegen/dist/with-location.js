'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

exports.default = codeGenWithLocation;

var _shiftReducer = require('shift-reducer');

var _tokenStream = require('./token-stream');

var _minimalCodegen = require('./minimal-codegen');

var _minimalCodegen2 = _interopRequireDefault(_minimalCodegen);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function mightHaveSemi(type) {
  return (/(Import)|(Export)|(Statement)|(Directive)|(SwitchCase)|(SwitchDefault)/.test(type)
  );
}

var TokenStreamWithLocation = function (_TokenStream) {
  _inherits(TokenStreamWithLocation, _TokenStream);

  function TokenStreamWithLocation() {
    _classCallCheck(this, TokenStreamWithLocation);

    var _this = _possibleConstructorReturn(this, (TokenStreamWithLocation.__proto__ || Object.getPrototypeOf(TokenStreamWithLocation)).call(this));

    _this.line = 1;
    _this.column = 0;
    _this.startingNodes = [];
    _this.finishingStatements = [];
    _this.lastNumberNode = null;
    _this.locations = new WeakMap();
    return _this;
  }

  _createClass(TokenStreamWithLocation, [{
    key: 'putRaw',
    value: function putRaw(tokenStr) {
      var previousLength = this.result.length;
      _get(TokenStreamWithLocation.prototype.__proto__ || Object.getPrototypeOf(TokenStreamWithLocation.prototype), 'putRaw', this).call(this, tokenStr);
      this.startNodes(tokenStr, previousLength);
    }
  }, {
    key: 'put',
    value: function put(tokenStr, isRegExp) {
      if (this.optionalSemi && tokenStr !== '}') {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.finishingStatements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var obj = _step.value;

            ++obj.end.column;
            ++obj.end.offset;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      this.finishingStatements = [];

      if (this.lastNumber !== null && tokenStr === '.' && (0, _tokenStream.needsDoubleDot)(this.lastNumber)) {
        var loc = this.locations.get(this.lastNumberNode).end;
        ++loc.column;
        ++loc.offset;
      }
      this.lastNumberNode = null;

      var previousLength = this.result.length;
      _get(TokenStreamWithLocation.prototype.__proto__ || Object.getPrototypeOf(TokenStreamWithLocation.prototype), 'put', this).call(this, tokenStr, isRegExp);
      this.startNodes(tokenStr, previousLength);
    }
  }, {
    key: 'startNodes',
    value: function startNodes(tokenStr, previousLength) {
      var linebreakRegex = /\r\n?|[\n\u2028\u2029]/g;
      var matched = false;
      var match = void 0;
      var startLine = this.line;
      var startColumn = this.column;
      while (match = linebreakRegex.exec(tokenStr)) {
        ++this.line;
        this.column = tokenStr.length - match.index - match[0].length;
        matched = true;
      }

      if (!matched) {
        this.column += this.result.length - previousLength;
        startColumn = this.column - tokenStr.length; // i.e., skip past any additional characters which were necessitated by, but not part of, this part
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.startingNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;

          this.locations.set(node, {
            start: {
              line: startLine,
              column: startColumn,
              offset: this.result.length - tokenStr.length
            },
            end: null
          });
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.startingNodes = [];
    }
  }, {
    key: 'startEmit',
    value: function startEmit(node) {
      this.startingNodes.push(node);
    }
  }, {
    key: 'finishEmit',
    value: function finishEmit(node) {
      this.locations.get(node).end = {
        line: this.line,
        column: this.column,
        offset: this.result.length
      };
      if (mightHaveSemi(node.type)) {
        this.finishingStatements.push(this.locations.get(node));
      }
    }
  }]);

  return TokenStreamWithLocation;
}(_tokenStream.TokenStream);

function addLocation(rep, node) {
  var originalEmit = rep.emit.bind(rep);
  if (node.type === 'Script' || node.type === 'Module') {
    // These are handled specially: they include beginning and trailing whitespace.
    rep.emit = function (ts) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      ts.locations.set(node, {
        start: {
          line: 1,
          column: 0,
          offset: 0
        },
        end: null
      });
      originalEmit.apply(undefined, [ts].concat(args));
      ts.locations.get(node).end = {
        line: ts.line,
        column: ts.column,
        offset: ts.result.length
      };
    };
  } else if (node.type === 'LiteralNumericExpression') {
    rep.emit = function (ts) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      ts.startEmit(node);
      originalEmit.apply(undefined, [ts].concat(args));
      ts.finishEmit(node);
      ts.lastNumberNode = node;
    };
  } else {
    rep.emit = function (ts) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      ts.startEmit(node);
      originalEmit.apply(undefined, [ts].concat(args));
      ts.finishEmit(node);
    };
  }
  return rep;
}

function addLocationToReducer(reducer) {
  var wrapped = (0, _shiftReducer.adapt)(addLocation, reducer);

  var originalRegenerate = wrapped.regenerateArrowParams.bind(wrapped);
  wrapped.regenerateArrowParams = function (element, original) {
    var out = originalRegenerate(element, original);
    if (out !== original) {
      addLocation(out, element);
    }
    return out;
  };

  var originalDirective = wrapped.parenToAvoidBeingDirective.bind(wrapped);
  wrapped.parenToAvoidBeingDirective = function (element, original) {
    var out = originalDirective(element, original);
    if (out !== original) {
      addLocation(out, element);
    }
    return out;
  };

  return wrapped;
}

function codeGenWithLocation(program) {
  var generator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _minimalCodegen2.default();

  var ts = new TokenStreamWithLocation();
  var rep = (0, _shiftReducer.reduce)(addLocationToReducer(generator), program);
  rep.emit(ts);
  return { source: ts.result, locations: ts.locations };
}