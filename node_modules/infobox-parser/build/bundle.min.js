"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function trimWrappers(e){return e.replace(/\[\[/g,"").replace(/\]\]/g,"").replace(/\{\{/g,"").replace(/\}\}/g,"").trim()}function trimOr(e){var t=e.indexOf("|");return-1!==t?e.substring(0,t):e}function getValue(e,t){if(!e)return null;var r=e.trim().replace(/File:/,"").replace(/\{\{\d+\}\}/g,"").replace(extraPropertyPattern,"").replace(endingPattern,"");if("y"===r||"yes"===r)return!0;if("birthPlace"==t)return e.trim();var a=r.match(linksPattern);return a?a[0].split(linkSeparatorPattern).filter(function(e){return e}):trimOr(trimWrappers(r))}function dataType(e){var t=e.globalPattern,r=e.parsePattern,a=e.parse,n=e.variable,l=e.name;return function(e){var i=e.match(t);if(!i){var s;return s={},defineProperty(s,l,[]),defineProperty(s,"sourceAfter",e),s}var o=i.map(function(e){return a(e.match(r))}),u=i.reduce(function(e,t,r){return o[r]===DO_NOT_REPLACE?e:e.replace(t,"$"+n+"_"+r)},e);return{data:defineProperty({},l,o),sourceAfter:u}}}function byDataHandler(e,t){var r=e.source,a=e.context,n=t(r),l=n.data,i=n.sourceAfter;return{context:Object.assign({},a,l),source:i}}function extractData(e){return dataTypes$1.map(function(e){return e.handler}).reduce(byDataHandler,{context:{},source:e})}function findPropertyList(e){var t=e.match(keyValueGlobalPattern);return t?t.map(function(e){var t=keyValuePattern.exec(e);if(!t)return null;var r=slicedToArray(t,3),a=r[1],n=r[2],l=camelCase(a.trim());return{key:l,value:getValue(n,l)}}).filter(function(e){return e}):[]}function fillVariable(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues;if("string"!=typeof e)return console.log("Warning: Something went wrong. Could not fill variables in: ("+(void 0===e?"undefined":_typeof(e))+") "+JSON.stringify(e)),{};var n=dataTypes$1.find(function(t){return e.match(t.pattern)});if(n){var l=n.pattern.exec(e),i=slicedToArray(l,2),s=i[0],o=i[1],u=t[n.name][parseInt(o,10)];return a||"string"!=typeof u?u:e.replace(s,u)}return e}function fillVariables(e,t,r){if(void 0===e)return e;if(e instanceof Date)return e;if("number"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return fillVariables(e,t,r)});if("object"===(void 0===e?"undefined":_typeof(e)))return Object.keys(e).reduce(function(a,n){return Object.assign(a,defineProperty({},n,fillVariables(e[n],t,r)))},{});var a=fillVariable(e,t,r);return a===e?e:fillVariables(a,t,r)}function handleSmallData(e,t,r){var a=r.simplifyDataValues;if("string"==typeof e&&e.match(smallDataType.pattern)){var n=e.replace(smallDataType.pattern,"").replace(/,/,"").trim(),l=smallDataType.pattern.exec(e),i=slicedToArray(l,2),s=i[1],o=t[smallDataType.name][parseInt(s,10)],u={primary:getVariableValue(n,t,{simplifyDataValues:a}),secondary:getVariableValue(o,t,{simplifyDataValues:a})};return a?u.primary:u}return null}function getVariableValue(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues,n=handleSmallData(e,t,{simplifyDataValues:a});return n||fillVariables(e,t,{simplifyDataValues:a})}function reduceVariable(e,t,r,a){if(null===t)return null;if("boolean"==typeof t)return t;if(Array.isArray(t))return t.map(function(e){return getVariableValue(e,r,a)});if(e.match(/areaTotal/)||e.match(/population/)){var n=numberParse(t);if(!1===n&&(n=parseFloat(t,10)),!isNaN(n))return n}if(e.match(/date/i)){var l=+new Date(t);if(!isNaN(l))return new Date(t)}var i=getVariableValue(t,r,a);return Array.isArray(i)?i.map(function(e){return getVariableValue(e,r,a)}):i}function byVariableReduction(e,t){return function(r,a){var n=a.key,l=a.value,i=reduceVariable(n,l,e,t);return""===i||null===i?r:Object.assign({},r,defineProperty({},n,i))}}function extractProperties(e){var t=e.source,r=e.context,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=a.simplifyDataValues,l=void 0===n||n;return findPropertyList(t).reduce(byVariableReduction(r,{simplifyDataValues:l}),{})}function transformProperties(e){return Object.keys(e).reduce(function(t,r){var a=e[r],n=r.match(blankNamePattern);if(n){var l=n[1]||"",i=e["blank"+l+"NameSec2"],s=e["blank"+l+"InfoSec2"];return"string"!=typeof i?t:Object.assign(t,defineProperty({},camelCase(i),s))}return r.match(blankInfoPattern)?t:Object.assign(t,defineProperty({},r,a))},{})}function findOuterIndex(e){for(var t=[],r=0;r<e.length-1;r++){var a=e.substr(r,2);if("{{"!==a){if("}}"===a){t.pop();if(0===t.length)return r+2;r++}}else t.push(r),r++}}function parse(e){var t=e.match(infoBoxStartPattern);if(!t)return{data:e,sourceLeft:null};var r=t.index,a=e.substring(r),n=findOuterIndex(a);if(!n)return{data:e,sourceLeft:null};var l=a.substring(0,n),i=e.substring(n);return{data:l,sourceLeft:!i.match(infoBoxStartPattern)?null:i}}function extractInfoboxes(e){for(var t=parse(e),r=[t.data];t.sourceLeft;)t=parse(t.sourceLeft),r.push(t.data);return r}function cleanSource(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.removeSmall,a=void 0!==r&&r,n=t.removeReferences;return(void 0===n||n)&&(e=e.replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g,"").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g,"")),a&&(e=e.replace(/<small>.*<\/small>/g,"")),e.replace(/'''?/g,"").replace(/\|display=inline/g,"").replace(/<br\s?\/?>/g,",").replace(/&minus;/g,"-").replace(/{{Sndash}}/g,"–").replace(/<sup>/g,"^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g,"").replace(/\{\{efn\|([^\}\}]+)\}\}/g,"").replace(/−/g,"-").replace(/<\/sup>/g,"").replace(/\{\{\s*nowrap\s*\|([^\n\}]+)\}\}/gi,"$1").replace(/\{\{\s*Avoid\swrap\s*\|([^\n\}]+)\}\}/gi,"$1").replace(/<!--([\s\S]*?)-->/g,"").replace(/&nbsp;/g," ").replace("|''See list''","")}function transformRowSpan(e){return e.map(transformCells).reduce(function(e,t,r){for(var a=0===r?0:1,n=0;n<t.length;n++)e[n+a]||(e[n+a]={}),t[n]&&(e[n+a][t[n]]=1);return e},[]).map(function(e){return Object.keys(e).join(",")}).join(" || ")}function clean(e){return e.substring(2,e.length-2).replace(linkPattern$1,function(e,t){return t.split("|")[0]}).replace(/'''?/g,"")}function parseRow(e){var t=e[0].match(/BS(\d)/),r=e[0].substring(2),a=1,n=[],l=1;for(t&&(a=t[1],r=e[0].substring(3));l<=a;l++)n.push(e[l]);return{type:r,margin:e[l++],text1:e[l++],text2:e[l++],comment:e[l++],icons:n}}function getMatches(e,t){for(var r=void 0,a=[];null!==(r=t.exec(e));)a.push({value:r[1]&&r[1].trim(),start:r.index,end:r.index+r[0].length});return a}function parseTableData(e){var t=e.match(rowPattern$1);return t?t.map(function(e){var t=e.match(rowPatternSingle);return slicedToArray(t,2)[1].trim().split("|").slice(1)}):[]}function getTables(e){var t=getMatches(e,tableStartPattern$1),r=getMatches(e,tableEndPattern$1);return t.map(function(t,a){var n=r[a];if(!n)throw new Error("[Table Parsing] Failed to pair table");return{rows:parseTableData(e.substring(t.end,n.start).trim().replace(/'''/g,"")),start:t.start,end:n.end}})}function last(e){return e.length?e[e.length-1]:void 0}function parseInfobox(e,t){var r=extractInfoboxes(e).map(function(e){return transformProperties(extractProperties(extractData(cleanSource(e,t)),t))});if(!r.length)return{};var a={general:r.shift()};return r.forEach(function(e){var t=e.type;t?a[camelCase(t)]=e:Object.assign(a,{general:Object.assign({},a.general,e)})}),a.tables=parseTables(e),a.bsTables=parseBsTables(e),a.lists=parseLists(e),a}var camelCase=_interopDefault(require("camelcase")),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},defineProperty=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},slicedToArray=function(){function e(e,t){var r=[],a=!0,n=!1,l=void 0;try{for(var i,s=e[Symbol.iterator]();!(a=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){n=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(n)throw l}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),toConsumableArray=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},smallGlobalPattern=/\{\{small\|([^\}\}]+)\}\}/g,smallPattern=/small\|([^\}\}]+)\}\}/,small={globalPattern:smallGlobalPattern,parsePattern:smallPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"SMALL",name:"smalls"},flagGlobalPattern=/\{\{flag\|([^\}\}]+)\}\}/g,flagPattern=/flag\|([^\}\}]+)\}\}/,flag={globalPattern:flagGlobalPattern,parsePattern:flagPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"FLAG",name:"flags"},coordsGlobalPattern=/\{\{coord\|([^\}\}]+)\}\}/g,coordsPattern=/coord\|([^\}\}]+)\}\}/,coords={globalPattern:coordsGlobalPattern,parsePattern:coordsPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"COORD",name:"coords"},globalPattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g,pattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/,instances={globalPattern:globalPattern,parsePattern:pattern,parse:function(e){var t=slicedToArray(e,3),r=t[1],a=t[2];return r||a},variable:"INSTANCE",name:"instances"},extraPropertyPattern=/\n?\s?\|\s?\w+$/,endingPattern=/\n\}\}$/,linksPattern=/((\$\w+_\d+)\s*,?\s*){2,}/g,linkSeparatorPattern=/[,\s?]/g,listItemPrefixPattern=/^\|\s?/,unbulletedListGlobalPattern=/\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/gi,unbulletedListItemPattern=/\|\s*([^|}]+)/g,unbulletedLists={globalPattern:unbulletedListGlobalPattern,parsePattern:unbulletedListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNBULLETED_LIST",name:"unbulletedLists"},listItemPrefixPattern$1=/^\*\s*/,plainListGlobalPattern=/\n(\*\s*[^*|]+)+/g,plainListItemPattern=/\*\s*([^*|]+)/g,unmarkedLists={globalPattern:plainListGlobalPattern,parsePattern:plainListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$1,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNMARKED_LIST",name:"unmarkedLists"},listItemPrefixPattern$2=/^\*\s?/,plainListGlobalPattern$1=/\{\{f?p?P?l?a?i?n?t?\s?list\s?\|([^\}\}]+)\}\}/g,plainListItemPattern$1=/\*\s*([^*}]+)/g,plainLists={globalPattern:plainListGlobalPattern$1,parsePattern:plainListItemPattern$1,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$2,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"PLAIN_LIST",name:"plainLists"},marriageGlobalPattern=/\{\{Marriage\|([^\}\}]+)\}\}/gi,marriagePattern=/Marriage\|([^|]+)\|([^|]*)(.*)\}\}/i,marriages={globalPattern:marriageGlobalPattern,parsePattern:marriagePattern,parse:function(e){var t=slicedToArray(e,3);return{who:t[1],married:t[2]}},variable:"MARRIAGE",name:"marriages"},nbayGlobalPattern=/\{\{nbay\|([^\}\}]+)\}\}/gi,nbayPattern=/nbay\|([^|]+)\|(.*)\}\}/i,nbay={globalPattern:nbayGlobalPattern,parsePattern:nbayPattern,parse:function(e){var t=slicedToArray(e,3),r=t[1];t[2];return r},variable:"nbay",name:"nbay"},otherGlobalPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g,otherPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/,other={globalPattern:otherGlobalPattern,parsePattern:otherPattern,parse:function(e){var t=slicedToArray(e,4),r=t[1];t[2],t[3];return r},variable:"OTHER",name:"others"},hlistGlobalPattern=/\{\{hlist\|([^\}\}]+)\}\}/gi,hlistPattern=/hlist\|(.*)\n?\}\}/i,hlist={globalPattern:hlistGlobalPattern,parsePattern:hlistPattern,parse:function(e){return e?slicedToArray(e,2)[1].split("|"):[]},variable:"HLIST",name:"hlists"},birthDateGlobalPattern=/\{\{birth\sdate([^\}\}]+)\}\}/gi,birthDatePattern=/(\d+)\|(\d+)\|(\d+)/,millisInYear=31536e6,birthDates={globalPattern:birthDateGlobalPattern,parsePattern:birthDatePattern,parse:function(e){var t=slicedToArray(e,4),r=t[1],a=t[2],n=t[3],l=new Date(r,a-1,n);return{date:l,age:Math.floor((Date.now()-+l)/millisInYear)}},variable:"BIRTH_DATE",name:"birthDates"},DO_NOT_REPLACE=Symbol("DO NOT REPLACE"),labeledDateGlobalPattern=/\{\{([^\n\}\}]+)\}\}/g,labeledDatePattern=/(.*)/,labeledDates={globalPattern:labeledDateGlobalPattern,parsePattern:labeledDatePattern,parse:function(e){var t=e[0].indexOf("|");if(t>-1){var r=e[0].substring(t+1).slice(0,-2),a=new Date(r+" GMT");if(!isNaN(a.getTime()))return{date:a};if(a=new Date(r.split("|").join("-")+" GMT"),!isNaN(a.getTime()))return{date:a}}return DO_NOT_REPLACE},variable:"LABELED_DATE",name:"labeledDates"},deathDateGlobalPattern=/\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi,deathDatePattern=/(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/,millisInYear$1=31536e6,deathDates={globalPattern:deathDateGlobalPattern,parsePattern:deathDatePattern,parse:function(e){var t=slicedToArray(e,7),r=t[1],a=t[2],n=t[3],l=t[4],i=t[5],s=void 0===i?0:i,o=t[6],u=void 0===o?0:o,c=new Date(r,a-1,n),f=new Date(l,s-1,u);return{date:c,age:Math.floor((Number(c)-Number(f))/millisInYear$1)}},variable:"DEATH_DATE",name:"deathDates"},URLGlobalPattern=/\{\{URL\|([^\}\}]+)\}\}/g,URLPattern=/URL\|([^\}\}]+)\}\}/,url={globalPattern:URLGlobalPattern,parsePattern:URLPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"URL",name:"urls"},websiteGlobalPattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g,websitePattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/,website={globalPattern:websiteGlobalPattern,parsePattern:websitePattern,parse:function(e){var t=slicedToArray(e,5),r=t[1],a=t[2],n=t[3];return{protocol:r,hostname:a,path:n,title:t[4],url:r+"://"+a+n}},variable:"WEBSITE",name:"websites"},globalPattern$1=/\{\{Extra[^}}]+\}\}/gi,parsePattern=/\|\s?(\w+)\s+=\s+(.+)/g,propPattern=/\|\s?(\w+)\s+=\s+(.+)/,extra={globalPattern:globalPattern$1,parsePattern:parsePattern,parse:function(e){return e.reduce(function(e,t){var r=t.match(propPattern),a=slicedToArray(r,3),n=a[1],l=a[2];return e[n]=l,e},{})},variable:"EXTRA",name:"extra"},convertGlobalPattern=/\{\{convert\|([\d\.]+)\|(\w+)/g,convertPattern=/\{\{convert\|([\d\.]+)\|(\w+)/,convert={globalPattern:convertGlobalPattern,parsePattern:convertPattern,parse:function(e){var t=slicedToArray(e,3);return t[1]+" "+t[2]},variable:"CONVERT",name:"converts"},filmDatesPattern=/\{\{film\sdate([^\}\}]+)\}\}/gi,filmDatePatternGlobal=/(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/g,filmDatePattern=/(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/,filmDates={globalPattern:filmDatesPattern,parsePattern:filmDatePatternGlobal,parse:function(e){return e.map(function(e){var t=e.match(filmDatePattern),r=slicedToArray(t,7),a=(r[0],r[1]),n=r[2],l=r[3],i=r[4],s=(r[5],r[6]);return{date:new Date(a,n&&n-1,l),location:i,ref:s}})},variable:"FILM_DATES",name:"filmDates"},otherGlobalPattern$1=/<ref(\s\w+=[^>]+)?>(.*)<\/ref>/g,otherPattern$1=/<ref(\s\w+=[^>]+)?>(.*)<\/ref>/,attributeGlobalPattern=/(\w+)=(["\w]+)/g,attributePattern=/(\w+)=(["\w]+)/,ref1={globalPattern:otherGlobalPattern$1,parsePattern:otherPattern$1,parse:function(e){var t=slicedToArray(e,3),r=(t[0],t[1]),a=t[2];return{attributes:((r||"").match(attributeGlobalPattern)||[]).reduce(function(e,t){if(t){var r=t.match(attributePattern),a=slicedToArray(r,3),n=(a[0],a[1]),l=a[2];e[n]=l.replace(/"/g,"")}return e},{}),contents:a}},variable:"REF",name:"refs"},otherGlobalPattern$2=/<ref(\s\w+=[^>]+)?\/>/g,otherPattern$2=/<ref(\s\w+=[^>]+)?\/>/,attributeGlobalPattern$1=/(\w+)=(["\w]+)/g,attributePattern$1=/(\w+)=(["\w]+)/,ref2={globalPattern:otherGlobalPattern$2,parsePattern:otherPattern$2,parse:function(e){return{attributes:e[1].match(attributeGlobalPattern$1).reduce(function(e,t){var r=t.match(attributePattern$1),a=slicedToArray(r,3),n=(a[0],a[1]),l=a[2];return e[n]=l.replace(/"/g,""),e},{})}},variable:"REF",name:"refs"},globalPattern$2=/\{\{formatnum:\d+\}\}/gi,parsePattern$1=/\{\{formatnum:(\d+)\}\}/,formatNum={globalPattern:globalPattern$2,parsePattern:parsePattern$1,parse:function(e){var t=slicedToArray(e,2),r=t[1];return parseFloat(r)},variable:"FORMAT_NUM",name:"formatNum"},dataTypes=[instances,ref1,ref2,small,formatNum,flag,coords,marriages,birthDates,labeledDates,deathDates,unbulletedLists,website,hlist,url,convert,nbay,filmDates,other,extra,plainLists,unmarkedLists],dataTypes$1=dataTypes.map(function(e){return{handler:dataType(e),name:e.name,pattern:new RegExp("\\$"+e.variable+"_(\\d+)")}}),keyValueGlobalPattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g,keyValuePattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/,numberParse=function(e){return"string"==typeof e&&(e=e.trim().replace(/ /g,""),e.match(/,/)&&e.match(/\./)?e.indexOf(",")<e.indexOf(".")?parseEnglish(e):parseSpanish(e):e.match(/,/)&&!e.match(/\./)?e.match(/,/g).length>1?parseEnglish(e):e.match(/,[0-9]{3}($|^[0-9])/)?parseEnglish(e):parseSpanish(e):!e.match(/,/)&&e.match(/\./)?e.match(/\./g).length>1?parseSpanish(e):e.match(/\.[0-9]{3}($|^[0-9])/)?parseSpanish(e):parseEnglish(e):(+e).toString()===e&&+e)},parseEnglish=function(e){return+e.replace(/,/g,"")},parseSpanish=function(e){return+e.replace(/\./g,"").replace(/,/g,".")},smallDataType=dataTypes$1.find(function(e){return"smalls"===e.name}),blankNamePattern=/blank(\d+)?NameSec2/,blankInfoPattern=/blank(\d+)?InfoSec2/,infoBoxStartPattern=/{{\w*box/,tableStartPattern=/{\|(.*)\n?/,tableEndPattern=/\n\|}/,headersPattern=/!\s?(.*)/g,rowPattern=/\|-/,cellSeparatorPattern=/(?:\n\|)|(?:\|\|)/,linkPattern=/\[\[([^\]]+)\]\]/g,linkNamePattern=/^.*\|/,inlineHeaderPattern="!!",actionPattern=/{{anchor\|(.*)}}/g,rowSpanCountPattern=/rowspan="(\d+)"/,stripLinks=function(e){return e.replace(linkPattern,function(e,t){return t.replace(linkNamePattern,"").trim()||t})},removeActions=function(e){return e.replace(actionPattern,"")},transformCell=function(e){return stripLinks(removeActions(e||"")).replace(rowSpanCountPattern,"").replace(linkNamePattern,"").trim()},transformCells=function(e){return e.split(cellSeparatorPattern).map(transformCell)},findIndex=function(e,t){var r=e.match(t);return r?r.index:-1},findTableStart=function(e){var t=e.match(tableStartPattern);return t?t.index+t[0].length:-1},findTableEnd=function(e){return findIndex(e,tableEndPattern)},getHeaders=function(e){for(var t=[],r=void 0;r=headersPattern.exec(e);)t.push.apply(t,toConsumableArray(r[1].split(inlineHeaderPattern).map(transformCell)));return t},getRows=function(e){var t=e.split(rowPattern).map(function(e){return e.replace(/^.*\n+?\|/,"").trim()}).filter(function(e){return e}),r=[],a=0,n=0,l=[],i=!0,s=!1,o=void 0;try{for(var u,c=t[Symbol.iterator]();!(i=(u=c.next()).done);i=!0){var f=u.value,p=f.match(rowSpanCountPattern);p&&(a=0,n=parseInt(p[1]),l=[]),a<n?(l.push(f),++a===n&&r.push(transformRowSpan(l))):r.push(f)}}catch(e){s=!0,o=e}finally{try{!i&&c.return&&c.return()}finally{if(s)throw o}}return r},getNextTable=function(e,t,r){var a=e,n=findTableStart(a);if(-1===n)return null;a=a.substring(n);var l=findTableEnd(a);if(-1===l)return null;a=a.substring(0,l);var i=getRows(a);if(!i.length)return null;var s=getHeaders(i[0]);return s.length?{data:i.slice(1).map(transformCells).map(function(e){return s.reduce(function(a,n,l){return a[camelCase(fillVariable(n,t,r))]=fillVariables(e[l],t,r),a},{})}),end:n+l}:null},parseTables=function(e,t){for(var r=cleanSource(e,t),a=extractData(r),n=[],l=a.source,i=null;i=getNextTable(l,a.context,t);){if(!i)return n;n.push(i.data),l=l.substring(i.end)}return n},linkPattern$1=/\[\[([^\]]+)\]\]/g,kmPattern=/{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g,parseBsTables=function(e){var t=e.replace(kmPattern,"$1/$2").match(/{{BS([^}}]+)}}/g);return t?t.map(function(e){return clean(e).split("|")}).map(parseRow).filter(function(e){return"-"!==e.type[0]}):null},headingPattern=/[^=]==\s?([\w\s]+)\s?==/g,subheadingPattern=/===([\w\s]+)===/g,tableStartPattern$1=/{{list.+start.*}}/gi,tableEndPattern$1=/{{list.+end.*}}/gi,rowPattern$1=/{{(.*)}}/g,rowPatternSingle=/{{(.*)}}/,parseLists=function(e){var t=getMatches(e,headingPattern),r=getMatches(e,subheadingPattern),a=getTables(e);return a.forEach(function(e){var a=t.filter(function(t){return t.end<e.start}).map(function(e){return e.value});e.heading=last(a);var n=r.filter(function(t){return t.end<e.start}).map(function(e){return e.value});e.subheading=last(n),delete e.start,delete e.end}),a};module.exports=parseInfobox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXMiOlsiLi4vdXRpbC9nZXRWYWx1ZS5qcyIsIi4uL2RhdGEtdHlwZXMvZGF0YVR5cGUuanMiLCIuLi91dGlsL2V4dHJhY3REYXRhLmpzIiwiLi4vdXRpbC9wcm9wZXJ0eUxpc3QuanMiLCIuLi91dGlsL2ZpbGxWYXJpYWJsZXMuanMiLCIuLi91dGlsL2V4dHJhY3RQcm9wZXJ0aWVzLmpzIiwiLi4vdXRpbC90cmFuc2Zvcm1Qcm9wZXJ0aWVzLmpzIiwiLi4vdXRpbC9leHRyYWN0SW5mb2JveGVzLmpzIiwiLi4vdXRpbC9jbGVhblNvdXJjZS5qcyIsIi4uL3V0aWwvcGFyc2VUYWJsZXMuanMiLCIuLi91dGlsL3BhcnNlQnNUYWJsZXMuanMiLCIuLi91dGlsL3BhcnNlTGlzdHMuanMiLCIuLi9pbmRleC5qcyIsIi4uL2RhdGEtdHlwZXMvc21hbGwuanMiLCIuLi9kYXRhLXR5cGVzL2ZsYWcuanMiLCIuLi9kYXRhLXR5cGVzL2Nvb3Jkcy5qcyIsIi4uL2RhdGEtdHlwZXMvaW5zdGFuY2VzLmpzIiwiLi4vZGF0YS10eXBlcy91bmJ1bGxldGVkTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL3VubWFya2VkTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL3BsYWluTGlzdHMuanMiLCIuLi9kYXRhLXR5cGVzL21hcnJpYWdlcy5qcyIsIi4uL2RhdGEtdHlwZXMvbmJheS5qcyIsIi4uL2RhdGEtdHlwZXMvb3RoZXIuanMiLCIuLi9kYXRhLXR5cGVzL2hsaXN0LmpzIiwiLi4vZGF0YS10eXBlcy9iaXJ0aERhdGVzLmpzIiwiLi4vZGF0YS10eXBlcy9sYWJlbGVkRGF0ZXMuanMiLCIuLi9kYXRhLXR5cGVzL2RlYXRoRGF0ZXMuanMiLCIuLi9kYXRhLXR5cGVzL3VybC5qcyIsIi4uL2RhdGEtdHlwZXMvd2Vic2l0ZS5qcyIsIi4uL2RhdGEtdHlwZXMvZXh0cmEuanMiLCIuLi9kYXRhLXR5cGVzL2NvbnZlcnQuanMiLCIuLi9kYXRhLXR5cGVzL2ZpbG1EYXRlcy5qcyIsIi4uL2RhdGEtdHlwZXMvcmVmMS5qcyIsIi4uL2RhdGEtdHlwZXMvcmVmMi5qcyIsIi4uL2RhdGEtdHlwZXMvZm9ybWF0TnVtLmpzIiwiLi4vZGF0YS10eXBlcy9pbmRleC5qcyIsIi4uL3V0aWwvbnVtYmVyUGFyc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXh0cmFQcm9wZXJ0eVBhdHRlcm4gPSAvXFxuP1xccz9cXHxcXHM/XFx3KyQvO1xuY29uc3QgZW5kaW5nUGF0dGVybiA9IC9cXG5cXH1cXH0kLztcbmNvbnN0IGxpbmtzUGF0dGVybiA9IC8oKFxcJFxcdytfXFxkKylcXHMqLD9cXHMqKXsyLH0vZztcbmNvbnN0IGxpbmtTZXBhcmF0b3JQYXR0ZXJuID0gL1ssXFxzP10vZztcblxuZnVuY3Rpb24gdHJpbVdyYXBwZXJzKHN0cikge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoL1xcW1xcWy9nLCAnJylcbiAgICAucmVwbGFjZSgvXFxdXFxdL2csICcnKVxuICAgIC5yZXBsYWNlKC9cXHtcXHsvZywgJycpXG4gICAgLnJlcGxhY2UoL1xcfVxcfS9nLCAnJylcbiAgICAudHJpbSgpO1xufVxuXG5mdW5jdGlvbiB0cmltT3Ioc3RyKSB7XG4gIGNvbnN0IG9yUG9zaXRpb24gPSBzdHIuaW5kZXhPZignfCcpO1xuICBpZiAob3JQb3NpdGlvbiAhPT0gLTEpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBvclBvc2l0aW9uKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYWx1ZShyYXcsIGtleSkge1xuICBpZiAoIXJhdykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY2xlYW5zZWQgPSByYXdcbiAgICAudHJpbSgpXG4gICAgLnJlcGxhY2UoL0ZpbGU6LywgJycpXG4gICAgLy8gSGF2ZSBub3QgZm91bmQgcmVhc29uIGZvciB0aGlzIGJ1dCBpdCBicmVha3MgcGFyc2luZywgc28gd2UgYXJlIGp1c3RcbiAgICAvLyByZW1vdmluZyBpdCBmb3Igbm93XG4gICAgLnJlcGxhY2UoL1xce1xce1xcZCtcXH1cXH0vZywgJycpXG4gICAgLnJlcGxhY2UoZXh0cmFQcm9wZXJ0eVBhdHRlcm4sICcnKVxuICAgIC5yZXBsYWNlKGVuZGluZ1BhdHRlcm4sICcnKTtcblxuICBpZiAoY2xlYW5zZWQgPT09ICd5JyB8fCBjbGVhbnNlZCA9PT0gJ3llcycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ2JpcnRoUGxhY2UnKSB7XG4gICAgcmV0dXJuIHJhdy50cmltKCk7XG4gIH1cblxuICAvLyBJcyBpdCBhIGxpc3Qgb2YgbGlua3M/P1xuICBjb25zdCBsaW5rcyA9IGNsZWFuc2VkLm1hdGNoKGxpbmtzUGF0dGVybik7XG4gIGlmIChsaW5rcykge1xuICAgIHJldHVybiBsaW5rc1swXS5zcGxpdChsaW5rU2VwYXJhdG9yUGF0dGVybikuZmlsdGVyKHRleHQgPT4gdGV4dCk7XG4gIH1cblxuICByZXR1cm4gdHJpbU9yKHRyaW1XcmFwcGVycyhjbGVhbnNlZCkpO1xufVxuIiwiZXhwb3J0IGNvbnN0IERPX05PVF9SRVBMQUNFID0gU3ltYm9sKCdETyBOT1QgUkVQTEFDRScpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkYXRhVHlwZSh7XG4gIGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybixcbiAgcGFyc2UsXG4gIHZhcmlhYmxlLFxuICBuYW1lLFxufSkge1xuICByZXR1cm4gKHNvdXJjZSkgPT4ge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzb3VyY2UubWF0Y2goZ2xvYmFsUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbbmFtZV06IFtdLFxuICAgICAgICBzb3VyY2VBZnRlcjogc291cmNlLFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5zdGFuY2VzID0gbWF0Y2hlcy5tYXAoKG1hdGNoKSA9PiBwYXJzZShtYXRjaC5tYXRjaChwYXJzZVBhdHRlcm4pKSk7XG4gICAgY29uc3Qgc291cmNlQWZ0ZXIgPSBtYXRjaGVzLnJlZHVjZSgobWVtbywgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5zdGFuY2VzW2luZGV4XSA9PT0gRE9fTk9UX1JFUExBQ0UpIHtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtby5yZXBsYWNlKG1hdGNoLCBgJCR7dmFyaWFibGV9XyR7aW5kZXh9YCk7XG4gICAgfSwgc291cmNlKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YToge1xuICAgICAgICBbbmFtZV06IGluc3RhbmNlcyxcbiAgICAgIH0sXG4gICAgICBzb3VyY2VBZnRlcixcbiAgICB9O1xuICB9O1xufVxuIiwiaW1wb3J0IGRhdGFUeXBlcyBmcm9tICcuLi9kYXRhLXR5cGVzL2luZGV4JztcblxuZnVuY3Rpb24gYnlEYXRhSGFuZGxlcih7IHNvdXJjZSwgY29udGV4dCB9LCBoYW5kbGVyKSB7XG4gIGNvbnN0IHsgZGF0YSwgc291cmNlQWZ0ZXIgfSA9IGhhbmRsZXIoc291cmNlKTtcbiAgcmV0dXJuIHtcbiAgICBjb250ZXh0OiBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LCBkYXRhKSxcbiAgICBzb3VyY2U6IHNvdXJjZUFmdGVyLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0RGF0YShzb3VyY2UpIHtcbiAgcmV0dXJuIGRhdGFUeXBlc1xuICAgIC5tYXAodHlwZSA9PiB0eXBlLmhhbmRsZXIpXG4gICAgLnJlZHVjZShieURhdGFIYW5kbGVyLCB7XG4gICAgICBjb250ZXh0OiB7fSxcbiAgICAgIHNvdXJjZSxcbiAgICB9KTtcbn1cbiIsImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL2dldFZhbHVlJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJztcblxuY29uc3Qga2V5VmFsdWVHbG9iYWxQYXR0ZXJuID0gL1xcfFxccyooWy0nXFx1MDQwMC1cXHUwNEZGXFx3XFxzXSspXFxzKj1cXHMqKFtefF0rKT8vZztcbmNvbnN0IGtleVZhbHVlUGF0dGVybiA9IC9cXHxcXHMqKFstJ1xcdTA0MDAtXFx1MDRGRlxcd1xcc10rKVxccyo9XFxzKihbXnxdKyk/LztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZFByb3BlcnR5TGlzdChzb3VyY2UpIHtcbiAgY29uc3Qga2V5VmFsdWVQYWlycyA9IHNvdXJjZS5tYXRjaChrZXlWYWx1ZUdsb2JhbFBhdHRlcm4pO1xuICBpZiAoIWtleVZhbHVlUGFpcnMpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGtleVZhbHVlUGFpcnNcbiAgICAubWFwKG1hdGNoID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGtleVZhbHVlUGF0dGVybi5leGVjKG1hdGNoKTtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgWywgcmF3S2V5LCByYXdWYWx1ZV0gPSByZXN1bHQ7XG4gICAgICBjb25zdCBrZXkgPSBjYW1lbENhc2UocmF3S2V5LnRyaW0oKSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXksXG4gICAgICAgIHZhbHVlOiBnZXRWYWx1ZShyYXdWYWx1ZSwga2V5KSxcbiAgICAgIH07XG4gICAgfSlcbiAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XG59XG4iLCJpbXBvcnQgZGF0YVR5cGVzIGZyb20gJy4uL2RhdGEtdHlwZXMvaW5kZXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gZmlsbFZhcmlhYmxlKHZhbHVlLCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9ID0ge30pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBXYXJuaW5nOiBTb21ldGhpbmcgd2VudCB3cm9uZy4gQ291bGQgbm90IGZpbGwgdmFyaWFibGVzIGluOiAoJHt0eXBlb2YgdmFsdWV9KSAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB2YWx1ZVxuICAgICAgKX1gXG4gICAgKTtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgZGF0YVR5cGUgPSBkYXRhVHlwZXMuZmluZCgodHlwZSkgPT4gdmFsdWUubWF0Y2godHlwZS5wYXR0ZXJuKSk7XG4gIGlmIChkYXRhVHlwZSkge1xuICAgIGNvbnN0IFttYXRjaGVkLCBpbmRleF0gPSBkYXRhVHlwZS5wYXR0ZXJuLmV4ZWModmFsdWUpO1xuICAgIGNvbnN0IGRhdGFWYWx1ZSA9IGNvbnRleHRbZGF0YVR5cGUubmFtZV1bcGFyc2VJbnQoaW5kZXgsIDEwKV07XG4gICAgaWYgKCFzaW1wbGlmeURhdGFWYWx1ZXMgJiYgdHlwZW9mIGRhdGFWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKG1hdGNoZWQsIGRhdGFWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vLyBSZWN1cnNpdmUgdmFyYWlibGUgZmlsbGluZy4uLiBldmVuIGhhbmRsZXMgYXJyYXlzIG9mIHZhbHVlc1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlsbFZhcmlhYmxlcyh2YWx1ZSwgY29udGV4dCwgb3B0aW9ucykge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKGl0ZW0pID0+IGZpbGxWYXJpYWJsZXMoaXRlbSwgY29udGV4dCwgb3B0aW9ucykpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obWVtbywge1xuICAgICAgICBba2V5XTogZmlsbFZhcmlhYmxlcyh2YWx1ZVtrZXldLCBjb250ZXh0LCBvcHRpb25zKSxcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgICAvLyByZXR1cm4gdmFsdWUubWFwKGl0ZW0gPT4gZmlsbFZhcmlhYmxlcyhpdGVtLCBjb250ZXh0LCBvcHRpb25zKSk7XG4gIH1cbiAgY29uc3QgZmlsbGVkID0gZmlsbFZhcmlhYmxlKHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgaWYgKGZpbGxlZCA9PT0gdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGZpbGxWYXJpYWJsZXMoZmlsbGVkLCBjb250ZXh0LCBvcHRpb25zKTtcbn1cbiIsImltcG9ydCBkYXRhVHlwZXMgZnJvbSAnLi4vZGF0YS10eXBlcy9pbmRleCc7XG5pbXBvcnQgZmluZFByb3BlcnR5TGlzdCBmcm9tICcuL3Byb3BlcnR5TGlzdCc7XG5pbXBvcnQgbnVtYmVyUGFyc2UgZnJvbSAnLi9udW1iZXJQYXJzZSc7XG5pbXBvcnQgZmlsbFZhcmlhYmxlcyBmcm9tICcuL2ZpbGxWYXJpYWJsZXMnO1xuXG5jb25zdCBzbWFsbERhdGFUeXBlID0gZGF0YVR5cGVzLmZpbmQoKHR5cGUpID0+IHR5cGUubmFtZSA9PT0gJ3NtYWxscycpO1xuXG5mdW5jdGlvbiBoYW5kbGVTbWFsbERhdGEodmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubWF0Y2goc21hbGxEYXRhVHlwZS5wYXR0ZXJuKSkge1xuICAgIGNvbnN0IHByaW1hcnkgPSB2YWx1ZVxuICAgICAgLnJlcGxhY2Uoc21hbGxEYXRhVHlwZS5wYXR0ZXJuLCAnJylcbiAgICAgIC8vIENsZWFuaW5nIHVwIGZyb20gaW5zZXJ0ZWQgY29tbWFzXG4gICAgICAucmVwbGFjZSgvLC8sICcnKVxuICAgICAgLnRyaW0oKTtcbiAgICBjb25zdCBbLCBpbmRleF0gPSBzbWFsbERhdGFUeXBlLnBhdHRlcm4uZXhlYyh2YWx1ZSk7XG4gICAgY29uc3Qgc2Vjb25kYXJ5ID0gY29udGV4dFtzbWFsbERhdGFUeXBlLm5hbWVdW3BhcnNlSW50KGluZGV4LCAxMCldO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHByaW1hcnk6IGdldFZhcmlhYmxlVmFsdWUocHJpbWFyeSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSksXG4gICAgICBzZWNvbmRhcnk6IGdldFZhcmlhYmxlVmFsdWUoc2Vjb25kYXJ5LCBjb250ZXh0LCB7IHNpbXBsaWZ5RGF0YVZhbHVlcyB9KSxcbiAgICB9O1xuICAgIHJldHVybiBzaW1wbGlmeURhdGFWYWx1ZXMgPyByZXN1bHQucHJpbWFyeSA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZSh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSA9IHt9KSB7XG4gIC8vIEhhbmRsaW5nIHNtYWxsIGRhdGEgZGlmZmVyZW50bHkuLi4gSSBkb250IGxpa2UgdGhpcy4uLlxuICBjb25zdCBzbWFsbERhdGEgPSBoYW5kbGVTbWFsbERhdGEodmFsdWUsIGNvbnRleHQsIHsgc2ltcGxpZnlEYXRhVmFsdWVzIH0pO1xuICBpZiAoc21hbGxEYXRhKSB7XG4gICAgcmV0dXJuIHNtYWxsRGF0YTtcbiAgfVxuICByZXR1cm4gZmlsbFZhcmlhYmxlcyh2YWx1ZSwgY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVZhcmlhYmxlKGtleSwgdmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIC8vIEZpcnN0IGFycmF5IHBhc3MuLi5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcCgoaXRlbSkgPT4gZ2V0VmFyaWFibGVWYWx1ZShpdGVtLCBjb250ZXh0LCBvcHRpb25zKSk7XG4gIH1cbiAgaWYgKGtleS5tYXRjaCgvYXJlYVRvdGFsLykgfHwga2V5Lm1hdGNoKC9wb3B1bGF0aW9uLykpIHtcbiAgICBsZXQgZmxvYXQgPSBudW1iZXJQYXJzZSh2YWx1ZSk7XG4gICAgaWYgKGZsb2F0ID09PSBmYWxzZSkgZmxvYXQgPSBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG4gICAgaWYgKCFpc05hTihmbG9hdCkpIHtcbiAgICAgIHJldHVybiBmbG9hdDtcbiAgICB9XG4gIH1cbiAgaWYgKGtleS5tYXRjaCgvZGF0ZS9pKSkge1xuICAgIGNvbnN0IGRhdGVWYWx1ZSA9ICtuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFpc05hTihkYXRlVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUpO1xuICAgIH1cbiAgfVxuICBjb25zdCB2YXJpYWJsZVZhbHVlID0gZ2V0VmFyaWFibGVWYWx1ZSh2YWx1ZSwgY29udGV4dCwgb3B0aW9ucyk7XG5cbiAgLy8gU2Vjb25kIGFycmF5IHBhc3MuIElmIGZpcnN0IHZhcmlhYmxlIHdhcyBhbiBhcnJheSBvZiB2YXJpYWJsZXMuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhcmlhYmxlVmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhcmlhYmxlVmFsdWUubWFwKChpdGVtKSA9PlxuICAgICAgZ2V0VmFyaWFibGVWYWx1ZShpdGVtLCBjb250ZXh0LCBvcHRpb25zKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHZhcmlhYmxlVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJ5VmFyaWFibGVSZWR1Y3Rpb24oY29udGV4dCwgb3B0aW9ucykge1xuICByZXR1cm4gKG1lbW8sIHsga2V5LCB2YWx1ZSB9KSA9PiB7XG4gICAgY29uc3QgcmVkdWNlZCA9IHJlZHVjZVZhcmlhYmxlKGtleSwgdmFsdWUsIGNvbnRleHQsIG9wdGlvbnMpO1xuICAgIGlmIChyZWR1Y2VkID09PSAnJyB8fCByZWR1Y2VkID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG1lbW8sIHtcbiAgICAgIFtrZXldOiByZWR1Y2VkLFxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0UHJvcGVydGllcyhcbiAgeyBzb3VyY2UsIGNvbnRleHQgfSxcbiAgeyBzaW1wbGlmeURhdGFWYWx1ZXMgPSB0cnVlIH0gPSB7fVxuKSB7XG4gIHJldHVybiBmaW5kUHJvcGVydHlMaXN0KHNvdXJjZSkucmVkdWNlKFxuICAgIGJ5VmFyaWFibGVSZWR1Y3Rpb24oY29udGV4dCwgeyBzaW1wbGlmeURhdGFWYWx1ZXMgfSksXG4gICAge31cbiAgKTtcbn1cbiIsIi8vIGltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL2dldFZhbHVlJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnY2FtZWxjYXNlJztcblxuY29uc3QgYmxhbmtOYW1lUGF0dGVybiA9IC9ibGFuayhcXGQrKT9OYW1lU2VjMi87XG5jb25zdCBibGFua0luZm9QYXR0ZXJuID0gL2JsYW5rKFxcZCspP0luZm9TZWMyLztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKVxuICAgIC5yZWR1Y2UoKHRyYW5zZm9ybWVkLCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJvcGVydGllc1trZXldO1xuICAgICAgY29uc3QgbWF0Y2ggPSBrZXkubWF0Y2goYmxhbmtOYW1lUGF0dGVybik7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3QgaWQgPSBtYXRjaFsxXSB8fCAnJztcbiAgICAgICAgY29uc3QgYmxhbmtOYW1lID0gcHJvcGVydGllc1tgYmxhbmske2lkfU5hbWVTZWMyYF07XG4gICAgICAgIGNvbnN0IGJsYW5rSW5mbyA9IHByb3BlcnRpZXNbYGJsYW5rJHtpZH1JbmZvU2VjMmBdO1xuICAgICAgICBpZiAodHlwZW9mIGJsYW5rTmFtZSAhPT0gJ3N0cmluZycpIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odHJhbnNmb3JtZWQsIHtcbiAgICAgICAgICBbY2FtZWxDYXNlKGJsYW5rTmFtZSldOiBibGFua0luZm8sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGtleS5tYXRjaChibGFua0luZm9QYXR0ZXJuKSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0cmFuc2Zvcm1lZCwge1xuICAgICAgICBba2V5XTogdmFsdWUsXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG59XG4iLCJmdW5jdGlvbiBmaW5kT3V0ZXJJbmRleChzb3VyY2UpIHtcblx0bGV0IGxhc3RPcGVuID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGNvbnN0IG5leHRUd28gPSBzb3VyY2Uuc3Vic3RyKGksIDIpO1xuICAgIGlmIChuZXh0VHdvID09PSAne3snKSB7XG5cdFx0XHRsYXN0T3Blbi5wdXNoKGkpO1xuXHRcdFx0Ly8gTW92ZSBmb3J3YXJkLCBzbyB3ZSBkbyBub3QgY291bnQgY2xvc3VyZXMgcmlnaHQgbmV4dCB0byBlYWNoIG90aGVyXG5cdFx0XHRpKys7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG4gICAgaWYgKG5leHRUd28gPT09ICd9fScpIHtcblx0XHRcdGNvbnN0IG9wZW5BdCA9IGxhc3RPcGVuLnBvcCgpO1xuXHRcdFx0aWYgKGxhc3RPcGVuLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHQvLyBBZGRpbmcgMiBoZXJlIGZvciB0aGUgY2xvc3VyZVxuXHRcdFx0XHRyZXR1cm4gaSArIDI7XG5cdFx0XHR9XG5cdFx0XHQvLyBNb3ZlIGZvcndhcmQsIHNvIHdlIGRvIG5vdCBjb3VudCBjbG9zdXJlcyByaWdodCBuZXh0IHRvIGVhY2ggb3RoZXJcblx0XHRcdGkrKztcblx0XHR9ICAgIFxuICB9XG59XG5cbmNvbnN0IGluZm9Cb3hTdGFydFBhdHRlcm4gPSAve3tcXHcqYm94LztcblxuZnVuY3Rpb24gcGFyc2Uoc291cmNlKSB7XG5cdGNvbnN0IHN0YXJ0TWF0Y2ggPSBzb3VyY2UubWF0Y2goaW5mb0JveFN0YXJ0UGF0dGVybik7XG5cdGlmICghc3RhcnRNYXRjaCkge1xuXHRcdC8vIE1heSBub3QgaGF2ZSBhIGEgcHJvcGVyIGluZm9ib3ggd3JhcHBlciwgbGV0J3MgdXNlIHRoZSBlbnRpcmUgc291cmNlXG5cdFx0Ly8gYnkgZGVmYXVsdFxuXHRcdHJldHVybiB7IGRhdGE6IHNvdXJjZSwgc291cmNlTGVmdDogbnVsbCB9O1xuXHR9XG5cdGNvbnN0IHN0YXJ0SW5kZXggPSBzdGFydE1hdGNoLmluZGV4O1xuXHRjb25zdCB3aXRoU3RhcnQgPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0SW5kZXgpO1xuXHRjb25zdCBvdXRlckluZGV4ID0gZmluZE91dGVySW5kZXgod2l0aFN0YXJ0KTtcblx0aWYgKCFvdXRlckluZGV4KSB7XG5cdFx0cmV0dXJuIHsgZGF0YTogc291cmNlLCBzb3VyY2VMZWZ0OiBudWxsIH07XG5cdH1cblx0Y29uc3QgZGF0YSA9IHdpdGhTdGFydC5zdWJzdHJpbmcoMCwgb3V0ZXJJbmRleCk7XG5cdGNvbnN0IHNvdXJjZUxlZnQgPSBzb3VyY2Uuc3Vic3RyaW5nKG91dGVySW5kZXgpO1xuXHRjb25zdCBzb3VyY2VMZWZ0SGFzTWF0Y2ggPSAhIXNvdXJjZUxlZnQubWF0Y2goaW5mb0JveFN0YXJ0UGF0dGVybik7XG5cdHJldHVybiB7XG5cdFx0ZGF0YSxcblx0XHRzb3VyY2VMZWZ0OiBzb3VyY2VMZWZ0SGFzTWF0Y2ggPyBzb3VyY2VMZWZ0IDogbnVsbFxuXHR9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0SW5mb2JveGVzKHNvdXJjZSkge1xuICBsZXQgcGFyc2VkID0gcGFyc2Uoc291cmNlKTtcbiAgY29uc3QgaW5mb2JveGVzID0gW3BhcnNlZC5kYXRhXTtcbiAgd2hpbGUocGFyc2VkLnNvdXJjZUxlZnQpIHtcbiAgXHRwYXJzZWQgPSBwYXJzZShwYXJzZWQuc291cmNlTGVmdCk7XG4gIFx0aW5mb2JveGVzLnB1c2gocGFyc2VkLmRhdGEpO1xuICB9XG4gIHJldHVybiBpbmZvYm94ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGVhblNvdXJjZShcbiAgc291cmNlLFxuICB7IHJlbW92ZVNtYWxsID0gZmFsc2UsIHJlbW92ZVJlZmVyZW5jZXMgPSB0cnVlIH0gPSB7fVxuKSB7XG4gIGlmIChyZW1vdmVSZWZlcmVuY2VzKSB7XG4gICAgc291cmNlID0gc291cmNlXG4gICAgICAucmVwbGFjZSgvPHJlZihcXHNcXHcrPVtePl0rKT8+Lio8XFwvcmVmPi9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC88cmVmKFxcc1xcdys9W14+XSspP1xccz9cXC8+L2csICcnKTtcbiAgfVxuXG4gIGlmIChyZW1vdmVTbWFsbCkge1xuICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKC88c21hbGw+Lio8XFwvc21hbGw+L2csICcnKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgc291cmNlXG4gICAgICAvLyBSZW1vdmUgdGlja3NcbiAgICAgIC5yZXBsYWNlKC8nJyc/L2csICcnKVxuICAgICAgLnJlcGxhY2UoL1xcfGRpc3BsYXk9aW5saW5lL2csICcnKVxuICAgICAgLy8gVGhpcyBpcyBhIGxpdHRsZSBpZmZ5XG4gICAgICAucmVwbGFjZSgvPGJyXFxzP1xcLz8+L2csICcsJylcbiAgICAgIC5yZXBsYWNlKC8mbWludXM7L2csICctJylcbiAgICAgIC5yZXBsYWNlKC97e1NuZGFzaH19L2csICfigJMnKVxuICAgICAgLnJlcGxhY2UoLzxzdXA+L2csICdeJylcbiAgICAgIC8vIFJlbW92ZSBzaG9ydGVuZWQgZm9vdG5vdGUgdGVtcGxhdGVzXG4gICAgICAucmVwbGFjZSgvXFx7XFx7c2ZuXFx8KFteXFx9XFx9XSspXFx9XFx9L2csICcnKVxuICAgICAgLy8gUmVtb3ZlIGV4cGxhbmF0b3J5IGZvb3Rub3Rlc1xuICAgICAgLnJlcGxhY2UoL1xce1xce2VmblxcfChbXlxcfVxcfV0rKVxcfVxcfS9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC/iiJIvZywgJy0nKVxuICAgICAgLnJlcGxhY2UoLzxcXC9zdXA+L2csICcnKVxuICAgICAgLy8gUmVwbGFjZSB3cmFwIHRlbXBsYXRlcyB3aXRoIGl0cyBjb250ZW50XG4gICAgICAucmVwbGFjZSgvXFx7XFx7XFxzKm5vd3JhcFxccypcXHwoW15cXG5cXH1dKylcXH1cXH0vZ2ksICckMScpXG4gICAgICAucmVwbGFjZSgvXFx7XFx7XFxzKkF2b2lkXFxzd3JhcFxccypcXHwoW15cXG5cXH1dKylcXH1cXH0vZ2ksICckMScpXG4gICAgICAvLyBIVE1MIGNvbW1lbnRzXG4gICAgICAucmVwbGFjZSgvPCEtLShbXFxzXFxTXSo/KS0tPi9nLCAnJylcbiAgICAgIC5yZXBsYWNlKC8mbmJzcDsvZywgJyAnKVxuICAgICAgLnJlcGxhY2UoXCJ8JydTZWUgbGlzdCcnXCIsICcnKVxuICApO1xufVxuIiwiaW1wb3J0IGNhbWVsY2FzZSBmcm9tICdjYW1lbGNhc2UnO1xuaW1wb3J0IGV4dHJhY3REYXRhIGZyb20gJy4vZXh0cmFjdERhdGEnO1xuaW1wb3J0IGNsZWFuU291cmNlIGZyb20gJy4vY2xlYW5Tb3VyY2UnO1xuaW1wb3J0IGZpbGxWYXJpYWJsZXMsIHsgZmlsbFZhcmlhYmxlIH0gZnJvbSAnLi9maWxsVmFyaWFibGVzJztcblxuY29uc3QgdGFibGVTdGFydFBhdHRlcm4gPSAve1xcfCguKilcXG4/LztcbmNvbnN0IHRhYmxlRW5kUGF0dGVybiA9IC9cXG5cXHx9LztcbmNvbnN0IGhlYWRlcnNQYXR0ZXJuID0gLyFcXHM/KC4qKS9nO1xuY29uc3Qgcm93UGF0dGVybiA9IC9cXHwtLztcbmNvbnN0IGNlbGxTZXBhcmF0b3JQYXR0ZXJuID0gLyg/OlxcblxcfCl8KD86XFx8XFx8KS87XG5jb25zdCBsaW5rUGF0dGVybiA9IC9cXFtcXFsoW15cXF1dKylcXF1cXF0vZztcbmNvbnN0IGxpbmtOYW1lUGF0dGVybiA9IC9eLipcXHwvO1xuY29uc3QgaW5saW5lSGVhZGVyUGF0dGVybiA9ICchISc7XG5jb25zdCBhY3Rpb25QYXR0ZXJuID0gL3t7YW5jaG9yXFx8KC4qKX19L2c7XG5jb25zdCByb3dTcGFuQ291bnRQYXR0ZXJuID0gL3Jvd3NwYW49XCIoXFxkKylcIi87XG5cbmNvbnN0IHN0cmlwTGlua3MgPSAoc291cmNlKSA9PlxuICBzb3VyY2UucmVwbGFjZShsaW5rUGF0dGVybiwgKG0sIGNhcHR1cmUpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBjYXB0dXJlLnJlcGxhY2UobGlua05hbWVQYXR0ZXJuLCAnJykudHJpbSgpO1xuICAgIHJldHVybiByZXN1bHQgfHwgY2FwdHVyZTtcbiAgfSk7XG5jb25zdCByZW1vdmVBY3Rpb25zID0gKHNvdXJjZSkgPT4gc291cmNlLnJlcGxhY2UoYWN0aW9uUGF0dGVybiwgJycpO1xuY29uc3QgdHJhbnNmb3JtQ2VsbCA9IChzb3VyY2UpID0+XG4gIHN0cmlwTGlua3MocmVtb3ZlQWN0aW9ucyhzb3VyY2UgfHwgJycpKVxuICAgIC5yZXBsYWNlKHJvd1NwYW5Db3VudFBhdHRlcm4sICcnKVxuICAgIC5yZXBsYWNlKGxpbmtOYW1lUGF0dGVybiwgJycpXG4gICAgLnRyaW0oKTtcblxuY29uc3QgdHJhbnNmb3JtQ2VsbHMgPSAocm93KSA9PlxuICByb3cuc3BsaXQoY2VsbFNlcGFyYXRvclBhdHRlcm4pLm1hcCh0cmFuc2Zvcm1DZWxsKTtcblxuY29uc3QgZmluZEluZGV4ID0gKHQsIHApID0+IHtcbiAgY29uc3QgbSA9IHQubWF0Y2gocCk7XG4gIHJldHVybiBtID8gbS5pbmRleCA6IC0xO1xufTtcblxuY29uc3QgZmluZFRhYmxlU3RhcnQgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IG0gPSBzb3VyY2UubWF0Y2godGFibGVTdGFydFBhdHRlcm4pO1xuICByZXR1cm4gbSA/IG0uaW5kZXggKyBtWzBdLmxlbmd0aCA6IC0xO1xufTtcbmNvbnN0IGZpbmRUYWJsZUVuZCA9IChzb3VyY2UpID0+IGZpbmRJbmRleChzb3VyY2UsIHRhYmxlRW5kUGF0dGVybik7XG5cbmNvbnN0IGdldEhlYWRlcnMgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgbGV0IG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gaGVhZGVyc1BhdHRlcm4uZXhlYyhzb3VyY2UpKSkge1xuICAgIGhlYWRlcnMucHVzaCguLi5tYXRjaFsxXS5zcGxpdChpbmxpbmVIZWFkZXJQYXR0ZXJuKS5tYXAodHJhbnNmb3JtQ2VsbCkpO1xuICB9XG4gIHJldHVybiBoZWFkZXJzO1xufTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm93U3Bhbihyb3dzKSB7XG4gIHJldHVybiByb3dzXG4gICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAucmVkdWNlKChtZXJnZWQsIGNlbGxzLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgayA9IGluZGV4ID09PSAwID8gMCA6IDE7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNlbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghbWVyZ2VkW2kgKyBrXSkgbWVyZ2VkW2kgKyBrXSA9IHt9O1xuICAgICAgICBpZiAoY2VsbHNbaV0pIHtcbiAgICAgICAgICBtZXJnZWRbaSArIGtdW2NlbGxzW2ldXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfSwgW10pXG4gICAgLm1hcCgobykgPT4gT2JqZWN0LmtleXMobykuam9pbignLCcpKVxuICAgIC5qb2luKCcgfHwgJyk7XG59XG5cbmNvbnN0IGdldFJvd3MgPSAoc291cmNlKSA9PiB7XG4gIGNvbnN0IHJhdyA9IHNvdXJjZVxuICAgIC5zcGxpdChyb3dQYXR0ZXJuKVxuICAgIC5tYXAoKGUpID0+IGUucmVwbGFjZSgvXi4qXFxuKz9cXHwvLCAnJykudHJpbSgpKVxuICAgIC5maWx0ZXIoKGUpID0+IGUpO1xuXG4gIGNvbnN0IHJvd3MgPSBbXTtcbiAgbGV0IHNwYW5OID0gMDtcbiAgbGV0IHNwYW5Db3VudCA9IDA7XG4gIGxldCByb3dzSW5TcGFuID0gW107XG5cbiAgZm9yIChjb25zdCByb3cgb2YgcmF3KSB7XG4gICAgY29uc3QgbWF0Y2ggPSByb3cubWF0Y2gocm93U3BhbkNvdW50UGF0dGVybik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBzcGFuTiA9IDA7XG4gICAgICBzcGFuQ291bnQgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICByb3dzSW5TcGFuID0gW107XG4gICAgfVxuICAgIGlmIChzcGFuTiA8IHNwYW5Db3VudCkge1xuICAgICAgcm93c0luU3Bhbi5wdXNoKHJvdyk7XG4gICAgICBpZiAoKytzcGFuTiA9PT0gc3BhbkNvdW50KSB7XG4gICAgICAgIHJvd3MucHVzaCh0cmFuc2Zvcm1Sb3dTcGFuKHJvd3NJblNwYW4pKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcm93cy5wdXNoKHJvdyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJvd3M7XG59O1xuXG5jb25zdCBnZXROZXh0VGFibGUgPSAoc291cmNlLCBjb250ZXh0LCBvcHRpb25zKSA9PiB7XG4gIGxldCBsZWZ0ID0gc291cmNlO1xuICBjb25zdCBzdGFydCA9IGZpbmRUYWJsZVN0YXJ0KGxlZnQpO1xuXG4gIGlmIChzdGFydCA9PT0gLTEpIHJldHVybiBudWxsO1xuICBsZWZ0ID0gbGVmdC5zdWJzdHJpbmcoc3RhcnQpO1xuXG4gIGNvbnN0IGVuZCA9IGZpbmRUYWJsZUVuZChsZWZ0KTtcblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIG51bGw7XG4gIGxlZnQgPSBsZWZ0LnN1YnN0cmluZygwLCBlbmQpO1xuXG4gIGNvbnN0IHJvd3MgPSBnZXRSb3dzKGxlZnQpO1xuXG4gIGlmICghcm93cy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKHJvd3NbMF0pO1xuXG4gIGlmICghaGVhZGVycy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGRhdGEgPSByb3dzXG4gICAgLnNsaWNlKDEpXG4gICAgLm1hcCh0cmFuc2Zvcm1DZWxscylcbiAgICAubWFwKChyb3cpID0+IHtcbiAgICAgIHJldHVybiBoZWFkZXJzLnJlZHVjZSgob2JqLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG9ialtjYW1lbGNhc2UoZmlsbFZhcmlhYmxlKGtleSwgY29udGV4dCwgb3B0aW9ucykpXSA9IGZpbGxWYXJpYWJsZXMoXG4gICAgICAgICAgcm93W2luZGV4XSxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgIH0sIHt9KTtcbiAgICB9KTtcblxuICByZXR1cm4geyBkYXRhLCBlbmQ6IHN0YXJ0ICsgZW5kIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNsZWFuZWRTb3VyY2UgPSBjbGVhblNvdXJjZShzb3VyY2UsIG9wdGlvbnMpO1xuICBjb25zdCBkYXRhID0gZXh0cmFjdERhdGEoY2xlYW5lZFNvdXJjZSk7XG4gIGNvbnN0IHRhYmxlcyA9IFtdO1xuICBsZXQgbGVmdCA9IGRhdGEuc291cmNlO1xuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgd2hpbGUgKChyZXN1bHQgPSBnZXROZXh0VGFibGUobGVmdCwgZGF0YS5jb250ZXh0LCBvcHRpb25zKSkpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRhYmxlcztcbiAgICB9XG4gICAgdGFibGVzLnB1c2gocmVzdWx0LmRhdGEpO1xuICAgIGxlZnQgPSBsZWZ0LnN1YnN0cmluZyhyZXN1bHQuZW5kKTtcbiAgfVxuICByZXR1cm4gdGFibGVzO1xufVxuIiwiY29uc3QgbGlua1BhdHRlcm4gPSAvXFxbXFxbKFteXFxdXSspXFxdXFxdL2c7XG5jb25zdCBrbVBhdHRlcm4gPSAve3tCU2ttXFx8KFtcXGR4XSssW1xcZHhdKylcXHwoW1xcZHhdKyxbXFxkeF0rKX19L2c7XG5cbmZ1bmN0aW9uIGNsZWFuKHRleHQpIHtcbiAgcmV0dXJuIHRleHRcbiAgICAuc3Vic3RyaW5nKDIsIHRleHQubGVuZ3RoIC0gMilcbiAgICAucmVwbGFjZShsaW5rUGF0dGVybiwgKG0sIHgpID0+IHguc3BsaXQoJ3wnKVswXSlcbiAgICAucmVwbGFjZSgvJycnPy9nLCAnJyk7XG59XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2lraXBlZGlhOlJvdXRlX2RpYWdyYW1fdGVtcGxhdGUje3tCUy1tYXB9fV9yb3dzX3dpdGhfaWNvbnNfYW5kX3RleHRcbmZ1bmN0aW9uIHBhcnNlUm93KHJhdykge1xuICBsZXQgY291bnRNYXRjaCA9IHJhd1swXS5tYXRjaCgvQlMoXFxkKS8pO1xuICBsZXQgdHlwZSA9IHJhd1swXS5zdWJzdHJpbmcoMik7XG4gIGxldCBjb3VudCA9IDE7XG4gIGxldCBpY29ucyA9IFtdO1xuICBsZXQgaW5kZXggPSAxO1xuICBpZiAoY291bnRNYXRjaCkge1xuICAgIGNvdW50ID0gY291bnRNYXRjaFsxXTtcbiAgICB0eXBlID0gcmF3WzBdLnN1YnN0cmluZygzKTtcbiAgfVxuICBmb3IgKDsgaW5kZXggPD0gY291bnQ7IGluZGV4KyspIHtcbiAgICBpY29ucy5wdXNoKHJhd1tpbmRleF0pO1xuICB9XG4gIGNvbnN0IG1hcmdpbiA9IHJhd1tpbmRleCsrXTtcbiAgY29uc3QgdGV4dDEgPSByYXdbaW5kZXgrK107XG4gIGNvbnN0IHRleHQyID0gcmF3W2luZGV4KytdO1xuICBjb25zdCBjb21tZW50ID0gcmF3W2luZGV4KytdO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgbWFyZ2luLFxuICAgIHRleHQxLFxuICAgIHRleHQyLFxuICAgIGNvbW1lbnQsXG4gICAgaWNvbnMsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgY29uc3QgcmVzdWx0cyA9IHNvdXJjZS5yZXBsYWNlKGttUGF0dGVybiwgJyQxLyQyJykubWF0Y2goL3t7QlMoW159fV0rKX19L2cpO1xuICBpZiAocmVzdWx0cykge1xuICAgIHJldHVybiByZXN1bHRzXG4gICAgICAubWFwKChyZXN1bHQpID0+IGNsZWFuKHJlc3VsdCkuc3BsaXQoJ3wnKSlcbiAgICAgIC5tYXAocGFyc2VSb3cpXG4gICAgICAuZmlsdGVyKCh7IHR5cGUgfSkgPT4gdHlwZVswXSAhPT0gJy0nKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbiIsImNvbnN0IGhlYWRpbmdQYXR0ZXJuID0gL1tePV09PVxccz8oW1xcd1xcc10rKVxccz89PS9nXG5jb25zdCBzdWJoZWFkaW5nUGF0dGVybiA9IC89PT0oW1xcd1xcc10rKT09PS9nXG5jb25zdCB0YWJsZVN0YXJ0UGF0dGVybiA9IC97e2xpc3QuK3N0YXJ0Lip9fS9naVxuY29uc3QgdGFibGVFbmRQYXR0ZXJuID0gL3t7bGlzdC4rZW5kLip9fS9naVxuY29uc3Qgcm93UGF0dGVybiA9IC97eyguKil9fS9nXG5jb25zdCByb3dQYXR0ZXJuU2luZ2xlID0gL3t7KC4qKX19L1xuXG5mdW5jdGlvbiBnZXRIZWFkaW5ncyh0ZXh0KSB7XG5cdGxldCBtYXRjaDtcblx0Y29uc3QgaGVhZGluZ3MgPSBbXTtcblx0d2hpbGUgKChtYXRjaCA9IGhlYWRpbmdQYXR0ZXJuLmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG5cdFx0aGVhZGluZ3MucHVzaCh7XG5cdFx0XHRoZWFkaW5nOiBtYXRjaFsxXS50cmltKCksXG5cdFx0XHRzdGFydDogbWF0Y2guaW5kZXgsXG5cdFx0XHRlbmQ6IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG5cdFx0fSlcblx0fVxuXHRyZXR1cm4gaGVhZGluZ3M7XG59XG5cbmZ1bmN0aW9uIGdldFN1YmhlYWRpbmdzKHRleHQpIHtcblx0bGV0IG1hdGNoO1xuXHRjb25zdCBzdWJoZWFkaW5ncyA9IFtdO1xuXHR3aGlsZSAoKG1hdGNoID0gc3ViaGVhZGluZ1BhdHRlcm4uZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcblx0XHRzdWJoZWFkaW5ncy5wdXNoKHtcblx0XHRcdGhlYWRpbmc6IG1hdGNoWzFdLnRyaW0oKSxcblx0XHRcdHN0YXJ0OiBtYXRjaC5pbmRleCxcblx0XHRcdGVuZDogbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGhcblx0XHR9KVxuXHR9XG5cdHJldHVybiBzdWJoZWFkaW5ncztcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hlcyh0ZXh0LCBwYXR0ZXJuKSB7XG5cdGxldCBtYXRjaDtcblx0Y29uc3QgbWF0Y2hlcyA9IFtdO1xuXHR3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuXHRcdG1hdGNoZXMucHVzaCh7XG5cdFx0XHR2YWx1ZTogbWF0Y2hbMV0gJiYgbWF0Y2hbMV0udHJpbSgpLFxuXHRcdFx0c3RhcnQ6IG1hdGNoLmluZGV4LFxuXHRcdFx0ZW5kOiBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aFxuXHRcdH0pXG5cdH1cblx0cmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGFibGVEYXRhKHJhdykge1xuXHRjb25zdCBtYXRjaGVzID0gcmF3Lm1hdGNoKHJvd1BhdHRlcm4pO1xuXHRpZiAoIW1hdGNoZXMpIHJldHVybiBbXTtcblx0cmV0dXJuIG1hdGNoZXMubWFwKGVsID0+IHtcblx0XHRjb25zdCBbLHRleHRdID0gZWwubWF0Y2gocm93UGF0dGVyblNpbmdsZSk7XG5cdFx0Y29uc3QgY29sdW1ucyA9IHRleHQudHJpbSgpLnNwbGl0KCd8Jyk7XG5cdFx0cmV0dXJuIGNvbHVtbnMuc2xpY2UoMSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUYWJsZXModGV4dCkge1xuXHRjb25zdCB0YWJsZVN0YXJ0cyA9IGdldE1hdGNoZXModGV4dCwgdGFibGVTdGFydFBhdHRlcm4pO1xuXHRjb25zdCB0YWJsZUVuZHMgPSBnZXRNYXRjaGVzKHRleHQsIHRhYmxlRW5kUGF0dGVybik7XG5cdHJldHVybiB0YWJsZVN0YXJ0cy5tYXAoKHRhYmxlU3RhcnQsIGluZGV4KSA9PiB7XG5cdFx0Y29uc3QgdGFibGVFbmQgPSB0YWJsZUVuZHNbaW5kZXhdO1xuXHRcdGlmICghdGFibGVFbmQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignW1RhYmxlIFBhcnNpbmddIEZhaWxlZCB0byBwYWlyIHRhYmxlJyk7XG5cdFx0fVxuXHRcdGNvbnN0IHJhdyA9IHRleHRcblx0XHRcdFx0LnN1YnN0cmluZyh0YWJsZVN0YXJ0LmVuZCwgdGFibGVFbmQuc3RhcnQpXG5cdFx0XHRcdC50cmltKClcblx0XHRcdFx0LnJlcGxhY2UoLycnJy9nLCAnJyk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHJvd3M6IHBhcnNlVGFibGVEYXRhKHJhdyksXG5cdFx0XHRzdGFydDogdGFibGVTdGFydC5zdGFydCxcblx0XHRcdGVuZDogdGFibGVFbmQuZW5kXG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbGFzdChsaXN0KSB7XG5cdHJldHVybiBsaXN0Lmxlbmd0aCA/IGxpc3RbbGlzdC5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRjb25zdCBoZWFkaW5ncyA9IGdldE1hdGNoZXMoc291cmNlLCBoZWFkaW5nUGF0dGVybik7XG5cdGNvbnN0IHN1YmhlYWRpbmdzID0gZ2V0TWF0Y2hlcyhzb3VyY2UsIHN1YmhlYWRpbmdQYXR0ZXJuKTtcblx0Y29uc3QgdGFibGVzID0gZ2V0VGFibGVzKHNvdXJjZSk7XG5cblx0dGFibGVzLmZvckVhY2godGFibGUgPT4ge1xuXHRcdGNvbnN0IGhlYWRpbmdzQmVmb3JlID0gaGVhZGluZ3MuZmlsdGVyKGhlYWRpbmcgPT4ge1xuXHRcdFx0cmV0dXJuIGhlYWRpbmcuZW5kIDwgdGFibGUuc3RhcnQ7XG5cdFx0fSkubWFwKGUgPT4gZS52YWx1ZSlcblx0XHR0YWJsZS5oZWFkaW5nID0gbGFzdChoZWFkaW5nc0JlZm9yZSk7XG5cdFx0Y29uc3Qgc3ViaGVhZGluZ3NCZWZvcmUgPSBzdWJoZWFkaW5ncy5maWx0ZXIoc3ViaGVhZGluZyA9PiB7XG5cdFx0XHRyZXR1cm4gc3ViaGVhZGluZy5lbmQgPCB0YWJsZS5zdGFydDtcblx0XHR9KS5tYXAoZSA9PiBlLnZhbHVlKVxuXHRcdHRhYmxlLnN1YmhlYWRpbmcgPSBsYXN0KHN1YmhlYWRpbmdzQmVmb3JlKTtcblx0XHRkZWxldGUgdGFibGUuc3RhcnQ7XG5cdFx0ZGVsZXRlIHRhYmxlLmVuZDtcblx0fSk7XG5cblx0cmV0dXJuIHRhYmxlcztcbn0iLCJpbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2NhbWVsY2FzZSc7XG5pbXBvcnQgZXh0cmFjdERhdGEgZnJvbSAnLi91dGlsL2V4dHJhY3REYXRhJztcbmltcG9ydCBleHRyYWN0UHJvcGVydGllcyBmcm9tICcuL3V0aWwvZXh0cmFjdFByb3BlcnRpZXMnO1xuaW1wb3J0IHRyYW5zZm9ybVByb3BlcnRpZXMgZnJvbSAnLi91dGlsL3RyYW5zZm9ybVByb3BlcnRpZXMnO1xuaW1wb3J0IGV4dHJhY3RJbmZvYm94ZXMgZnJvbSAnLi91dGlsL2V4dHJhY3RJbmZvYm94ZXMnO1xuaW1wb3J0IGNsZWFuU291cmNlIGZyb20gJy4vdXRpbC9jbGVhblNvdXJjZSc7XG5pbXBvcnQgcGFyc2VUYWJsZXMgZnJvbSAnLi91dGlsL3BhcnNlVGFibGVzJztcbmltcG9ydCBwYXJzZUJzVGFibGVzIGZyb20gJy4vdXRpbC9wYXJzZUJzVGFibGVzJztcbmltcG9ydCBwYXJzZUxpc3RzIGZyb20gJy4vdXRpbC9wYXJzZUxpc3RzJztcblxuLyoqXG4gKiBQYXJzZSBXaWtpIEluZm9ib3ggVGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSAtIEluZm9ib3ggc291cmNlIHRleHRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUGFyc2luZyBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNpbXBsaWZ5RGF0YVZhbHVlcz10cnVlXSAtIE9ubHkgdXNlIHByaW1hcnkgZGF0YSB2YWx1ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVtb3ZlU21hbGw9ZmFsc2VdIC0gUmVtb3ZlIDxzbWFsbD4uLi48L3NtYWxsPiBjaHVua3Mgb2Ygc291cmNlIGRhdGFcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVtb3ZlUmVmZXJlbmNlcz10cnVlXSAtIFJlbW92ZSA8cmVmPi4uLjwvcmVmPiBjaHVua3Mgb2Ygc291cmNlIGRhdGFcbiAqIEByZXR1cm5zIHtPYmplY3R9IFN0cnVjdHVyZWQgaW5mb3JtYXRpb24gZnJvbSBzb3VyY2UgdGV4dFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUluZm9ib3goc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluZm9ib3hlcyA9IGV4dHJhY3RJbmZvYm94ZXMoc291cmNlKS5tYXAoKGluZm9ib3gpID0+IHtcbiAgICBjb25zdCBjbGVhbmVkU291cmNlID0gY2xlYW5Tb3VyY2UoaW5mb2JveCwgb3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YSA9IGV4dHJhY3REYXRhKGNsZWFuZWRTb3VyY2UpO1xuICAgIGNvbnN0IHByb3BzID0gZXh0cmFjdFByb3BlcnRpZXMoZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRyYW5zZm9ybVByb3BlcnRpZXMocHJvcHMpO1xuICB9KTtcblxuICBpZiAoIWluZm9ib3hlcy5sZW5ndGgpIHJldHVybiB7fTtcblxuICBjb25zdCByZXMgPSB7XG4gICAgLy8gRmlyc3QgaW5mb2JveCBzaG91bGQgYmUgdGhlIG1haW4gb25lXG4gICAgZ2VuZXJhbDogaW5mb2JveGVzLnNoaWZ0KCksXG4gIH07XG5cbiAgaW5mb2JveGVzLmZvckVhY2goKG5leHQpID0+IHtcbiAgICBjb25zdCB0eXBlID0gbmV4dC50eXBlO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICByZXNbY2FtZWxDYXNlKHR5cGUpXSA9IG5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7XG4gICAgICAgIGdlbmVyYWw6IE9iamVjdC5hc3NpZ24oe30sIHJlcy5nZW5lcmFsLCBuZXh0KSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVzLnRhYmxlcyA9IHBhcnNlVGFibGVzKHNvdXJjZSk7XG4gIHJlcy5ic1RhYmxlcyA9IHBhcnNlQnNUYWJsZXMoc291cmNlKTtcbiAgcmVzLmxpc3RzID0gcGFyc2VMaXN0cyhzb3VyY2UpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCJjb25zdCBzbWFsbEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7c21hbGxcXHwoW15cXH1cXH1dKylcXH1cXH0vZztcbmNvbnN0IHNtYWxsUGF0dGVybiA9IC9zbWFsbFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogc21hbGxHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHNtYWxsUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB2YXJpYWJsZTogJ1NNQUxMJyxcbiAgbmFtZTogJ3NtYWxscycsXG59O1xuIiwiY29uc3QgZmxhZ0dsb2JhbFBhdHRlcm4gPSAvXFx7XFx7ZmxhZ1xcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgZmxhZ1BhdHRlcm4gPSAvZmxhZ1xcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogZmxhZ0dsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogZmxhZ1BhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdGTEFHJyxcbiAgbmFtZTogJ2ZsYWdzJyxcbn07XG4iLCJjb25zdCBjb29yZHNHbG9iYWxQYXR0ZXJuID0gL1xce1xce2Nvb3JkXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBjb29yZHNQYXR0ZXJuID0gL2Nvb3JkXFx8KFteXFx9XFx9XSspXFx9XFx9LztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBjb29yZHNHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGNvb3Jkc1BhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdDT09SRCcsXG4gIG5hbWU6ICdjb29yZHMnLFxufTtcbiIsImNvbnN0IGdsb2JhbFBhdHRlcm4gPSAvXFxbXFxbKFteXFxdXFx8XSspXFx8PyhbXlxcXV0rKT9cXF1cXF0vZztcbmNvbnN0IHBhdHRlcm4gPSAvXFxbXFxbKFteXFxdXFx8XSspXFx8PyhbXlxcXV0rKT9cXF1cXF0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogcGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHZhbHVlLCB0eXBlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHZhbHVlIHx8IHR5cGU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnSU5TVEFOQ0UnLFxuICBuYW1lOiAnaW5zdGFuY2VzJyxcbn07XG4iLCJpbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi4vdXRpbC9nZXRWYWx1ZSc7XG5cbmNvbnN0IGxpc3RJdGVtUHJlZml4UGF0dGVybiA9IC9eXFx8XFxzPy87XG5jb25zdCB1bmJ1bGxldGVkTGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7KD86dW5idWxsZXRlZCBsaXN0fHVibHx1YnR8dWJsaXN0fHVuYnVsbGV0KVxccz9cXHwoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCB1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuID0gL1xcfFxccyooW158fV0rKS9nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IHVuYnVsbGV0ZWRMaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiB1bmJ1bGxldGVkTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogKGxpc3RJdGVtcykgPT4ge1xuICAgIGlmICghbGlzdEl0ZW1zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBsaXN0SXRlbXNcbiAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmVwbGFjZShsaXN0SXRlbVByZWZpeFBhdHRlcm4sICcnKS50cmltKCkpXG4gICAgICAuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTkJVTExFVEVEX0xJU1QnLFxuICBuYW1lOiAndW5idWxsZXRlZExpc3RzJyxcbn07XG4iLCJjb25zdCBsaXN0SXRlbVByZWZpeFBhdHRlcm4gPSAvXlxcKlxccyovO1xuY29uc3QgcGxhaW5MaXN0R2xvYmFsUGF0dGVybiA9IC9cXG4oXFwqXFxzKlteKnxdKykrL2c7XG5jb25zdCBwbGFpbkxpc3RJdGVtUGF0dGVybiA9IC9cXCpcXHMqKFteKnxdKykvZztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBwbGFpbkxpc3RHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IHBsYWluTGlzdEl0ZW1QYXR0ZXJuLFxuICBwYXJzZTogbGlzdEl0ZW1zID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdEl0ZW1zXG4gICAgICAubWFwKGl0ZW0gPT4gaXRlbS5yZXBsYWNlKGxpc3RJdGVtUHJlZml4UGF0dGVybiwgJycpLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIodmFsdWUgPT4gdmFsdWUgJiYgdmFsdWUubGVuZ3RoKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdVTk1BUktFRF9MSVNUJyxcbiAgbmFtZTogJ3VubWFya2VkTGlzdHMnLFxufTtcbiIsImltcG9ydCBnZXRWYWx1ZSBmcm9tICcuLi91dGlsL2dldFZhbHVlJztcblxuY29uc3QgbGlzdEl0ZW1QcmVmaXhQYXR0ZXJuID0gL15cXCpcXHM/LztcbmNvbnN0IHBsYWluTGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Zj9wP1A/bD9hP2k/bj90P1xccz9saXN0XFxzP1xcfChbXlxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgcGxhaW5MaXN0SXRlbVBhdHRlcm4gPSAvXFwqXFxzKihbXip9XSspL2c7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogcGxhaW5MaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBwbGFpbkxpc3RJdGVtUGF0dGVybixcbiAgcGFyc2U6IChsaXN0SXRlbXMpID0+IHtcbiAgICBpZiAoIWxpc3RJdGVtcykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgbGlzdEl0ZW1zXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmVwbGFjZShsaXN0SXRlbVByZWZpeFBhdHRlcm4sICcnKS50cmltKCkpXG4gICAgICAgIC8vIC5tYXAoZ2V0VmFsdWUpXG4gICAgICAgIC5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpXG4gICAgKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdQTEFJTl9MSVNUJyxcbiAgbmFtZTogJ3BsYWluTGlzdHMnLFxufTtcbiIsImNvbnN0IG1hcnJpYWdlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtNYXJyaWFnZVxcfChbXlxcfVxcfV0rKVxcfVxcfS9naTtcbmNvbnN0IG1hcnJpYWdlUGF0dGVybiA9IC9NYXJyaWFnZVxcfChbXnxdKylcXHwoW158XSopKC4qKVxcfVxcfS9pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG1hcnJpYWdlR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBtYXJyaWFnZVBhdHRlcm4sXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIGNvbnN0IFssIHdobywgbWFycmllZF0gPSByZXN1bHRzO1xuICAgIHJldHVybiB7XG4gICAgICB3aG8sXG4gICAgICBtYXJyaWVkLFxuICAgIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnTUFSUklBR0UnLFxuICBuYW1lOiAnbWFycmlhZ2VzJyxcbn07XG4iLCJjb25zdCBuYmF5R2xvYmFsUGF0dGVybiA9IC9cXHtcXHtuYmF5XFx8KFteXFx9XFx9XSspXFx9XFx9L2dpO1xuY29uc3QgbmJheVBhdHRlcm4gPSAvbmJheVxcfChbXnxdKylcXHwoLiopXFx9XFx9L2k7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogbmJheUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogbmJheVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCB5ZWFyLCB0eXBlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0sXG4gIHZhcmlhYmxlOiAnbmJheScsXG4gIG5hbWU6ICduYmF5Jyxcbn07XG4iLCJjb25zdCBvdGhlckdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7KFtefFxcbl0rKVxcfChbXnxcXG5dKylcXHw/KFteXFx9XFxuXSspP1xcfVxcfS9nO1xuY29uc3Qgb3RoZXJQYXR0ZXJuID0gL1xce1xceyhbXnxcXG5dKylcXHwoW158XFxuXSspXFx8PyhbXlxcfVxcbl0rKT9cXH1cXH0vO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG90aGVyR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBvdGhlclBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBsYWJlbCwgZGVzY3JpcHRvciwgZXh0cmFdID0gcmVzdWx0cztcbiAgICByZXR1cm4gbGFiZWw7XG4gIH0sXG4gIHZhcmlhYmxlOiAnT1RIRVInLFxuICBuYW1lOiAnb3RoZXJzJyxcbn07XG4iLCJjb25zdCBobGlzdEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7aGxpc3RcXHwoW15cXH1cXH1dKylcXH1cXH0vZ2k7XG5jb25zdCBobGlzdFBhdHRlcm4gPSAvaGxpc3RcXHwoLiopXFxuP1xcfVxcfS9pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGhsaXN0R2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBobGlzdFBhdHRlcm4sXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIGlmICghcmVzdWx0cykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBsZXQgWywgZWxlbWVudHNdID0gcmVzdWx0cztcbiAgICByZXR1cm4gZWxlbWVudHMuc3BsaXQoJ3wnKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdITElTVCcsXG4gIG5hbWU6ICdobGlzdHMnLFxufTtcbiIsImNvbnN0IGJpcnRoRGF0ZUdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7YmlydGhcXHNkYXRlKFteXFx9XFx9XSspXFx9XFx9L2lnO1xuY29uc3QgYmlydGhEYXRlUGF0dGVybiA9IC8oXFxkKylcXHwoXFxkKylcXHwoXFxkKykvO1xuXG5jb25zdCBtaWxsaXNJblllYXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGJpcnRoRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogYmlydGhEYXRlUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIGNvbnN0IFssIHllYXIsIG1vbnRoLCBkYXldID0gcmVzdWx0cztcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgtMSwgZGF5KTtcbiAgICBjb25zdCBhZ2UgPSBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gK2RhdGUpIC8gbWlsbGlzSW5ZZWFyKTtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZSxcbiAgICAgIGFnZSxcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ0JJUlRIX0RBVEUnLFxuICBuYW1lOiAnYmlydGhEYXRlcycsXG59O1xuIiwiaW1wb3J0IHsgRE9fTk9UX1JFUExBQ0UgfSBmcm9tICcuL2RhdGFUeXBlJ1xuY29uc3QgbGFiZWxlZERhdGVHbG9iYWxQYXR0ZXJuID0gL1xce1xceyhbXlxcblxcfVxcfV0rKVxcfVxcfS9nO1xuY29uc3QgbGFiZWxlZERhdGVQYXR0ZXJuID0gLyguKikvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGxhYmVsZWREYXRlR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBsYWJlbGVkRGF0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBmaXJzdFBpcGVJbmRleCA9IHJlc3VsdHNbMF0uaW5kZXhPZignfCcpO1xuICAgIGlmIChmaXJzdFBpcGVJbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBzdHIgPSByZXN1bHRzWzBdXG4gICAgICAgIC5zdWJzdHJpbmcoZmlyc3RQaXBlSW5kZXggKyAxKVxuICAgICAgICAuc2xpY2UoMCwgLTIpXG4gICAgICBsZXQgcG90ZW50aWFsRGF0ZSA9IG5ldyBEYXRlKHN0ciArICcgR01UJyk7XG4gICAgICBpZiAoIWlzTmFOKHBvdGVudGlhbERhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICByZXR1cm4geyBkYXRlOiBwb3RlbnRpYWxEYXRlIH07XG4gICAgICB9XG4gICAgICBwb3RlbnRpYWxEYXRlID0gbmV3IERhdGUoc3RyLnNwbGl0KCd8Jykuam9pbignLScpICsgJyBHTVQnKVxuICAgICAgaWYgKCFpc05hTihwb3RlbnRpYWxEYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgcmV0dXJuIHsgZGF0ZTogcG90ZW50aWFsRGF0ZSB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRE9fTk9UX1JFUExBQ0U7XG4gIH0sXG4gIHZhcmlhYmxlOiAnTEFCRUxFRF9EQVRFJyxcbiAgbmFtZTogJ2xhYmVsZWREYXRlcycsXG59O1xuIiwiY29uc3QgZGVhdGhEYXRlR2xvYmFsUGF0dGVybiA9IC9cXHtcXHtkZWF0aFxcc2RhdGVcXHNhbmRcXHNhZ2UoW15cXH1cXH1dKylcXH1cXH0vaWc7XG5jb25zdCBkZWF0aERhdGVQYXR0ZXJuID0gLyhcXGQrKVxcfChcXGQrKVxcfChcXGQrKVxcfChcXGQrKVxcfD8oXFxkKyk/XFx8PyhcXGQrKT8vO1xuXG5jb25zdCBtaWxsaXNJblllYXIgPSAxMDAwICogNjAgKiA2MCAqIDI0ICogMzY1O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGRlYXRoRGF0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogZGVhdGhEYXRlUGF0dGVybixcbiAgcGFyc2U6IHJlc3VsdHMgPT4ge1xuICAgIC8vIFNvbWUgYXJ0aWNsZXMgZG8gbm90IGxpc3QgYmlydGggbW9udGgvZGF5IHNvIHdlIGp1c3QgZXN0aW1hdGUgdGhlIGJpcnRoIGRhdGVcbiAgICBjb25zdCBbLCBkZWF0aFllYXIsIGRlYXRoTW9udGgsIGRlYXRoRGF5LCBiaXJ0aFllYXIsIGJpcnRoTW9udGggPSAwLCBiaXJ0aERheSA9IDBdID0gcmVzdWx0cztcbiAgICBjb25zdCBkZWF0aERhdGUgPSBuZXcgRGF0ZShkZWF0aFllYXIsIGRlYXRoTW9udGgtMSwgZGVhdGhEYXkpO1xuICAgIGNvbnN0IGJpcnRoRGF0ZSA9IG5ldyBEYXRlKGJpcnRoWWVhciwgYmlydGhNb250aC0xLCBiaXJ0aERheSk7XG4gICAgY29uc3QgYWdlID0gTWF0aC5mbG9vcigoTnVtYmVyKGRlYXRoRGF0ZSkgLSBOdW1iZXIoYmlydGhEYXRlKSkgLyBtaWxsaXNJblllYXIpO1xuICAgIHJldHVybiB7XG4gICAgICBkYXRlOiBkZWF0aERhdGUsXG4gICAgICBhZ2UsXG4gICAgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdERUFUSF9EQVRFJyxcbiAgbmFtZTogJ2RlYXRoRGF0ZXMnLFxufTtcbiIsImNvbnN0IFVSTEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7VVJMXFx8KFteXFx9XFx9XSspXFx9XFx9L2c7XG5jb25zdCBVUkxQYXR0ZXJuID0gL1VSTFxcfChbXlxcfVxcfV0rKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogVVJMR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBVUkxQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgdmFsdWVdID0gcmVzdWx0cztcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHZhcmlhYmxlOiAnVVJMJyxcbiAgbmFtZTogJ3VybHMnLFxufTtcbiIsImNvbnN0IHdlYnNpdGVHbG9iYWxQYXR0ZXJuID0gL1xcWyhodHRwcz8pOlxcL1xcLygoPzp3d3dcXC4pP1stYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fVxcLlthLXpdezIsNn0pXFxiKFstYS16QS1aMC05QDolX1xcKy5+Iz8mLy89XSopXFxzKyhbXFx3XFxzXSspXFxdL2c7XG5jb25zdCB3ZWJzaXRlUGF0dGVybiA9IC9cXFsoaHR0cHM/KTpcXC9cXC8oKD86d3d3XFwuKT9bLWEtekEtWjAtOUA6JS5fXFwrfiM9XXsyLDI1Nn1cXC5bYS16XXsyLDZ9KVxcYihbLWEtekEtWjAtOUA6JV9cXCsufiM/Ji8vPV0qKVxccysoW1xcd1xcc10rKVxcXS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogd2Vic2l0ZUdsb2JhbFBhdHRlcm4sXG4gIHBhcnNlUGF0dGVybjogd2Vic2l0ZVBhdHRlcm4sXG4gIHBhcnNlOiByZXN1bHRzID0+IHtcbiAgICBjb25zdCBbLCBwcm90b2NvbCwgaG9zdG5hbWUsIHBhdGgsIHRpdGxlXSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3RvY29sLFxuICAgICAgaG9zdG5hbWUsXG4gICAgICBwYXRoLFxuICAgICAgdGl0bGUsXG4gICAgICB1cmw6IGAke3Byb3RvY29sfTovLyR7aG9zdG5hbWV9JHtwYXRofWBcbiAgICB9O1xuICB9LFxuICB2YXJpYWJsZTogJ1dFQlNJVEUnLFxuICBuYW1lOiAnd2Vic2l0ZXMnLFxufTtcbiIsImNvbnN0IGdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7RXh0cmFbXn19XStcXH1cXH0vZ2k7XG5jb25zdCBwYXJzZVBhdHRlcm4gPSAvXFx8XFxzPyhcXHcrKVxccys9XFxzKyguKykvZztcbmNvbnN0IHByb3BQYXR0ZXJuID0gL1xcfFxccz8oXFx3KylcXHMrPVxccysoLispLztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm4sXG4gIHBhcnNlOiAob2JqKSA9PiB7XG4gICAgY29uc3QgZSA9IG9iai5yZWR1Y2UoKG1lbW8sIGkpID0+IHtcbiAgICAgIGNvbnN0IFssIGtleSwgdmFsdWVdID0gaS5tYXRjaChwcm9wUGF0dGVybik7XG4gICAgICBtZW1vW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KTtcbiAgICByZXR1cm4gZTtcbiAgfSxcbiAgdmFyaWFibGU6ICdFWFRSQScsXG4gIG5hbWU6ICdleHRyYScsXG59O1xuIiwiY29uc3QgY29udmVydEdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Y29udmVydFxcfChbXFxkXFwuXSspXFx8KFxcdyspL2c7XG5jb25zdCBjb252ZXJ0UGF0dGVybiA9IC9cXHtcXHtjb252ZXJ0XFx8KFtcXGRcXC5dKylcXHwoXFx3KykvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IGNvbnZlcnRHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGNvbnZlcnRQYXR0ZXJuLFxuICBwYXJzZTogcmVzdWx0cyA9PiB7XG4gICAgY29uc3QgWywgbnVtLCB1bml0XSA9IHJlc3VsdHM7XG4gICAgcmV0dXJuIGAke251bX0gJHt1bml0fWA7XG4gIH0sXG4gIHZhcmlhYmxlOiAnQ09OVkVSVCcsXG4gIG5hbWU6ICdjb252ZXJ0cycsXG59O1xuIiwiY29uc3QgZmlsbURhdGVzUGF0dGVybiA9IC9cXHtcXHtmaWxtXFxzZGF0ZShbXlxcfVxcfV0rKVxcfVxcfS9naTtcbmNvbnN0IGZpbG1EYXRlUGF0dGVybkdsb2JhbCA9IC8oXFxkKylcXHw/KFxcZCspXFx8PyhcXGQrKVxcfD8oW15cXHxcXH1dKilcXHw/KHJlZlxcZCs9KFteXFx8XFx9XSopKT8vZztcbmNvbnN0IGZpbG1EYXRlUGF0dGVybiA9IC8oXFxkKylcXHw/KFxcZCspXFx8PyhcXGQrKVxcfD8oW15cXHxcXH1dKilcXHw/KHJlZlxcZCs9KFteXFx8XFx9XSopKT8vO1xuXG4vLyBGb3JtYXQgZG9jdW1lbnRlZCBoZXJlOlxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGVtcGxhdGU6RmlsbV9kYXRlL2RvY1xuLy8gVGFyZ2V0OlxuLy8gWWVhciByZXF1aXJlZCwgbW9udGggZGF5IGV0Yy4gb3B0aW9uYWwuLi5cbi8vIHt7RmlsbSBkYXRlfHllYXIxfG1vbnRoMXxkYXkxfGxvY2F0aW9uMXxyZWYxPTxyZWYgbmFtZT1cInh4eHh4XCIgLz58eWVhcjJ8bW9udGgyfGRheTJ8bG9jYXRpb24yfHJlZjI9PHJlZiBuYW1lPVwieXl5eVwiIC8+fX1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnbG9iYWxQYXR0ZXJuOiBmaWxtRGF0ZXNQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IGZpbG1EYXRlUGF0dGVybkdsb2JhbCxcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgcmV0dXJuIHJlc3VsdHMubWFwKChyZXN1bHQpID0+IHtcbiAgICAgIGNvbnN0IFtfLCB5ZWFyLCBtb250aCwgZGF5LCBsb2NhdGlvbiwgX3JlZiwgcmVmXSA9IHJlc3VsdC5tYXRjaChcbiAgICAgICAgZmlsbURhdGVQYXR0ZXJuXG4gICAgICApO1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoICYmIG1vbnRoIC0gMSwgZGF5KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICByZWYsXG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuICB2YXJpYWJsZTogJ0ZJTE1fREFURVMnLFxuICBuYW1lOiAnZmlsbURhdGVzJyxcbn07XG4iLCJjb25zdCBvdGhlckdsb2JhbFBhdHRlcm4gPSAvPHJlZihcXHNcXHcrPVtePl0rKT8+KC4qKTxcXC9yZWY+L2c7XG5jb25zdCBvdGhlclBhdHRlcm4gPSAvPHJlZihcXHNcXHcrPVtePl0rKT8+KC4qKTxcXC9yZWY+LztcblxuY29uc3QgYXR0cmlidXRlR2xvYmFsUGF0dGVybiA9IC8oXFx3Kyk9KFtcIlxcd10rKS9nO1xuY29uc3QgYXR0cmlidXRlUGF0dGVybiA9IC8oXFx3Kyk9KFtcIlxcd10rKS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybjogb3RoZXJHbG9iYWxQYXR0ZXJuLFxuICBwYXJzZVBhdHRlcm46IG90aGVyUGF0dGVybixcbiAgcGFyc2U6IChyZXN1bHRzKSA9PiB7XG4gICAgY29uc3QgW18sIGF0dHJpYnV0ZXNTb3VyY2UsIGNvbnRlbnRzXSA9IHJlc3VsdHM7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IChcbiAgICAgIChhdHRyaWJ1dGVzU291cmNlIHx8ICcnKS5tYXRjaChhdHRyaWJ1dGVHbG9iYWxQYXR0ZXJuKSB8fCBbXVxuICAgICkucmVkdWNlKChtZW1vLCBhdHRyKSA9PiB7XG4gICAgICBpZiAoYXR0cikge1xuICAgICAgICBjb25zdCBbXywga2V5LCB2YWx1ZV0gPSBhdHRyLm1hdGNoKGF0dHJpYnV0ZVBhdHRlcm4pO1xuICAgICAgICBtZW1vW2tleV0gPSB2YWx1ZS5yZXBsYWNlKC9cIi9nLCAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSk7XG4gICAgcmV0dXJuIHsgYXR0cmlidXRlcywgY29udGVudHMgfTtcbiAgfSxcbiAgdmFyaWFibGU6ICdSRUYnLFxuICBuYW1lOiAncmVmcycsXG59O1xuIiwiY29uc3Qgb3RoZXJHbG9iYWxQYXR0ZXJuID0gLzxyZWYoXFxzXFx3Kz1bXj5dKyk/XFwvPi9nO1xuY29uc3Qgb3RoZXJQYXR0ZXJuID0gLzxyZWYoXFxzXFx3Kz1bXj5dKyk/XFwvPi87XG5cbmNvbnN0IGF0dHJpYnV0ZUdsb2JhbFBhdHRlcm4gPSAvKFxcdyspPShbXCJcXHddKykvZztcbmNvbnN0IGF0dHJpYnV0ZVBhdHRlcm4gPSAvKFxcdyspPShbXCJcXHddKykvO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdsb2JhbFBhdHRlcm46IG90aGVyR2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuOiBvdGhlclBhdHRlcm4sXG4gIHBhcnNlOiAocmVzdWx0cykgPT4ge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSByZXN1bHRzWzFdXG4gICAgICAubWF0Y2goYXR0cmlidXRlR2xvYmFsUGF0dGVybilcbiAgICAgIC5yZWR1Y2UoKG1lbW8sIGF0dHIpID0+IHtcbiAgICAgICAgY29uc3QgW18sIGtleSwgdmFsdWVdID0gYXR0ci5tYXRjaChhdHRyaWJ1dGVQYXR0ZXJuKTtcbiAgICAgICAgbWVtb1trZXldID0gdmFsdWUucmVwbGFjZSgvXCIvZywgJycpO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KTtcbiAgICByZXR1cm4geyBhdHRyaWJ1dGVzIH07XG4gIH0sXG4gIHZhcmlhYmxlOiAnUkVGJyxcbiAgbmFtZTogJ3JlZnMnLFxufTtcbiIsImNvbnN0IGdsb2JhbFBhdHRlcm4gPSAvXFx7XFx7Zm9ybWF0bnVtOlxcZCtcXH1cXH0vZ2k7XG5jb25zdCBwYXJzZVBhdHRlcm4gPSAvXFx7XFx7Zm9ybWF0bnVtOihcXGQrKVxcfVxcfS87XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2xvYmFsUGF0dGVybixcbiAgcGFyc2VQYXR0ZXJuLFxuICBwYXJzZTogKHJlc3VsdHMpID0+IHtcbiAgICBjb25zdCBbLCB2YWx1ZV0gPSByZXN1bHRzO1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSxcbiAgdmFyaWFibGU6ICdGT1JNQVRfTlVNJyxcbiAgbmFtZTogJ2Zvcm1hdE51bScsXG59O1xuIiwiaW1wb3J0IHNtYWxsIGZyb20gJy4vc21hbGwnO1xuaW1wb3J0IGZsYWcgZnJvbSAnLi9mbGFnJztcbmltcG9ydCBjb29yZHMgZnJvbSAnLi9jb29yZHMnO1xuaW1wb3J0IGluc3RhbmNlcyBmcm9tICcuL2luc3RhbmNlcyc7XG5pbXBvcnQgdW5idWxsZXRlZExpc3RzIGZyb20gJy4vdW5idWxsZXRlZExpc3RzJztcbmltcG9ydCB1bm1hcmtlZExpc3RzIGZyb20gJy4vdW5tYXJrZWRMaXN0cyc7XG5pbXBvcnQgcGxhaW5MaXN0cyBmcm9tICcuL3BsYWluTGlzdHMnO1xuaW1wb3J0IG1hcnJpYWdlcyBmcm9tICcuL21hcnJpYWdlcyc7XG5pbXBvcnQgbmJheSBmcm9tICcuL25iYXknO1xuaW1wb3J0IG90aGVyIGZyb20gJy4vb3RoZXInO1xuaW1wb3J0IGhsaXN0IGZyb20gJy4vaGxpc3QnO1xuaW1wb3J0IGJpcnRoRGF0ZXMgZnJvbSAnLi9iaXJ0aERhdGVzJztcbmltcG9ydCBsYWJlbGVkRGF0ZXMgZnJvbSAnLi9sYWJlbGVkRGF0ZXMnO1xuaW1wb3J0IGRlYXRoRGF0ZXMgZnJvbSAnLi9kZWF0aERhdGVzJztcbmltcG9ydCB1cmwgZnJvbSAnLi91cmwnO1xuaW1wb3J0IHdlYnNpdGUgZnJvbSAnLi93ZWJzaXRlJztcbmltcG9ydCBleHRyYSBmcm9tICcuL2V4dHJhJztcbmltcG9ydCBjb252ZXJ0IGZyb20gJy4vY29udmVydCc7XG5pbXBvcnQgY3JlYXRlRGF0YVR5cGVIYW5kbGVyIGZyb20gJy4vZGF0YVR5cGUnO1xuaW1wb3J0IGZpbG1EYXRlcyBmcm9tICcuL2ZpbG1EYXRlcyc7XG5pbXBvcnQgcmVmMSBmcm9tICcuL3JlZjEnO1xuaW1wb3J0IHJlZjIgZnJvbSAnLi9yZWYyJztcbmltcG9ydCBmb3JtYXROdW0gZnJvbSAnLi9mb3JtYXROdW0nO1xuXG5jb25zdCBkYXRhVHlwZXMgPSBbXG4gIC8vIE9yZGVyIGlzIHZlcnkgaW1wb3J0YW50IGhlcmUuLi5cbiAgaW5zdGFuY2VzLFxuICByZWYxLFxuICByZWYyLFxuICBzbWFsbCxcbiAgZm9ybWF0TnVtLFxuICBmbGFnLFxuICBjb29yZHMsXG4gIG1hcnJpYWdlcyxcbiAgYmlydGhEYXRlcyxcbiAgbGFiZWxlZERhdGVzLFxuICBkZWF0aERhdGVzLFxuICB1bmJ1bGxldGVkTGlzdHMsXG4gIHdlYnNpdGUsXG4gIGhsaXN0LFxuICB1cmwsXG4gIGNvbnZlcnQsXG4gIG5iYXksXG4gIGZpbG1EYXRlcyxcbiAgLy8gb3RoZXIgbmVlZHMgdG8gYWx3YXlzIGJlIGFmdGVyIHNwZWNpZmljIGRhdGEgZHlwZXNcbiAgb3RoZXIsXG4gIGV4dHJhLFxuICAvLyBMaXN0cyBzaG91bGQgYmUgbGFzdFxuICBwbGFpbkxpc3RzLFxuICB1bm1hcmtlZExpc3RzLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZGF0YVR5cGVzLm1hcCgodHlwZSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGNyZWF0ZURhdGFUeXBlSGFuZGxlcih0eXBlKSxcbiAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgcGF0dGVybjogbmV3IFJlZ0V4cChgXFxcXCQke3R5cGUudmFyaWFibGV9XyhcXFxcZCspYCksXG4gIH07XG59KTtcbiIsIlxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBtZWFudCB0byBjb250YWluIGEgbnVtYmVyLCB0cmllcyB0byBmaW5kIG91dFxuICogdGhlIG51bWJlciBjb25zaWRlcmluZyBjb21tYSBvciBwb2ludCBzZXBhcmF0b3JzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IG51bWJlclxuICogQHJldHVybiB7TnVtYmVyfSB3aXRoIHRoZSBwYXJzZWQgbnVtYmVyLCBmYWxzZSwgaWYgdGhlIHBhcnNpbmcgaXNcbiAqICAgICAgICAgICAgICAgICAgbm90IHBvc3NpYmxlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChudW1iZXIpID0+IHtcblxuICBpZiAodHlwZW9mIG51bWJlciAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZVxuXG4gIG51bWJlciA9IG51bWJlci50cmltKCkucmVwbGFjZSgvIC9nLCAnJylcblxuICAvLyBGaW5kIG91dCBpZiBjb21tYXMgYXJlIHVzZWQgYXMgdGhvdXNhbmQgb3IgZGVjaW1hbCBzZXBhcmF0b3JzLlxuICAvLyBJZiB0aGUgc3RyaW5nIGhhcyBib3RoLCBhbmQgY29tbWFzIGFyZSBmaXJzdCwgdGhlbiBjb21tYXMgYXJlXG4gIC8vIHRob3VzYW5kIHNlcGFyYXRvcnMgKGVuZ2xpc2ggc3R5bGUpXG4gIGlmIChudW1iZXIubWF0Y2goLywvKSAmJiBudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5pbmRleE9mKCcsJykgPCBudW1iZXIuaW5kZXhPZignLicpKSB7XG4gICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgfVxuICB9XG5cbiAgaWYgKG51bWJlci5tYXRjaCgvLC8pICYmICFudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5tYXRjaCgvLC9nKS5sZW5ndGggPiAxKSB7XG5cbiAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUsIHRoZW4gaXQncyBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgcmV0dXJuIHBhcnNlRW5nbGlzaChudW1iZXIpXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gSWYgaXQncyBmb2xsd2VkIGJ5IDMgZGlnaXRzLCBpdCdzIHByb2FibHkgYSB0aG91c2FuZCBzZXBhcmF0b3JcbiAgICAgIGlmIChudW1iZXIubWF0Y2goLyxbMC05XXszfSgkfF5bMC05XSkvKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZVNwYW5pc2gobnVtYmVyKVxuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgaWYgKCFudW1iZXIubWF0Y2goLywvKSAmJiBudW1iZXIubWF0Y2goL1xcLi8pKSB7XG4gICAgaWYgKG51bWJlci5tYXRjaCgvXFwuL2cpLmxlbmd0aCA+IDEpIHtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSwgdGhlbiBpdCdzIGEgdGhvdXNhbmQgc2VwYXJhdG9yXG4gICAgICByZXR1cm4gcGFyc2VTcGFuaXNoKG51bWJlcilcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBJZiBpdCdzIGZvbGx3ZWQgYnkgMyBkaWdpdHMsIGl0J3MgcHJvYWJseSBhIHRob3VzYW5kIHNlcGFyYXRvclxuICAgICAgaWYgKG51bWJlci5tYXRjaCgvXFwuWzAtOV17M30oJHxeWzAtOV0pLykpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlU3BhbmlzaChudW1iZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyc2VFbmdsaXNoKG51bWJlcilcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIC8vIElmIGl0IGxvb2tzIHRoZSBzYW1lIGFzIG51bWJlciBvciBzdHJpbmcsIGp1c3QgY2FzdCBpdFxuICBpZiAoKCtudW1iZXIpLnRvU3RyaW5nKCkgPT09IG51bWJlcikgcmV0dXJuICtudW1iZXJcblxuICByZXR1cm4gZmFsc2Vcbn1cblxuY29uc3QgcGFyc2VFbmdsaXNoID0gKHN0cikgPT4ge1xuICByZXR1cm4gK3N0ci5yZXBsYWNlKC8sL2csICcnKVxufVxuXG5jb25zdCBwYXJzZVNwYW5pc2ggPSAoc3RyKSA9PiB7XG4gIHJldHVybiArc3RyLnJlcGxhY2UoL1xcLi9nLCAnJykucmVwbGFjZSgvLC9nLCAnLicpXG59XG5cbiJdLCJuYW1lcyI6WyJ0cmltV3JhcHBlcnMiLCJzdHIiLCJyZXBsYWNlIiwidHJpbSIsInRyaW1PciIsIm9yUG9zaXRpb24iLCJpbmRleE9mIiwic3Vic3RyaW5nIiwiZ2V0VmFsdWUiLCJyYXciLCJrZXkiLCJjbGVhbnNlZCIsImV4dHJhUHJvcGVydHlQYXR0ZXJuIiwiZW5kaW5nUGF0dGVybiIsImxpbmtzIiwibWF0Y2giLCJsaW5rc1BhdHRlcm4iLCJzcGxpdCIsImxpbmtTZXBhcmF0b3JQYXR0ZXJuIiwiZmlsdGVyIiwidGV4dCIsImRhdGFUeXBlIiwiZ2xvYmFsUGF0dGVybiIsInBhcnNlUGF0dGVybiIsInBhcnNlIiwidmFyaWFibGUiLCJuYW1lIiwic291cmNlIiwibWF0Y2hlcyIsImluc3RhbmNlcyIsIm1hcCIsInNvdXJjZUFmdGVyIiwicmVkdWNlIiwibWVtbyIsImluZGV4IiwiRE9fTk9UX1JFUExBQ0UiLCJieURhdGFIYW5kbGVyIiwiaGFuZGxlciIsImNvbnRleHQiLCJkYXRhIiwiT2JqZWN0IiwiYXNzaWduIiwiZXh0cmFjdERhdGEiLCJkYXRhVHlwZXMiLCJ0eXBlIiwiZmluZFByb3BlcnR5TGlzdCIsImtleVZhbHVlUGFpcnMiLCJrZXlWYWx1ZUdsb2JhbFBhdHRlcm4iLCJyZXN1bHQiLCJrZXlWYWx1ZVBhdHRlcm4iLCJleGVjIiwicmF3S2V5IiwicmF3VmFsdWUiLCJjYW1lbENhc2UiLCJpdGVtIiwiZmlsbFZhcmlhYmxlIiwidmFsdWUiLCJzaW1wbGlmeURhdGFWYWx1ZXMiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiZmluZCIsInBhdHRlcm4iLCJtYXRjaGVkIiwiZGF0YVZhbHVlIiwicGFyc2VJbnQiLCJmaWxsVmFyaWFibGVzIiwib3B0aW9ucyIsInVuZGVmaW5lZCIsIkRhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiZmlsbGVkIiwiaGFuZGxlU21hbGxEYXRhIiwic21hbGxEYXRhVHlwZSIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJnZXRWYXJpYWJsZVZhbHVlIiwic21hbGxEYXRhIiwicmVkdWNlVmFyaWFibGUiLCJmbG9hdCIsIm51bWJlclBhcnNlIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiZGF0ZVZhbHVlIiwidmFyaWFibGVWYWx1ZSIsImJ5VmFyaWFibGVSZWR1Y3Rpb24iLCJyZWR1Y2VkIiwiZXh0cmFjdFByb3BlcnRpZXMiLCJ0cmFuc2Zvcm1Qcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsInRyYW5zZm9ybWVkIiwiYmxhbmtOYW1lUGF0dGVybiIsImlkIiwiYmxhbmtOYW1lIiwiYmxhbmtJbmZvIiwiYmxhbmtJbmZvUGF0dGVybiIsImZpbmRPdXRlckluZGV4IiwibGFzdE9wZW4iLCJpIiwibGVuZ3RoIiwibmV4dFR3byIsInN1YnN0ciIsInBvcCIsInB1c2giLCJzdGFydE1hdGNoIiwiaW5mb0JveFN0YXJ0UGF0dGVybiIsInNvdXJjZUxlZnQiLCJzdGFydEluZGV4Iiwid2l0aFN0YXJ0Iiwib3V0ZXJJbmRleCIsImV4dHJhY3RJbmZvYm94ZXMiLCJwYXJzZWQiLCJpbmZvYm94ZXMiLCJjbGVhblNvdXJjZSIsInJlbW92ZVNtYWxsIiwicmVtb3ZlUmVmZXJlbmNlcyIsInRyYW5zZm9ybVJvd1NwYW4iLCJyb3dzIiwidHJhbnNmb3JtQ2VsbHMiLCJtZXJnZWQiLCJjZWxscyIsImsiLCJvIiwiam9pbiIsImNsZWFuIiwibGlua1BhdHRlcm4iLCJtIiwieCIsInBhcnNlUm93IiwiY291bnRNYXRjaCIsImNvdW50IiwiaWNvbnMiLCJnZXRNYXRjaGVzIiwicGFyc2VUYWJsZURhdGEiLCJyb3dQYXR0ZXJuIiwiZWwiLCJyb3dQYXR0ZXJuU2luZ2xlIiwic2xpY2UiLCJnZXRUYWJsZXMiLCJ0YWJsZVN0YXJ0cyIsInRhYmxlU3RhcnRQYXR0ZXJuIiwidGFibGVFbmRzIiwidGFibGVFbmRQYXR0ZXJuIiwidGFibGVTdGFydCIsInRhYmxlRW5kIiwiRXJyb3IiLCJlbmQiLCJzdGFydCIsImxhc3QiLCJsaXN0IiwicGFyc2VJbmZvYm94IiwiaW5mb2JveCIsInJlcyIsInNoaWZ0IiwiZm9yRWFjaCIsIm5leHQiLCJnZW5lcmFsIiwidGFibGVzIiwicGFyc2VUYWJsZXMiLCJic1RhYmxlcyIsInBhcnNlQnNUYWJsZXMiLCJsaXN0cyIsInBhcnNlTGlzdHMiLCJzbWFsbEdsb2JhbFBhdHRlcm4iLCJzbWFsbFBhdHRlcm4iLCJyZXN1bHRzIiwiZmxhZ0dsb2JhbFBhdHRlcm4iLCJmbGFnUGF0dGVybiIsImNvb3Jkc0dsb2JhbFBhdHRlcm4iLCJjb29yZHNQYXR0ZXJuIiwibGlzdEl0ZW1QcmVmaXhQYXR0ZXJuIiwidW5idWxsZXRlZExpc3RHbG9iYWxQYXR0ZXJuIiwidW5idWxsZXRlZExpc3RJdGVtUGF0dGVybiIsImxpc3RJdGVtcyIsInBsYWluTGlzdEdsb2JhbFBhdHRlcm4iLCJwbGFpbkxpc3RJdGVtUGF0dGVybiIsIm1hcnJpYWdlR2xvYmFsUGF0dGVybiIsIm1hcnJpYWdlUGF0dGVybiIsIm5iYXlHbG9iYWxQYXR0ZXJuIiwibmJheVBhdHRlcm4iLCJ5ZWFyIiwib3RoZXJHbG9iYWxQYXR0ZXJuIiwib3RoZXJQYXR0ZXJuIiwibGFiZWwiLCJobGlzdEdsb2JhbFBhdHRlcm4iLCJobGlzdFBhdHRlcm4iLCJiaXJ0aERhdGVHbG9iYWxQYXR0ZXJuIiwiYmlydGhEYXRlUGF0dGVybiIsIm1pbGxpc0luWWVhciIsIm1vbnRoIiwiZGF5IiwiZGF0ZSIsIk1hdGgiLCJmbG9vciIsIm5vdyIsIlN5bWJvbCIsImxhYmVsZWREYXRlR2xvYmFsUGF0dGVybiIsImxhYmVsZWREYXRlUGF0dGVybiIsImZpcnN0UGlwZUluZGV4IiwicG90ZW50aWFsRGF0ZSIsImdldFRpbWUiLCJkZWF0aERhdGVHbG9iYWxQYXR0ZXJuIiwiZGVhdGhEYXRlUGF0dGVybiIsImRlYXRoWWVhciIsImRlYXRoTW9udGgiLCJkZWF0aERheSIsImJpcnRoWWVhciIsImJpcnRoTW9udGgiLCJiaXJ0aERheSIsImRlYXRoRGF0ZSIsImJpcnRoRGF0ZSIsIk51bWJlciIsIlVSTEdsb2JhbFBhdHRlcm4iLCJVUkxQYXR0ZXJuIiwid2Vic2l0ZUdsb2JhbFBhdHRlcm4iLCJ3ZWJzaXRlUGF0dGVybiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwYXRoIiwicHJvcFBhdHRlcm4iLCJvYmoiLCJjb252ZXJ0R2xvYmFsUGF0dGVybiIsImNvbnZlcnRQYXR0ZXJuIiwiZmlsbURhdGVzUGF0dGVybiIsImZpbG1EYXRlUGF0dGVybkdsb2JhbCIsImZpbG1EYXRlUGF0dGVybiIsImxvY2F0aW9uIiwicmVmIiwiYXR0cmlidXRlR2xvYmFsUGF0dGVybiIsImF0dHJpYnV0ZVBhdHRlcm4iLCJhdHRyaWJ1dGVzU291cmNlIiwiY29udGVudHMiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsInJlZjEiLCJyZWYyIiwic21hbGwiLCJmb3JtYXROdW0iLCJmbGFnIiwiY29vcmRzIiwibWFycmlhZ2VzIiwiYmlydGhEYXRlcyIsImxhYmVsZWREYXRlcyIsImRlYXRoRGF0ZXMiLCJ1bmJ1bGxldGVkTGlzdHMiLCJ3ZWJzaXRlIiwiaGxpc3QiLCJ1cmwiLCJjb252ZXJ0IiwibmJheSIsImZpbG1EYXRlcyIsIm90aGVyIiwiZXh0cmEiLCJwbGFpbkxpc3RzIiwidW5tYXJrZWRMaXN0cyIsImNyZWF0ZURhdGFUeXBlSGFuZGxlciIsIlJlZ0V4cCIsIm51bWJlciIsInBhcnNlRW5nbGlzaCIsInBhcnNlU3BhbmlzaCIsInRvU3RyaW5nIiwiaGVhZGVyc1BhdHRlcm4iLCJjZWxsU2VwYXJhdG9yUGF0dGVybiIsImxpbmtOYW1lUGF0dGVybiIsImlubGluZUhlYWRlclBhdHRlcm4iLCJhY3Rpb25QYXR0ZXJuIiwicm93U3BhbkNvdW50UGF0dGVybiIsInN0cmlwTGlua3MiLCJjYXB0dXJlIiwicmVtb3ZlQWN0aW9ucyIsInRyYW5zZm9ybUNlbGwiLCJyb3ciLCJmaW5kSW5kZXgiLCJ0IiwicCIsImZpbmRUYWJsZVN0YXJ0IiwiZmluZFRhYmxlRW5kIiwiZ2V0SGVhZGVycyIsImhlYWRlcnMiLCJnZXRSb3dzIiwiZSIsInNwYW5OIiwic3BhbkNvdW50Iiwicm93c0luU3BhbiIsImdldE5leHRUYWJsZSIsImxlZnQiLCJjYW1lbGNhc2UiLCJjbGVhbmVkU291cmNlIiwia21QYXR0ZXJuIiwiaGVhZGluZ1BhdHRlcm4iLCJzdWJoZWFkaW5nUGF0dGVybiIsImhlYWRpbmdzIiwic3ViaGVhZGluZ3MiLCJoZWFkaW5nc0JlZm9yZSIsImhlYWRpbmciLCJ0YWJsZSIsInN1YmhlYWRpbmdzQmVmb3JlIiwic3ViaGVhZGluZyJdLCJtYXBwaW5ncyI6ImlHQUtBLFFBQVNBLGNBQWFDLFNBQ2JBLEdBQ0pDLFFBQVEsUUFBUyxJQUNqQkEsUUFBUSxRQUFTLElBQ2pCQSxRQUFRLFFBQVMsSUFDakJBLFFBQVEsUUFBUyxJQUNqQkMsT0FHTCxRQUFTQyxRQUFPSCxNQUNSSSxHQUFhSixFQUFJSyxRQUFRLFlBQ1gsSUFBaEJELEVBQ0tKLEVBQUlNLFVBQVUsRUFBR0YsR0FFbkJKLEVBR1QsUUFBd0JPLFVBQVNDLEVBQUtDLE9BQy9CRCxRQUNJLFNBR0hFLEdBQVdGLEVBQ2ROLE9BQ0FELFFBQVEsUUFBUyxJQUdqQkEsUUFBUSxlQUFnQixJQUN4QkEsUUFBUVUscUJBQXNCLElBQzlCVixRQUFRVyxjQUFlLE9BRVQsTUFBYkYsR0FBaUMsUUFBYkEsU0FDZixL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
