"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Shift = __importStar(require("shift-ast"));
const uuid_1 = require("uuid");
const traverse_1 = require("../../helpers/traverse");
const shift_codegen_1 = __importDefault(require("shift-codegen"));
class ExecutedFunction {
    /**
     * Creates a new executed function.
     * @param body The body of the function.
     * @param name The name of the function (optional).
     */
    constructor(func, name) {
        this.func = func;
        this.name = name;
        this.id = uuid_1.v4().replace(/-/g, "_");
        this.didError = false;
        this.evaluate();
    }
    /**
     * Attempts to evaluate the function.
     */
    evaluate() {
        const body = this.func.body.type == "FunctionBody"
            ? new Shift.FunctionBody({
                directives: [],
                statements: this.func.body.statements,
            })
            : new Shift.FunctionBody({
                directives: [],
                statements: [
                    new Shift.ReturnStatement({
                        expression: this.func.body,
                    }),
                ],
            });
        const func = new Shift.FunctionDeclaration({
            isAsync: false,
            isGenerator: false,
            name: new Shift.BindingIdentifier({
                name: `EXECUTED_FUNCTION_${this.id}`,
            }),
            params: this.func.params,
            body: body,
        });
        this.replaceSelfReferences(func);
        try {
            const code = shift_codegen_1.default(func);
            eval.call(this, code);
        }
        catch (err) {
            this.didError = true;
        }
    }
    /**
     * Attempts to get the result of a call expression of the executed
     * function.
     * @param args The arguments of the call.
     * @returns The result of the call.
     */
    getCall(args) {
        if (this.didError) {
            return null;
        }
        try {
            const callExpression = new Shift.CallExpression({
                callee: new Shift.IdentifierExpression({
                    name: `EXECUTED_FUNCTION_${this.id}`,
                }),
                arguments: args,
            });
            const code = shift_codegen_1.default(callExpression);
            return eval.call(this, code);
        }
        catch (err) {
            return null;
        }
    }
    /**
     * Replaces references to the function itself within a given node.
     * @param node The AST node.
     */
    replaceSelfReferences(node) {
        if (!this.name) {
            return;
        }
        const self = this;
        traverse_1.traverse(node, {
            enter(node, parent) {
                if ((node.type == "IdentifierExpression" ||
                    node.type == "AssignmentTargetIdentifier") &&
                    node.name == self.name) {
                    node.name = `EXECUTED_FUNCTION_${self.id}`;
                }
            },
        });
    }
}
exports.default = ExecutedFunction;
