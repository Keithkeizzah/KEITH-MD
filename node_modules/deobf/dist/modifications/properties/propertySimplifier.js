"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const modification_1 = __importDefault(require("../../modification"));
const Shift = __importStar(require("shift-ast"));
const shift_validator_1 = __importDefault(require("shift-validator"));
const traverse_1 = require("../../helpers/traverse");
const traversalHelper_1 = __importDefault(require("../../helpers/traversalHelper"));
class PropertySimplifier extends modification_1.default {
    /**
     * Creates a new modification.
     * @param ast The AST.
     */
    constructor(ast) {
        super("Simplify Properties", ast);
    }
    /**
     * Executes the modification.
     */
    execute() {
        this.simplifyComputedMembers(this.ast);
    }
    /**
     * Simplifies all computed members to static members within a given node.
     * @param node The AST node.
     */
    simplifyComputedMembers(node) {
        const self = this;
        traverse_1.traverse(node, {
            enter(node, parent) {
                if (self.isStringComputedMember(node)) {
                    const replacement = new Shift.StaticMemberExpression({
                        object: node.object,
                        property: node.expression.value,
                    });
                    self.simplifyComputedMembers(replacement);
                    if (shift_validator_1.default(replacement)) {
                        traversalHelper_1.default.replaceNode(parent, node, replacement);
                    }
                }
            },
        });
    }
    /**
     * Returns whether a node is a computed member expression with a string property
     * and should be converted to a static member expression.
     * @param node The AST node.
     */
    isStringComputedMember(node) {
        return (node.object &&
            /.*Expression/.test(node.object.type) &&
            node.expression != null &&
            node.expression.type == "LiteralStringExpression");
    }
}
exports.default = PropertySimplifier;
