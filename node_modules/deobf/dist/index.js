"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deobfuscate = void 0;
const shift_parser_1 = __importDefault(require("shift-parser"));
const shift_codegen_1 = __importStar(require("shift-codegen"));
const proxyRemover_1 = __importDefault(require("./modifications/proxies/proxyRemover"));
const expressionSimplifier_1 = __importDefault(require("./modifications/expressions/expressionSimplifier"));
const arrayUnpacker_1 = __importDefault(require("./modifications/arrays/arrayUnpacker"));
const propertySimplifier_1 = __importDefault(require("./modifications/properties/propertySimplifier"));
const cleanupHelper_1 = __importDefault(require("./helpers/cleanupHelper"));
const variableRenamer_1 = __importDefault(require("./modifications/renaming/variableRenamer"));
const functionExecutor_1 = __importDefault(require("./modifications/execution/functionExecutor"));
function deobfuscate(source, config = {}) {
    const ast = shift_parser_1.default(source);
    const modifications = [];
    modifications.push(new functionExecutor_1.default(ast));
    if (config.replaceProxyFunctions) {
        modifications.push(new proxyRemover_1.default(ast, config.removeProxyFunctions || false));
    }
    if (config.simplifyExpressions) {
        modifications.push(new expressionSimplifier_1.default(ast));
    }
    if (config.unpackArrays) {
        modifications.push(new arrayUnpacker_1.default(ast, config.removeArrays || false));
    }
    if (config.simplifyExpressions) {
        modifications.push(new expressionSimplifier_1.default(ast));
    }
    if (config.simplifyProperties) {
        modifications.push(new propertySimplifier_1.default(ast));
    }
    if (config.renameHexIdentifiers) {
        modifications.push(new variableRenamer_1.default(ast));
    }
    for (const modification of modifications) {
        modification.execute();
    }
    cleanupHelper_1.default.cleanup(ast);
    const output = config.beautify
        ? shift_codegen_1.default(ast, new shift_codegen_1.FormattedCodeGen())
        : shift_codegen_1.default(ast);
    return output;
}
exports.deobfuscate = deobfuscate;
