export var __esModule: boolean;
declare namespace _default {
    namespace ArrayAssignmentTarget {
        const typeName: string;
        const fields: any;
    }
    namespace ArrayBinding {
        const typeName_1: string;
        export { typeName_1 as typeName };
        const fields_1: any;
        export { fields_1 as fields };
    }
    namespace ArrayExpression {
        const typeName_2: string;
        export { typeName_2 as typeName };
        const fields_2: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_2 as fields };
    }
    namespace ArrowExpression {
        const typeName_3: string;
        export { typeName_3 as typeName };
        const fields_3: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_3 as fields };
    }
    namespace AssignmentExpression {
        const typeName_4: string;
        export { typeName_4 as typeName };
        const fields_4: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_4 as fields };
    }
    namespace AssignmentTargetIdentifier {
        const typeName_5: string;
        export { typeName_5 as typeName };
        const fields_5: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_5 as fields };
    }
    namespace AssignmentTargetPropertyIdentifier {
        const typeName_6: string;
        export { typeName_6 as typeName };
        const fields_6: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_6 as fields };
    }
    namespace AssignmentTargetPropertyProperty {
        const typeName_7: string;
        export { typeName_7 as typeName };
        const fields_7: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_7 as fields };
    }
    namespace AssignmentTargetWithDefault {
        const typeName_8: string;
        export { typeName_8 as typeName };
        const fields_8: any;
        export { fields_8 as fields };
    }
    namespace AwaitExpression {
        const typeName_9: string;
        export { typeName_9 as typeName };
        const fields_9: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_9 as fields };
    }
    namespace BinaryExpression {
        const typeName_10: string;
        export { typeName_10 as typeName };
        const fields_10: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                values: string[];
            };
            value?: undefined;
        })[];
        export { fields_10 as fields };
    }
    namespace BindingIdentifier {
        const typeName_11: string;
        export { typeName_11 as typeName };
        const fields_11: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_11 as fields };
    }
    namespace BindingPropertyIdentifier {
        const typeName_12: string;
        export { typeName_12 as typeName };
        const fields_12: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_12 as fields };
    }
    namespace BindingPropertyProperty {
        const typeName_13: string;
        export { typeName_13 as typeName };
        const fields_13: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_13 as fields };
    }
    namespace BindingWithDefault {
        const typeName_14: string;
        export { typeName_14 as typeName };
        const fields_14: any;
        export { fields_14 as fields };
    }
    namespace Block {
        const typeName_15: string;
        export { typeName_15 as typeName };
        const fields_15: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_15 as fields };
    }
    namespace BlockStatement {
        const typeName_16: string;
        export { typeName_16 as typeName };
        const fields_16: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_16 as fields };
    }
    namespace BreakStatement {
        const typeName_17: string;
        export { typeName_17 as typeName };
        const fields_17: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_17 as fields };
    }
    namespace CallExpression {
        const typeName_18: string;
        export { typeName_18 as typeName };
        const fields_18: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_18 as fields };
    }
    namespace CatchClause {
        const typeName_19: string;
        export { typeName_19 as typeName };
        const fields_19: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_19 as fields };
    }
    namespace ClassDeclaration {
        const typeName_20: string;
        export { typeName_20 as typeName };
        const fields_20: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_20 as fields };
    }
    namespace ClassElement {
        const typeName_21: string;
        export { typeName_21 as typeName };
        const fields_21: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_21 as fields };
    }
    namespace ClassExpression {
        const typeName_22: string;
        export { typeName_22 as typeName };
        const fields_22: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_22 as fields };
    }
    namespace CompoundAssignmentExpression {
        const typeName_23: string;
        export { typeName_23 as typeName };
        const fields_23: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                values: string[];
            };
            value?: undefined;
        })[];
        export { fields_23 as fields };
    }
    namespace ComputedMemberAssignmentTarget {
        const typeName_24: string;
        export { typeName_24 as typeName };
        const fields_24: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_24 as fields };
    }
    namespace ComputedMemberExpression {
        const typeName_25: string;
        export { typeName_25 as typeName };
        const fields_25: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_25 as fields };
    }
    namespace ComputedPropertyName {
        const typeName_26: string;
        export { typeName_26 as typeName };
        const fields_26: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_26 as fields };
    }
    namespace ConditionalExpression {
        const typeName_27: string;
        export { typeName_27 as typeName };
        const fields_27: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_27 as fields };
    }
    namespace ContinueStatement {
        const typeName_28: string;
        export { typeName_28 as typeName };
        const fields_28: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_28 as fields };
    }
    namespace DataProperty {
        const typeName_29: string;
        export { typeName_29 as typeName };
        const fields_29: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_29 as fields };
    }
    namespace DebuggerStatement {
        const typeName_30: string;
        export { typeName_30 as typeName };
        const fields_30: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_30 as fields };
    }
    namespace Directive {
        const typeName_31: string;
        export { typeName_31 as typeName };
        const fields_31: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_31 as fields };
    }
    namespace DoWhileStatement {
        const typeName_32: string;
        export { typeName_32 as typeName };
        const fields_32: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_32 as fields };
    }
    namespace EmptyStatement {
        const typeName_33: string;
        export { typeName_33 as typeName };
        const fields_33: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_33 as fields };
    }
    namespace Export {
        const typeName_34: string;
        export { typeName_34 as typeName };
        const fields_34: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_34 as fields };
    }
    namespace ExportAllFrom {
        const typeName_35: string;
        export { typeName_35 as typeName };
        const fields_35: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_35 as fields };
    }
    namespace ExportDefault {
        const typeName_36: string;
        export { typeName_36 as typeName };
        const fields_36: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_36 as fields };
    }
    namespace ExportFrom {
        const typeName_37: string;
        export { typeName_37 as typeName };
        const fields_37: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_37 as fields };
    }
    namespace ExportFromSpecifier {
        const typeName_38: string;
        export { typeName_38 as typeName };
        const fields_38: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_38 as fields };
    }
    namespace ExportLocalSpecifier {
        const typeName_39: string;
        export { typeName_39 as typeName };
        const fields_39: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_39 as fields };
    }
    namespace ExportLocals {
        const typeName_40: string;
        export { typeName_40 as typeName };
        const fields_40: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_40 as fields };
    }
    namespace ExpressionStatement {
        const typeName_41: string;
        export { typeName_41 as typeName };
        const fields_41: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_41 as fields };
    }
    namespace ForAwaitStatement {
        const typeName_42: string;
        export { typeName_42 as typeName };
        const fields_42: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_42 as fields };
    }
    namespace ForInStatement {
        const typeName_43: string;
        export { typeName_43 as typeName };
        const fields_43: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_43 as fields };
    }
    namespace ForOfStatement {
        const typeName_44: string;
        export { typeName_44 as typeName };
        const fields_44: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_44 as fields };
    }
    namespace ForStatement {
        const typeName_45: string;
        export { typeName_45 as typeName };
        const fields_45: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_45 as fields };
    }
    namespace FormalParameters {
        const typeName_46: string;
        export { typeName_46 as typeName };
        const fields_46: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_46 as fields };
    }
    namespace FunctionBody {
        const typeName_47: string;
        export { typeName_47 as typeName };
        const fields_47: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_47 as fields };
    }
    namespace FunctionDeclaration {
        const typeName_48: string;
        export { typeName_48 as typeName };
        const fields_48: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_48 as fields };
    }
    namespace FunctionExpression {
        const typeName_49: string;
        export { typeName_49 as typeName };
        const fields_49: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_49 as fields };
    }
    namespace Getter {
        const typeName_50: string;
        export { typeName_50 as typeName };
        const fields_50: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_50 as fields };
    }
    namespace IdentifierExpression {
        const typeName_51: string;
        export { typeName_51 as typeName };
        const fields_51: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_51 as fields };
    }
    namespace IfStatement {
        const typeName_52: string;
        export { typeName_52 as typeName };
        const fields_52: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_52 as fields };
    }
    namespace Import {
        const typeName_53: string;
        export { typeName_53 as typeName };
        const fields_53: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_53 as fields };
    }
    namespace ImportNamespace {
        const typeName_54: string;
        export { typeName_54 as typeName };
        const fields_54: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_54 as fields };
    }
    namespace ImportSpecifier {
        const typeName_55: string;
        export { typeName_55 as typeName };
        const fields_55: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_55 as fields };
    }
    namespace LabeledStatement {
        const typeName_56: string;
        export { typeName_56 as typeName };
        const fields_56: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_56 as fields };
    }
    namespace LiteralBooleanExpression {
        const typeName_57: string;
        export { typeName_57 as typeName };
        const fields_57: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_57 as fields };
    }
    namespace LiteralInfinityExpression {
        const typeName_58: string;
        export { typeName_58 as typeName };
        const fields_58: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_58 as fields };
    }
    namespace LiteralNullExpression {
        const typeName_59: string;
        export { typeName_59 as typeName };
        const fields_59: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_59 as fields };
    }
    namespace LiteralNumericExpression {
        const typeName_60: string;
        export { typeName_60 as typeName };
        const fields_60: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_60 as fields };
    }
    namespace LiteralRegExpExpression {
        const typeName_61: string;
        export { typeName_61 as typeName };
        const fields_61: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_61 as fields };
    }
    namespace LiteralStringExpression {
        const typeName_62: string;
        export { typeName_62 as typeName };
        const fields_62: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_62 as fields };
    }
    namespace Method {
        const typeName_63: string;
        export { typeName_63 as typeName };
        const fields_63: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_63 as fields };
    }
    namespace Module {
        const typeName_64: string;
        export { typeName_64 as typeName };
        const fields_64: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_64 as fields };
    }
    namespace NewExpression {
        const typeName_65: string;
        export { typeName_65 as typeName };
        const fields_65: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_65 as fields };
    }
    namespace NewTargetExpression {
        const typeName_66: string;
        export { typeName_66 as typeName };
        const fields_66: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_66 as fields };
    }
    namespace ObjectAssignmentTarget {
        const typeName_67: string;
        export { typeName_67 as typeName };
        const fields_67: any;
        export { fields_67 as fields };
    }
    namespace ObjectBinding {
        const typeName_68: string;
        export { typeName_68 as typeName };
        const fields_68: any;
        export { fields_68 as fields };
    }
    namespace ObjectExpression {
        const typeName_69: string;
        export { typeName_69 as typeName };
        const fields_69: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_69 as fields };
    }
    namespace ReturnStatement {
        const typeName_70: string;
        export { typeName_70 as typeName };
        const fields_70: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_70 as fields };
    }
    namespace Script {
        const typeName_71: string;
        export { typeName_71 as typeName };
        const fields_71: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_71 as fields };
    }
    namespace Setter {
        const typeName_72: string;
        export { typeName_72 as typeName };
        const fields_72: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_72 as fields };
    }
    namespace ShorthandProperty {
        const typeName_73: string;
        export { typeName_73 as typeName };
        const fields_73: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_73 as fields };
    }
    namespace SpreadElement {
        const typeName_74: string;
        export { typeName_74 as typeName };
        const fields_74: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_74 as fields };
    }
    namespace SpreadProperty {
        const typeName_75: string;
        export { typeName_75 as typeName };
        const fields_75: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_75 as fields };
    }
    namespace StaticMemberAssignmentTarget {
        const typeName_76: string;
        export { typeName_76 as typeName };
        const fields_76: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_76 as fields };
    }
    namespace StaticMemberExpression {
        const typeName_77: string;
        export { typeName_77 as typeName };
        const fields_77: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_77 as fields };
    }
    namespace StaticPropertyName {
        const typeName_78: string;
        export { typeName_78 as typeName };
        const fields_78: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_78 as fields };
    }
    namespace Super {
        const typeName_79: string;
        export { typeName_79 as typeName };
        const fields_79: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_79 as fields };
    }
    namespace SwitchCase {
        const typeName_80: string;
        export { typeName_80 as typeName };
        const fields_80: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_80 as fields };
    }
    namespace SwitchDefault {
        const typeName_81: string;
        export { typeName_81 as typeName };
        const fields_81: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_81 as fields };
    }
    namespace SwitchStatement {
        const typeName_82: string;
        export { typeName_82 as typeName };
        const fields_82: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_82 as fields };
    }
    namespace SwitchStatementWithDefault {
        const typeName_83: string;
        export { typeName_83 as typeName };
        const fields_83: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_83 as fields };
    }
    namespace TemplateElement {
        const typeName_84: string;
        export { typeName_84 as typeName };
        const fields_84: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_84 as fields };
    }
    namespace TemplateExpression {
        const typeName_85: string;
        export { typeName_85 as typeName };
        const fields_85: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_85 as fields };
    }
    namespace ThisExpression {
        const typeName_86: string;
        export { typeName_86 as typeName };
        const fields_86: {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        }[];
        export { fields_86 as fields };
    }
    namespace ThrowStatement {
        const typeName_87: string;
        export { typeName_87 as typeName };
        const fields_87: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_87 as fields };
    }
    namespace TryCatchStatement {
        const typeName_88: string;
        export { typeName_88 as typeName };
        const fields_88: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_88 as fields };
    }
    namespace TryFinallyStatement {
        const typeName_89: string;
        export { typeName_89 as typeName };
        const fields_89: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_89 as fields };
    }
    namespace UnaryExpression {
        const typeName_90: string;
        export { typeName_90 as typeName };
        const fields_90: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                values: string[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_90 as fields };
    }
    namespace UpdateExpression {
        const typeName_91: string;
        export { typeName_91 as typeName };
        const fields_91: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
            };
            value?: undefined;
        })[];
        export { fields_91 as fields };
    }
    namespace VariableDeclaration {
        const typeName_92: string;
        export { typeName_92 as typeName };
        const fields_92: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                values: string[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_92 as fields };
    }
    namespace VariableDeclarationStatement {
        const typeName_93: string;
        export { typeName_93 as typeName };
        const fields_93: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {};
            value?: undefined;
        })[];
        export { fields_93 as fields };
    }
    namespace VariableDeclarator {
        const typeName_94: string;
        export { typeName_94 as typeName };
        const fields_94: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_94 as fields };
    }
    namespace WhileStatement {
        const typeName_95: string;
        export { typeName_95 as typeName };
        const fields_95: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_95 as fields };
    }
    namespace WithStatement {
        const typeName_96: string;
        export { typeName_96 as typeName };
        const fields_96: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_96 as fields };
    }
    namespace YieldExpression {
        const typeName_97: string;
        export { typeName_97 as typeName };
        const fields_97: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value?: undefined;
        })[];
        export { fields_97 as fields };
    }
    namespace YieldGeneratorExpression {
        const typeName_98: string;
        export { typeName_98 as typeName };
        const fields_98: ({
            name: string;
            type: {
                typeName: string;
                argument: any;
            };
            value: string;
        } | {
            name: string;
            type: {
                typeName: string;
                arguments: never[];
            };
            value?: undefined;
        })[];
        export { fields_98 as fields };
    }
}
export default _default;
