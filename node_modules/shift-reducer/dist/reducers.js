/*
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThunkedOrReducer = exports.OrReducer = exports.ThunkedAndReducer = exports.AndReducer = exports.ThunkedConcatReducer = exports.ConcatReducer = exports.ThunkedPlusReducer = exports.PlusReducer = undefined;

var _monoidalReducer = require('./monoidal-reducer.js');

var _monoidalReducer2 = _interopRequireDefault(_monoidalReducer);

var _thunkedMonoidalReducer = require('./thunked-monoidal-reducer.js');

var _thunkedMonoidalReducer2 = _interopRequireDefault(_thunkedMonoidalReducer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PlusMonoid = {
  empty: function empty() {
    return 0;
  },
  concat: function concat(a, b) {
    return a + b;
  }
};

var ConcatMonoid = {
  empty: function empty() {
    return [];
  },
  concat: function concat(a, b) {
    return a.concat(b);
  }
};

var AndMonoid = {
  empty: function empty() {
    return true;
  },
  concat: function concat(a, b) {
    return a && b;
  },
  concatThunk: function concatThunk(a, b) {
    return a && b();
  }
};

var OrMonoid = {
  empty: function empty() {
    return false;
  },
  concat: function concat(a, b) {
    return a || b;
  },
  concatThunk: function concatThunk(a, b) {
    return a || b();
  }
};

var PlusReducer = exports.PlusReducer = function (_MonoidalReducer) {
  _inherits(PlusReducer, _MonoidalReducer);

  function PlusReducer() {
    _classCallCheck(this, PlusReducer);

    return _possibleConstructorReturn(this, (PlusReducer.__proto__ || Object.getPrototypeOf(PlusReducer)).call(this, PlusMonoid));
  }

  return PlusReducer;
}(_monoidalReducer2.default);

var ThunkedPlusReducer = exports.ThunkedPlusReducer = function (_ThunkedMonoidalReduc) {
  _inherits(ThunkedPlusReducer, _ThunkedMonoidalReduc);

  function ThunkedPlusReducer() {
    _classCallCheck(this, ThunkedPlusReducer);

    return _possibleConstructorReturn(this, (ThunkedPlusReducer.__proto__ || Object.getPrototypeOf(ThunkedPlusReducer)).call(this, PlusMonoid));
  }

  return ThunkedPlusReducer;
}(_thunkedMonoidalReducer2.default);

var ConcatReducer = exports.ConcatReducer = function (_MonoidalReducer2) {
  _inherits(ConcatReducer, _MonoidalReducer2);

  function ConcatReducer() {
    _classCallCheck(this, ConcatReducer);

    return _possibleConstructorReturn(this, (ConcatReducer.__proto__ || Object.getPrototypeOf(ConcatReducer)).call(this, ConcatMonoid));
  }

  return ConcatReducer;
}(_monoidalReducer2.default);

var ThunkedConcatReducer = exports.ThunkedConcatReducer = function (_ThunkedMonoidalReduc2) {
  _inherits(ThunkedConcatReducer, _ThunkedMonoidalReduc2);

  function ThunkedConcatReducer() {
    _classCallCheck(this, ThunkedConcatReducer);

    return _possibleConstructorReturn(this, (ThunkedConcatReducer.__proto__ || Object.getPrototypeOf(ThunkedConcatReducer)).call(this, ConcatMonoid));
  }

  return ThunkedConcatReducer;
}(_thunkedMonoidalReducer2.default);

var AndReducer = exports.AndReducer = function (_MonoidalReducer3) {
  _inherits(AndReducer, _MonoidalReducer3);

  function AndReducer() {
    _classCallCheck(this, AndReducer);

    return _possibleConstructorReturn(this, (AndReducer.__proto__ || Object.getPrototypeOf(AndReducer)).call(this, AndMonoid));
  }

  return AndReducer;
}(_monoidalReducer2.default);

var ThunkedAndReducer = exports.ThunkedAndReducer = function (_ThunkedMonoidalReduc3) {
  _inherits(ThunkedAndReducer, _ThunkedMonoidalReduc3);

  function ThunkedAndReducer() {
    _classCallCheck(this, ThunkedAndReducer);

    return _possibleConstructorReturn(this, (ThunkedAndReducer.__proto__ || Object.getPrototypeOf(ThunkedAndReducer)).call(this, AndMonoid));
  }

  return ThunkedAndReducer;
}(_thunkedMonoidalReducer2.default);

var OrReducer = exports.OrReducer = function (_MonoidalReducer4) {
  _inherits(OrReducer, _MonoidalReducer4);

  function OrReducer() {
    _classCallCheck(this, OrReducer);

    return _possibleConstructorReturn(this, (OrReducer.__proto__ || Object.getPrototypeOf(OrReducer)).call(this, OrMonoid));
  }

  return OrReducer;
}(_monoidalReducer2.default);

var ThunkedOrReducer = exports.ThunkedOrReducer = function (_ThunkedMonoidalReduc4) {
  _inherits(ThunkedOrReducer, _ThunkedMonoidalReduc4);

  function ThunkedOrReducer() {
    _classCallCheck(this, ThunkedOrReducer);

    return _possibleConstructorReturn(this, (ThunkedOrReducer.__proto__ || Object.getPrototypeOf(ThunkedOrReducer)).call(this, OrMonoid));
  }

  return ThunkedOrReducer;
}(_thunkedMonoidalReducer2.default);