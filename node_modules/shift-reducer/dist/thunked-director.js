"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.thunkedReduce = thunkedReduce;
// Generated by generate-director.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var director = {
  ArrayAssignmentTarget: function ArrayAssignmentTarget(reducer, node) {
    var _this = this;

    return reducer.reduceArrayAssignmentTarget(node, { elements: node.elements.map(function (v) {
        return v && function () {
          return _this[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this[node.rest.type](reducer, node.rest);
      } });
  },
  ArrayBinding: function ArrayBinding(reducer, node) {
    var _this2 = this;

    return reducer.reduceArrayBinding(node, { elements: node.elements.map(function (v) {
        return v && function () {
          return _this2[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this2[node.rest.type](reducer, node.rest);
      } });
  },
  ArrayExpression: function ArrayExpression(reducer, node) {
    var _this3 = this;

    return reducer.reduceArrayExpression(node, { elements: node.elements.map(function (v) {
        return v && function () {
          return _this3[v.type](reducer, v);
        };
      }) });
  },
  ArrowExpression: function ArrowExpression(reducer, node) {
    var _this4 = this;

    return reducer.reduceArrowExpression(node, { params: function params() {
        return _this4.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this4[node.body.type](reducer, node.body);
      } });
  },
  AssignmentExpression: function AssignmentExpression(reducer, node) {
    var _this5 = this;

    return reducer.reduceAssignmentExpression(node, { binding: function binding() {
        return _this5[node.binding.type](reducer, node.binding);
      }, expression: function expression() {
        return _this5[node.expression.type](reducer, node.expression);
      } });
  },
  AssignmentTargetIdentifier: function AssignmentTargetIdentifier(reducer, node) {
    return reducer.reduceAssignmentTargetIdentifier(node);
  },
  AssignmentTargetPropertyIdentifier: function AssignmentTargetPropertyIdentifier(reducer, node) {
    var _this6 = this;

    return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: function binding() {
        return _this6.AssignmentTargetIdentifier(reducer, node.binding);
      }, init: node.init && function () {
        return _this6[node.init.type](reducer, node.init);
      } });
  },
  AssignmentTargetPropertyProperty: function AssignmentTargetPropertyProperty(reducer, node) {
    var _this7 = this;

    return reducer.reduceAssignmentTargetPropertyProperty(node, { name: function name() {
        return _this7[node.name.type](reducer, node.name);
      }, binding: function binding() {
        return _this7[node.binding.type](reducer, node.binding);
      } });
  },
  AssignmentTargetWithDefault: function AssignmentTargetWithDefault(reducer, node) {
    var _this8 = this;

    return reducer.reduceAssignmentTargetWithDefault(node, { binding: function binding() {
        return _this8[node.binding.type](reducer, node.binding);
      }, init: function init() {
        return _this8[node.init.type](reducer, node.init);
      } });
  },
  AwaitExpression: function AwaitExpression(reducer, node) {
    var _this9 = this;

    return reducer.reduceAwaitExpression(node, { expression: function expression() {
        return _this9[node.expression.type](reducer, node.expression);
      } });
  },
  BinaryExpression: function BinaryExpression(reducer, node) {
    var _this10 = this;

    return reducer.reduceBinaryExpression(node, { left: function left() {
        return _this10[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this10[node.right.type](reducer, node.right);
      } });
  },
  BindingIdentifier: function BindingIdentifier(reducer, node) {
    return reducer.reduceBindingIdentifier(node);
  },
  BindingPropertyIdentifier: function BindingPropertyIdentifier(reducer, node) {
    var _this11 = this;

    return reducer.reduceBindingPropertyIdentifier(node, { binding: function binding() {
        return _this11.BindingIdentifier(reducer, node.binding);
      }, init: node.init && function () {
        return _this11[node.init.type](reducer, node.init);
      } });
  },
  BindingPropertyProperty: function BindingPropertyProperty(reducer, node) {
    var _this12 = this;

    return reducer.reduceBindingPropertyProperty(node, { name: function name() {
        return _this12[node.name.type](reducer, node.name);
      }, binding: function binding() {
        return _this12[node.binding.type](reducer, node.binding);
      } });
  },
  BindingWithDefault: function BindingWithDefault(reducer, node) {
    var _this13 = this;

    return reducer.reduceBindingWithDefault(node, { binding: function binding() {
        return _this13[node.binding.type](reducer, node.binding);
      }, init: function init() {
        return _this13[node.init.type](reducer, node.init);
      } });
  },
  Block: function Block(reducer, node) {
    var _this14 = this;

    return reducer.reduceBlock(node, { statements: node.statements.map(function (v) {
        return function () {
          return _this14[v.type](reducer, v);
        };
      }) });
  },
  BlockStatement: function BlockStatement(reducer, node) {
    var _this15 = this;

    return reducer.reduceBlockStatement(node, { block: function block() {
        return _this15.Block(reducer, node.block);
      } });
  },
  BreakStatement: function BreakStatement(reducer, node) {
    return reducer.reduceBreakStatement(node);
  },
  CallExpression: function CallExpression(reducer, node) {
    var _this16 = this;

    return reducer.reduceCallExpression(node, { callee: function callee() {
        return _this16[node.callee.type](reducer, node.callee);
      }, arguments: node.arguments.map(function (v) {
        return function () {
          return _this16[v.type](reducer, v);
        };
      }) });
  },
  CatchClause: function CatchClause(reducer, node) {
    var _this17 = this;

    return reducer.reduceCatchClause(node, { binding: function binding() {
        return _this17[node.binding.type](reducer, node.binding);
      }, body: function body() {
        return _this17.Block(reducer, node.body);
      } });
  },
  ClassDeclaration: function ClassDeclaration(reducer, node) {
    var _this18 = this;

    return reducer.reduceClassDeclaration(node, { name: function name() {
        return _this18.BindingIdentifier(reducer, node.name);
      }, super: node.super && function () {
        return _this18[node.super.type](reducer, node.super);
      }, elements: node.elements.map(function (v) {
        return function () {
          return _this18.ClassElement(reducer, v);
        };
      }) });
  },
  ClassElement: function ClassElement(reducer, node) {
    var _this19 = this;

    return reducer.reduceClassElement(node, { method: function method() {
        return _this19[node.method.type](reducer, node.method);
      } });
  },
  ClassExpression: function ClassExpression(reducer, node) {
    var _this20 = this;

    return reducer.reduceClassExpression(node, { name: node.name && function () {
        return _this20.BindingIdentifier(reducer, node.name);
      }, super: node.super && function () {
        return _this20[node.super.type](reducer, node.super);
      }, elements: node.elements.map(function (v) {
        return function () {
          return _this20.ClassElement(reducer, v);
        };
      }) });
  },
  CompoundAssignmentExpression: function CompoundAssignmentExpression(reducer, node) {
    var _this21 = this;

    return reducer.reduceCompoundAssignmentExpression(node, { binding: function binding() {
        return _this21[node.binding.type](reducer, node.binding);
      }, expression: function expression() {
        return _this21[node.expression.type](reducer, node.expression);
      } });
  },
  ComputedMemberAssignmentTarget: function ComputedMemberAssignmentTarget(reducer, node) {
    var _this22 = this;

    return reducer.reduceComputedMemberAssignmentTarget(node, { object: function object() {
        return _this22[node.object.type](reducer, node.object);
      }, expression: function expression() {
        return _this22[node.expression.type](reducer, node.expression);
      } });
  },
  ComputedMemberExpression: function ComputedMemberExpression(reducer, node) {
    var _this23 = this;

    return reducer.reduceComputedMemberExpression(node, { object: function object() {
        return _this23[node.object.type](reducer, node.object);
      }, expression: function expression() {
        return _this23[node.expression.type](reducer, node.expression);
      } });
  },
  ComputedPropertyName: function ComputedPropertyName(reducer, node) {
    var _this24 = this;

    return reducer.reduceComputedPropertyName(node, { expression: function expression() {
        return _this24[node.expression.type](reducer, node.expression);
      } });
  },
  ConditionalExpression: function ConditionalExpression(reducer, node) {
    var _this25 = this;

    return reducer.reduceConditionalExpression(node, { test: function test() {
        return _this25[node.test.type](reducer, node.test);
      }, consequent: function consequent() {
        return _this25[node.consequent.type](reducer, node.consequent);
      }, alternate: function alternate() {
        return _this25[node.alternate.type](reducer, node.alternate);
      } });
  },
  ContinueStatement: function ContinueStatement(reducer, node) {
    return reducer.reduceContinueStatement(node);
  },
  DataProperty: function DataProperty(reducer, node) {
    var _this26 = this;

    return reducer.reduceDataProperty(node, { name: function name() {
        return _this26[node.name.type](reducer, node.name);
      }, expression: function expression() {
        return _this26[node.expression.type](reducer, node.expression);
      } });
  },
  DebuggerStatement: function DebuggerStatement(reducer, node) {
    return reducer.reduceDebuggerStatement(node);
  },
  Directive: function Directive(reducer, node) {
    return reducer.reduceDirective(node);
  },
  DoWhileStatement: function DoWhileStatement(reducer, node) {
    var _this27 = this;

    return reducer.reduceDoWhileStatement(node, { body: function body() {
        return _this27[node.body.type](reducer, node.body);
      }, test: function test() {
        return _this27[node.test.type](reducer, node.test);
      } });
  },
  EmptyStatement: function EmptyStatement(reducer, node) {
    return reducer.reduceEmptyStatement(node);
  },
  Export: function Export(reducer, node) {
    var _this28 = this;

    return reducer.reduceExport(node, { declaration: function declaration() {
        return _this28[node.declaration.type](reducer, node.declaration);
      } });
  },
  ExportAllFrom: function ExportAllFrom(reducer, node) {
    return reducer.reduceExportAllFrom(node);
  },
  ExportDefault: function ExportDefault(reducer, node) {
    var _this29 = this;

    return reducer.reduceExportDefault(node, { body: function body() {
        return _this29[node.body.type](reducer, node.body);
      } });
  },
  ExportFrom: function ExportFrom(reducer, node) {
    var _this30 = this;

    return reducer.reduceExportFrom(node, { namedExports: node.namedExports.map(function (v) {
        return function () {
          return _this30.ExportFromSpecifier(reducer, v);
        };
      }) });
  },
  ExportFromSpecifier: function ExportFromSpecifier(reducer, node) {
    return reducer.reduceExportFromSpecifier(node);
  },
  ExportLocalSpecifier: function ExportLocalSpecifier(reducer, node) {
    var _this31 = this;

    return reducer.reduceExportLocalSpecifier(node, { name: function name() {
        return _this31.IdentifierExpression(reducer, node.name);
      } });
  },
  ExportLocals: function ExportLocals(reducer, node) {
    var _this32 = this;

    return reducer.reduceExportLocals(node, { namedExports: node.namedExports.map(function (v) {
        return function () {
          return _this32.ExportLocalSpecifier(reducer, v);
        };
      }) });
  },
  ExpressionStatement: function ExpressionStatement(reducer, node) {
    var _this33 = this;

    return reducer.reduceExpressionStatement(node, { expression: function expression() {
        return _this33[node.expression.type](reducer, node.expression);
      } });
  },
  ForAwaitStatement: function ForAwaitStatement(reducer, node) {
    var _this34 = this;

    return reducer.reduceForAwaitStatement(node, { left: function left() {
        return _this34[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this34[node.right.type](reducer, node.right);
      }, body: function body() {
        return _this34[node.body.type](reducer, node.body);
      } });
  },
  ForInStatement: function ForInStatement(reducer, node) {
    var _this35 = this;

    return reducer.reduceForInStatement(node, { left: function left() {
        return _this35[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this35[node.right.type](reducer, node.right);
      }, body: function body() {
        return _this35[node.body.type](reducer, node.body);
      } });
  },
  ForOfStatement: function ForOfStatement(reducer, node) {
    var _this36 = this;

    return reducer.reduceForOfStatement(node, { left: function left() {
        return _this36[node.left.type](reducer, node.left);
      }, right: function right() {
        return _this36[node.right.type](reducer, node.right);
      }, body: function body() {
        return _this36[node.body.type](reducer, node.body);
      } });
  },
  ForStatement: function ForStatement(reducer, node) {
    var _this37 = this;

    return reducer.reduceForStatement(node, { init: node.init && function () {
        return _this37[node.init.type](reducer, node.init);
      }, test: node.test && function () {
        return _this37[node.test.type](reducer, node.test);
      }, update: node.update && function () {
        return _this37[node.update.type](reducer, node.update);
      }, body: function body() {
        return _this37[node.body.type](reducer, node.body);
      } });
  },
  FormalParameters: function FormalParameters(reducer, node) {
    var _this38 = this;

    return reducer.reduceFormalParameters(node, { items: node.items.map(function (v) {
        return function () {
          return _this38[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this38[node.rest.type](reducer, node.rest);
      } });
  },
  FunctionBody: function FunctionBody(reducer, node) {
    var _this39 = this;

    return reducer.reduceFunctionBody(node, { directives: node.directives.map(function (v) {
        return function () {
          return _this39.Directive(reducer, v);
        };
      }), statements: node.statements.map(function (v) {
        return function () {
          return _this39[v.type](reducer, v);
        };
      }) });
  },
  FunctionDeclaration: function FunctionDeclaration(reducer, node) {
    var _this40 = this;

    return reducer.reduceFunctionDeclaration(node, { name: function name() {
        return _this40.BindingIdentifier(reducer, node.name);
      }, params: function params() {
        return _this40.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this40.FunctionBody(reducer, node.body);
      } });
  },
  FunctionExpression: function FunctionExpression(reducer, node) {
    var _this41 = this;

    return reducer.reduceFunctionExpression(node, { name: node.name && function () {
        return _this41.BindingIdentifier(reducer, node.name);
      }, params: function params() {
        return _this41.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this41.FunctionBody(reducer, node.body);
      } });
  },
  Getter: function Getter(reducer, node) {
    var _this42 = this;

    return reducer.reduceGetter(node, { name: function name() {
        return _this42[node.name.type](reducer, node.name);
      }, body: function body() {
        return _this42.FunctionBody(reducer, node.body);
      } });
  },
  IdentifierExpression: function IdentifierExpression(reducer, node) {
    return reducer.reduceIdentifierExpression(node);
  },
  IfStatement: function IfStatement(reducer, node) {
    var _this43 = this;

    return reducer.reduceIfStatement(node, { test: function test() {
        return _this43[node.test.type](reducer, node.test);
      }, consequent: function consequent() {
        return _this43[node.consequent.type](reducer, node.consequent);
      }, alternate: node.alternate && function () {
        return _this43[node.alternate.type](reducer, node.alternate);
      } });
  },
  Import: function Import(reducer, node) {
    var _this44 = this;

    return reducer.reduceImport(node, { defaultBinding: node.defaultBinding && function () {
        return _this44.BindingIdentifier(reducer, node.defaultBinding);
      }, namedImports: node.namedImports.map(function (v) {
        return function () {
          return _this44.ImportSpecifier(reducer, v);
        };
      }) });
  },
  ImportNamespace: function ImportNamespace(reducer, node) {
    var _this45 = this;

    return reducer.reduceImportNamespace(node, { defaultBinding: node.defaultBinding && function () {
        return _this45.BindingIdentifier(reducer, node.defaultBinding);
      }, namespaceBinding: function namespaceBinding() {
        return _this45.BindingIdentifier(reducer, node.namespaceBinding);
      } });
  },
  ImportSpecifier: function ImportSpecifier(reducer, node) {
    var _this46 = this;

    return reducer.reduceImportSpecifier(node, { binding: function binding() {
        return _this46.BindingIdentifier(reducer, node.binding);
      } });
  },
  LabeledStatement: function LabeledStatement(reducer, node) {
    var _this47 = this;

    return reducer.reduceLabeledStatement(node, { body: function body() {
        return _this47[node.body.type](reducer, node.body);
      } });
  },
  LiteralBooleanExpression: function LiteralBooleanExpression(reducer, node) {
    return reducer.reduceLiteralBooleanExpression(node);
  },
  LiteralInfinityExpression: function LiteralInfinityExpression(reducer, node) {
    return reducer.reduceLiteralInfinityExpression(node);
  },
  LiteralNullExpression: function LiteralNullExpression(reducer, node) {
    return reducer.reduceLiteralNullExpression(node);
  },
  LiteralNumericExpression: function LiteralNumericExpression(reducer, node) {
    return reducer.reduceLiteralNumericExpression(node);
  },
  LiteralRegExpExpression: function LiteralRegExpExpression(reducer, node) {
    return reducer.reduceLiteralRegExpExpression(node);
  },
  LiteralStringExpression: function LiteralStringExpression(reducer, node) {
    return reducer.reduceLiteralStringExpression(node);
  },
  Method: function Method(reducer, node) {
    var _this48 = this;

    return reducer.reduceMethod(node, { name: function name() {
        return _this48[node.name.type](reducer, node.name);
      }, params: function params() {
        return _this48.FormalParameters(reducer, node.params);
      }, body: function body() {
        return _this48.FunctionBody(reducer, node.body);
      } });
  },
  Module: function Module(reducer, node) {
    var _this49 = this;

    return reducer.reduceModule(node, { directives: node.directives.map(function (v) {
        return function () {
          return _this49.Directive(reducer, v);
        };
      }), items: node.items.map(function (v) {
        return function () {
          return _this49[v.type](reducer, v);
        };
      }) });
  },
  NewExpression: function NewExpression(reducer, node) {
    var _this50 = this;

    return reducer.reduceNewExpression(node, { callee: function callee() {
        return _this50[node.callee.type](reducer, node.callee);
      }, arguments: node.arguments.map(function (v) {
        return function () {
          return _this50[v.type](reducer, v);
        };
      }) });
  },
  NewTargetExpression: function NewTargetExpression(reducer, node) {
    return reducer.reduceNewTargetExpression(node);
  },
  ObjectAssignmentTarget: function ObjectAssignmentTarget(reducer, node) {
    var _this51 = this;

    return reducer.reduceObjectAssignmentTarget(node, { properties: node.properties.map(function (v) {
        return function () {
          return _this51[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this51[node.rest.type](reducer, node.rest);
      } });
  },
  ObjectBinding: function ObjectBinding(reducer, node) {
    var _this52 = this;

    return reducer.reduceObjectBinding(node, { properties: node.properties.map(function (v) {
        return function () {
          return _this52[v.type](reducer, v);
        };
      }), rest: node.rest && function () {
        return _this52[node.rest.type](reducer, node.rest);
      } });
  },
  ObjectExpression: function ObjectExpression(reducer, node) {
    var _this53 = this;

    return reducer.reduceObjectExpression(node, { properties: node.properties.map(function (v) {
        return function () {
          return _this53[v.type](reducer, v);
        };
      }) });
  },
  ReturnStatement: function ReturnStatement(reducer, node) {
    var _this54 = this;

    return reducer.reduceReturnStatement(node, { expression: node.expression && function () {
        return _this54[node.expression.type](reducer, node.expression);
      } });
  },
  Script: function Script(reducer, node) {
    var _this55 = this;

    return reducer.reduceScript(node, { directives: node.directives.map(function (v) {
        return function () {
          return _this55.Directive(reducer, v);
        };
      }), statements: node.statements.map(function (v) {
        return function () {
          return _this55[v.type](reducer, v);
        };
      }) });
  },
  Setter: function Setter(reducer, node) {
    var _this56 = this;

    return reducer.reduceSetter(node, { name: function name() {
        return _this56[node.name.type](reducer, node.name);
      }, param: function param() {
        return _this56[node.param.type](reducer, node.param);
      }, body: function body() {
        return _this56.FunctionBody(reducer, node.body);
      } });
  },
  ShorthandProperty: function ShorthandProperty(reducer, node) {
    var _this57 = this;

    return reducer.reduceShorthandProperty(node, { name: function name() {
        return _this57.IdentifierExpression(reducer, node.name);
      } });
  },
  SpreadElement: function SpreadElement(reducer, node) {
    var _this58 = this;

    return reducer.reduceSpreadElement(node, { expression: function expression() {
        return _this58[node.expression.type](reducer, node.expression);
      } });
  },
  SpreadProperty: function SpreadProperty(reducer, node) {
    var _this59 = this;

    return reducer.reduceSpreadProperty(node, { expression: function expression() {
        return _this59[node.expression.type](reducer, node.expression);
      } });
  },
  StaticMemberAssignmentTarget: function StaticMemberAssignmentTarget(reducer, node) {
    var _this60 = this;

    return reducer.reduceStaticMemberAssignmentTarget(node, { object: function object() {
        return _this60[node.object.type](reducer, node.object);
      } });
  },
  StaticMemberExpression: function StaticMemberExpression(reducer, node) {
    var _this61 = this;

    return reducer.reduceStaticMemberExpression(node, { object: function object() {
        return _this61[node.object.type](reducer, node.object);
      } });
  },
  StaticPropertyName: function StaticPropertyName(reducer, node) {
    return reducer.reduceStaticPropertyName(node);
  },
  Super: function Super(reducer, node) {
    return reducer.reduceSuper(node);
  },
  SwitchCase: function SwitchCase(reducer, node) {
    var _this62 = this;

    return reducer.reduceSwitchCase(node, { test: function test() {
        return _this62[node.test.type](reducer, node.test);
      }, consequent: node.consequent.map(function (v) {
        return function () {
          return _this62[v.type](reducer, v);
        };
      }) });
  },
  SwitchDefault: function SwitchDefault(reducer, node) {
    var _this63 = this;

    return reducer.reduceSwitchDefault(node, { consequent: node.consequent.map(function (v) {
        return function () {
          return _this63[v.type](reducer, v);
        };
      }) });
  },
  SwitchStatement: function SwitchStatement(reducer, node) {
    var _this64 = this;

    return reducer.reduceSwitchStatement(node, { discriminant: function discriminant() {
        return _this64[node.discriminant.type](reducer, node.discriminant);
      }, cases: node.cases.map(function (v) {
        return function () {
          return _this64.SwitchCase(reducer, v);
        };
      }) });
  },
  SwitchStatementWithDefault: function SwitchStatementWithDefault(reducer, node) {
    var _this65 = this;

    return reducer.reduceSwitchStatementWithDefault(node, { discriminant: function discriminant() {
        return _this65[node.discriminant.type](reducer, node.discriminant);
      }, preDefaultCases: node.preDefaultCases.map(function (v) {
        return function () {
          return _this65.SwitchCase(reducer, v);
        };
      }), defaultCase: function defaultCase() {
        return _this65.SwitchDefault(reducer, node.defaultCase);
      }, postDefaultCases: node.postDefaultCases.map(function (v) {
        return function () {
          return _this65.SwitchCase(reducer, v);
        };
      }) });
  },
  TemplateElement: function TemplateElement(reducer, node) {
    return reducer.reduceTemplateElement(node);
  },
  TemplateExpression: function TemplateExpression(reducer, node) {
    var _this66 = this;

    return reducer.reduceTemplateExpression(node, { tag: node.tag && function () {
        return _this66[node.tag.type](reducer, node.tag);
      }, elements: node.elements.map(function (v) {
        return function () {
          return _this66[v.type](reducer, v);
        };
      }) });
  },
  ThisExpression: function ThisExpression(reducer, node) {
    return reducer.reduceThisExpression(node);
  },
  ThrowStatement: function ThrowStatement(reducer, node) {
    var _this67 = this;

    return reducer.reduceThrowStatement(node, { expression: function expression() {
        return _this67[node.expression.type](reducer, node.expression);
      } });
  },
  TryCatchStatement: function TryCatchStatement(reducer, node) {
    var _this68 = this;

    return reducer.reduceTryCatchStatement(node, { body: function body() {
        return _this68.Block(reducer, node.body);
      }, catchClause: function catchClause() {
        return _this68.CatchClause(reducer, node.catchClause);
      } });
  },
  TryFinallyStatement: function TryFinallyStatement(reducer, node) {
    var _this69 = this;

    return reducer.reduceTryFinallyStatement(node, { body: function body() {
        return _this69.Block(reducer, node.body);
      }, catchClause: node.catchClause && function () {
        return _this69.CatchClause(reducer, node.catchClause);
      }, finalizer: function finalizer() {
        return _this69.Block(reducer, node.finalizer);
      } });
  },
  UnaryExpression: function UnaryExpression(reducer, node) {
    var _this70 = this;

    return reducer.reduceUnaryExpression(node, { operand: function operand() {
        return _this70[node.operand.type](reducer, node.operand);
      } });
  },
  UpdateExpression: function UpdateExpression(reducer, node) {
    var _this71 = this;

    return reducer.reduceUpdateExpression(node, { operand: function operand() {
        return _this71[node.operand.type](reducer, node.operand);
      } });
  },
  VariableDeclaration: function VariableDeclaration(reducer, node) {
    var _this72 = this;

    return reducer.reduceVariableDeclaration(node, { declarators: node.declarators.map(function (v) {
        return function () {
          return _this72.VariableDeclarator(reducer, v);
        };
      }) });
  },
  VariableDeclarationStatement: function VariableDeclarationStatement(reducer, node) {
    var _this73 = this;

    return reducer.reduceVariableDeclarationStatement(node, { declaration: function declaration() {
        return _this73.VariableDeclaration(reducer, node.declaration);
      } });
  },
  VariableDeclarator: function VariableDeclarator(reducer, node) {
    var _this74 = this;

    return reducer.reduceVariableDeclarator(node, { binding: function binding() {
        return _this74[node.binding.type](reducer, node.binding);
      }, init: node.init && function () {
        return _this74[node.init.type](reducer, node.init);
      } });
  },
  WhileStatement: function WhileStatement(reducer, node) {
    var _this75 = this;

    return reducer.reduceWhileStatement(node, { test: function test() {
        return _this75[node.test.type](reducer, node.test);
      }, body: function body() {
        return _this75[node.body.type](reducer, node.body);
      } });
  },
  WithStatement: function WithStatement(reducer, node) {
    var _this76 = this;

    return reducer.reduceWithStatement(node, { object: function object() {
        return _this76[node.object.type](reducer, node.object);
      }, body: function body() {
        return _this76[node.body.type](reducer, node.body);
      } });
  },
  YieldExpression: function YieldExpression(reducer, node) {
    var _this77 = this;

    return reducer.reduceYieldExpression(node, { expression: node.expression && function () {
        return _this77[node.expression.type](reducer, node.expression);
      } });
  },
  YieldGeneratorExpression: function YieldGeneratorExpression(reducer, node) {
    var _this78 = this;

    return reducer.reduceYieldGeneratorExpression(node, { expression: function expression() {
        return _this78[node.expression.type](reducer, node.expression);
      } });
  }
};

function thunkedReduce(reducer, node) {
  return director[node.type](reducer, node);
}