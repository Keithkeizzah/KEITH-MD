"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = thunkify;
// Generated by generate-thunkify.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function thunkify(reducer) {
  return {
    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, _ref) {
      var elements = _ref.elements,
          rest = _ref.rest;

      return reducer.reduceArrayAssignmentTarget(node, { elements: elements.map(function (n) {
          return n == null ? null : n();
        }), rest: rest == null ? null : rest() });
    },
    reduceArrayBinding: function reduceArrayBinding(node, _ref2) {
      var elements = _ref2.elements,
          rest = _ref2.rest;

      return reducer.reduceArrayBinding(node, { elements: elements.map(function (n) {
          return n == null ? null : n();
        }), rest: rest == null ? null : rest() });
    },
    reduceArrayExpression: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      return reducer.reduceArrayExpression(node, { elements: elements.map(function (n) {
          return n == null ? null : n();
        }) });
    },
    reduceArrowExpression: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      return reducer.reduceArrowExpression(node, { params: params(), body: body() });
    },
    reduceAssignmentExpression: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      return reducer.reduceAssignmentExpression(node, { binding: binding(), expression: expression() });
    },
    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node) {
      return reducer.reduceAssignmentTargetIdentifier(node);
    },
    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var binding = _ref6.binding,
          init = _ref6.init;

      return reducer.reduceAssignmentTargetPropertyIdentifier(node, { binding: binding(), init: init == null ? null : init() });
    },
    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      return reducer.reduceAssignmentTargetPropertyProperty(node, { name: name(), binding: binding() });
    },
    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      return reducer.reduceAssignmentTargetWithDefault(node, { binding: binding(), init: init() });
    },
    reduceAwaitExpression: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      return reducer.reduceAwaitExpression(node, { expression: expression() });
    },
    reduceBinaryExpression: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      return reducer.reduceBinaryExpression(node, { left: left(), right: right() });
    },
    reduceBindingIdentifier: function reduceBindingIdentifier(node) {
      return reducer.reduceBindingIdentifier(node);
    },
    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, _ref11) {
      var binding = _ref11.binding,
          init = _ref11.init;

      return reducer.reduceBindingPropertyIdentifier(node, { binding: binding(), init: init == null ? null : init() });
    },
    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      return reducer.reduceBindingPropertyProperty(node, { name: name(), binding: binding() });
    },
    reduceBindingWithDefault: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      return reducer.reduceBindingWithDefault(node, { binding: binding(), init: init() });
    },
    reduceBlock: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      return reducer.reduceBlock(node, { statements: statements.map(function (n) {
          return n();
        }) });
    },
    reduceBlockStatement: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      return reducer.reduceBlockStatement(node, { block: block() });
    },
    reduceBreakStatement: function reduceBreakStatement(node) {
      return reducer.reduceBreakStatement(node);
    },
    reduceCallExpression: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      return reducer.reduceCallExpression(node, { callee: callee(), arguments: _arguments.map(function (n) {
          return n();
        }) });
    },
    reduceCatchClause: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      return reducer.reduceCatchClause(node, { binding: binding(), body: body() });
    },
    reduceClassDeclaration: function reduceClassDeclaration(node, _ref18) {
      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      return reducer.reduceClassDeclaration(node, { name: name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {
          return n();
        }) });
    },
    reduceClassElement: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      return reducer.reduceClassElement(node, { method: method() });
    },
    reduceClassExpression: function reduceClassExpression(node, _ref20) {
      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      return reducer.reduceClassExpression(node, { name: name == null ? null : name(), super: _super == null ? null : _super(), elements: elements.map(function (n) {
          return n();
        }) });
    },
    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      return reducer.reduceCompoundAssignmentExpression(node, { binding: binding(), expression: expression() });
    },
    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      return reducer.reduceComputedMemberAssignmentTarget(node, { object: object(), expression: expression() });
    },
    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      return reducer.reduceComputedMemberExpression(node, { object: object(), expression: expression() });
    },
    reduceComputedPropertyName: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      return reducer.reduceComputedPropertyName(node, { expression: expression() });
    },
    reduceConditionalExpression: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      return reducer.reduceConditionalExpression(node, { test: test(), consequent: consequent(), alternate: alternate() });
    },
    reduceContinueStatement: function reduceContinueStatement(node) {
      return reducer.reduceContinueStatement(node);
    },
    reduceDataProperty: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      return reducer.reduceDataProperty(node, { name: name(), expression: expression() });
    },
    reduceDebuggerStatement: function reduceDebuggerStatement(node) {
      return reducer.reduceDebuggerStatement(node);
    },
    reduceDirective: function reduceDirective(node) {
      return reducer.reduceDirective(node);
    },
    reduceDoWhileStatement: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      return reducer.reduceDoWhileStatement(node, { body: body(), test: test() });
    },
    reduceEmptyStatement: function reduceEmptyStatement(node) {
      return reducer.reduceEmptyStatement(node);
    },
    reduceExport: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      return reducer.reduceExport(node, { declaration: declaration() });
    },
    reduceExportAllFrom: function reduceExportAllFrom(node) {
      return reducer.reduceExportAllFrom(node);
    },
    reduceExportDefault: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      return reducer.reduceExportDefault(node, { body: body() });
    },
    reduceExportFrom: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      return reducer.reduceExportFrom(node, { namedExports: namedExports.map(function (n) {
          return n();
        }) });
    },
    reduceExportFromSpecifier: function reduceExportFromSpecifier(node) {
      return reducer.reduceExportFromSpecifier(node);
    },
    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      return reducer.reduceExportLocalSpecifier(node, { name: name() });
    },
    reduceExportLocals: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      return reducer.reduceExportLocals(node, { namedExports: namedExports.map(function (n) {
          return n();
        }) });
    },
    reduceExpressionStatement: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      return reducer.reduceExpressionStatement(node, { expression: expression() });
    },
    reduceForAwaitStatement: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      return reducer.reduceForAwaitStatement(node, { left: left(), right: right(), body: body() });
    },
    reduceForInStatement: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      return reducer.reduceForInStatement(node, { left: left(), right: right(), body: body() });
    },
    reduceForOfStatement: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      return reducer.reduceForOfStatement(node, { left: left(), right: right(), body: body() });
    },
    reduceForStatement: function reduceForStatement(node, _ref37) {
      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      return reducer.reduceForStatement(node, { init: init == null ? null : init(), test: test == null ? null : test(), update: update == null ? null : update(), body: body() });
    },
    reduceFormalParameters: function reduceFormalParameters(node, _ref38) {
      var items = _ref38.items,
          rest = _ref38.rest;

      return reducer.reduceFormalParameters(node, { items: items.map(function (n) {
          return n();
        }), rest: rest == null ? null : rest() });
    },
    reduceFunctionBody: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      return reducer.reduceFunctionBody(node, { directives: directives.map(function (n) {
          return n();
        }), statements: statements.map(function (n) {
          return n();
        }) });
    },
    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      return reducer.reduceFunctionDeclaration(node, { name: name(), params: params(), body: body() });
    },
    reduceFunctionExpression: function reduceFunctionExpression(node, _ref41) {
      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      return reducer.reduceFunctionExpression(node, { name: name == null ? null : name(), params: params(), body: body() });
    },
    reduceGetter: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      return reducer.reduceGetter(node, { name: name(), body: body() });
    },
    reduceIdentifierExpression: function reduceIdentifierExpression(node) {
      return reducer.reduceIdentifierExpression(node);
    },
    reduceIfStatement: function reduceIfStatement(node, _ref43) {
      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      return reducer.reduceIfStatement(node, { test: test(), consequent: consequent(), alternate: alternate == null ? null : alternate() });
    },
    reduceImport: function reduceImport(node, _ref44) {
      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      return reducer.reduceImport(node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namedImports: namedImports.map(function (n) {
          return n();
        }) });
    },
    reduceImportNamespace: function reduceImportNamespace(node, _ref45) {
      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      return reducer.reduceImportNamespace(node, { defaultBinding: defaultBinding == null ? null : defaultBinding(), namespaceBinding: namespaceBinding() });
    },
    reduceImportSpecifier: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      return reducer.reduceImportSpecifier(node, { binding: binding() });
    },
    reduceLabeledStatement: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      return reducer.reduceLabeledStatement(node, { body: body() });
    },
    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node) {
      return reducer.reduceLiteralBooleanExpression(node);
    },
    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node) {
      return reducer.reduceLiteralInfinityExpression(node);
    },
    reduceLiteralNullExpression: function reduceLiteralNullExpression(node) {
      return reducer.reduceLiteralNullExpression(node);
    },
    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node) {
      return reducer.reduceLiteralNumericExpression(node);
    },
    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node) {
      return reducer.reduceLiteralRegExpExpression(node);
    },
    reduceLiteralStringExpression: function reduceLiteralStringExpression(node) {
      return reducer.reduceLiteralStringExpression(node);
    },
    reduceMethod: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      return reducer.reduceMethod(node, { name: name(), params: params(), body: body() });
    },
    reduceModule: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      return reducer.reduceModule(node, { directives: directives.map(function (n) {
          return n();
        }), items: items.map(function (n) {
          return n();
        }) });
    },
    reduceNewExpression: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      return reducer.reduceNewExpression(node, { callee: callee(), arguments: _arguments.map(function (n) {
          return n();
        }) });
    },
    reduceNewTargetExpression: function reduceNewTargetExpression(node) {
      return reducer.reduceNewTargetExpression(node);
    },
    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, _ref51) {
      var properties = _ref51.properties,
          rest = _ref51.rest;

      return reducer.reduceObjectAssignmentTarget(node, { properties: properties.map(function (n) {
          return n();
        }), rest: rest == null ? null : rest() });
    },
    reduceObjectBinding: function reduceObjectBinding(node, _ref52) {
      var properties = _ref52.properties,
          rest = _ref52.rest;

      return reducer.reduceObjectBinding(node, { properties: properties.map(function (n) {
          return n();
        }), rest: rest == null ? null : rest() });
    },
    reduceObjectExpression: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      return reducer.reduceObjectExpression(node, { properties: properties.map(function (n) {
          return n();
        }) });
    },
    reduceReturnStatement: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      return reducer.reduceReturnStatement(node, { expression: expression == null ? null : expression() });
    },
    reduceScript: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      return reducer.reduceScript(node, { directives: directives.map(function (n) {
          return n();
        }), statements: statements.map(function (n) {
          return n();
        }) });
    },
    reduceSetter: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      return reducer.reduceSetter(node, { name: name(), param: param(), body: body() });
    },
    reduceShorthandProperty: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      return reducer.reduceShorthandProperty(node, { name: name() });
    },
    reduceSpreadElement: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      return reducer.reduceSpreadElement(node, { expression: expression() });
    },
    reduceSpreadProperty: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      return reducer.reduceSpreadProperty(node, { expression: expression() });
    },
    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      return reducer.reduceStaticMemberAssignmentTarget(node, { object: object() });
    },
    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      return reducer.reduceStaticMemberExpression(node, { object: object() });
    },
    reduceStaticPropertyName: function reduceStaticPropertyName(node) {
      return reducer.reduceStaticPropertyName(node);
    },
    reduceSuper: function reduceSuper(node) {
      return reducer.reduceSuper(node);
    },
    reduceSwitchCase: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      return reducer.reduceSwitchCase(node, { test: test(), consequent: consequent.map(function (n) {
          return n();
        }) });
    },
    reduceSwitchDefault: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      return reducer.reduceSwitchDefault(node, { consequent: consequent.map(function (n) {
          return n();
        }) });
    },
    reduceSwitchStatement: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      return reducer.reduceSwitchStatement(node, { discriminant: discriminant(), cases: cases.map(function (n) {
          return n();
        }) });
    },
    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      return reducer.reduceSwitchStatementWithDefault(node, { discriminant: discriminant(), preDefaultCases: preDefaultCases.map(function (n) {
          return n();
        }), defaultCase: defaultCase(), postDefaultCases: postDefaultCases.map(function (n) {
          return n();
        }) });
    },
    reduceTemplateElement: function reduceTemplateElement(node) {
      return reducer.reduceTemplateElement(node);
    },
    reduceTemplateExpression: function reduceTemplateExpression(node, _ref66) {
      var tag = _ref66.tag,
          elements = _ref66.elements;

      return reducer.reduceTemplateExpression(node, { tag: tag == null ? null : tag(), elements: elements.map(function (n) {
          return n();
        }) });
    },
    reduceThisExpression: function reduceThisExpression(node) {
      return reducer.reduceThisExpression(node);
    },
    reduceThrowStatement: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      return reducer.reduceThrowStatement(node, { expression: expression() });
    },
    reduceTryCatchStatement: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      return reducer.reduceTryCatchStatement(node, { body: body(), catchClause: catchClause() });
    },
    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, _ref69) {
      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      return reducer.reduceTryFinallyStatement(node, { body: body(), catchClause: catchClause == null ? null : catchClause(), finalizer: finalizer() });
    },
    reduceUnaryExpression: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      return reducer.reduceUnaryExpression(node, { operand: operand() });
    },
    reduceUpdateExpression: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      return reducer.reduceUpdateExpression(node, { operand: operand() });
    },
    reduceVariableDeclaration: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      return reducer.reduceVariableDeclaration(node, { declarators: declarators.map(function (n) {
          return n();
        }) });
    },
    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      return reducer.reduceVariableDeclarationStatement(node, { declaration: declaration() });
    },
    reduceVariableDeclarator: function reduceVariableDeclarator(node, _ref74) {
      var binding = _ref74.binding,
          init = _ref74.init;

      return reducer.reduceVariableDeclarator(node, { binding: binding(), init: init == null ? null : init() });
    },
    reduceWhileStatement: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      return reducer.reduceWhileStatement(node, { test: test(), body: body() });
    },
    reduceWithStatement: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      return reducer.reduceWithStatement(node, { object: object(), body: body() });
    },
    reduceYieldExpression: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      return reducer.reduceYieldExpression(node, { expression: expression == null ? null : expression() });
    },
    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      return reducer.reduceYieldGeneratorExpression(node, { expression: expression() });
    }
  };
}