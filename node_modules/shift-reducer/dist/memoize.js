'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = memoize;

var _shiftAst = require('shift-ast');

var Shift = _interopRequireWildcard(_shiftAst);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function memoize(reducer) {
  var cache = new WeakMap();
  return {
    reduceArrayAssignmentTarget: function reduceArrayAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrayAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceArrayBinding: function reduceArrayBinding(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrayBinding(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceArrayExpression: function reduceArrayExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrayExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceArrowExpression: function reduceArrowExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceArrowExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentExpression: function reduceAssignmentExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetIdentifier: function reduceAssignmentTargetIdentifier(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetIdentifier(node);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetPropertyIdentifier: function reduceAssignmentTargetPropertyIdentifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetPropertyIdentifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetPropertyProperty: function reduceAssignmentTargetPropertyProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetPropertyProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAssignmentTargetWithDefault: function reduceAssignmentTargetWithDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAssignmentTargetWithDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceAwaitExpression: function reduceAwaitExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceAwaitExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBinaryExpression: function reduceBinaryExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBinaryExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBindingIdentifier: function reduceBindingIdentifier(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingIdentifier(node);
      cache.set(node, res);
      return res;
    },
    reduceBindingPropertyIdentifier: function reduceBindingPropertyIdentifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingPropertyIdentifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBindingPropertyProperty: function reduceBindingPropertyProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingPropertyProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBindingWithDefault: function reduceBindingWithDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBindingWithDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBlock: function reduceBlock(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBlock(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBlockStatement: function reduceBlockStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBlockStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceBreakStatement: function reduceBreakStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceBreakStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceCallExpression: function reduceCallExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceCallExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceCatchClause: function reduceCatchClause(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceCatchClause(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceClassDeclaration: function reduceClassDeclaration(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceClassDeclaration(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceClassElement: function reduceClassElement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceClassElement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceClassExpression: function reduceClassExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceClassExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceCompoundAssignmentExpression: function reduceCompoundAssignmentExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceCompoundAssignmentExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceComputedMemberAssignmentTarget: function reduceComputedMemberAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceComputedMemberAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceComputedMemberExpression: function reduceComputedMemberExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceComputedMemberExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceComputedPropertyName: function reduceComputedPropertyName(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceComputedPropertyName(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceConditionalExpression: function reduceConditionalExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceConditionalExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceContinueStatement: function reduceContinueStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceContinueStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceDataProperty: function reduceDataProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDataProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceDebuggerStatement: function reduceDebuggerStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDebuggerStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceDirective: function reduceDirective(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDirective(node);
      cache.set(node, res);
      return res;
    },
    reduceDoWhileStatement: function reduceDoWhileStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceDoWhileStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceEmptyStatement: function reduceEmptyStatement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceEmptyStatement(node);
      cache.set(node, res);
      return res;
    },
    reduceExport: function reduceExport(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExport(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportAllFrom: function reduceExportAllFrom(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportAllFrom(node);
      cache.set(node, res);
      return res;
    },
    reduceExportDefault: function reduceExportDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportFrom: function reduceExportFrom(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportFrom(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportFromSpecifier: function reduceExportFromSpecifier(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportFromSpecifier(node);
      cache.set(node, res);
      return res;
    },
    reduceExportLocalSpecifier: function reduceExportLocalSpecifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportLocalSpecifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExportLocals: function reduceExportLocals(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExportLocals(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceExpressionStatement: function reduceExpressionStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceExpressionStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForAwaitStatement: function reduceForAwaitStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForAwaitStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForInStatement: function reduceForInStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForInStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForOfStatement: function reduceForOfStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForOfStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceForStatement: function reduceForStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceForStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFormalParameters: function reduceFormalParameters(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFormalParameters(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFunctionBody: function reduceFunctionBody(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFunctionBody(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFunctionDeclaration: function reduceFunctionDeclaration(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFunctionDeclaration(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceFunctionExpression: function reduceFunctionExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceFunctionExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceGetter: function reduceGetter(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceGetter(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceIdentifierExpression: function reduceIdentifierExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceIdentifierExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceIfStatement: function reduceIfStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceIfStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceImport: function reduceImport(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceImport(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceImportNamespace: function reduceImportNamespace(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceImportNamespace(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceImportSpecifier: function reduceImportSpecifier(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceImportSpecifier(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceLabeledStatement: function reduceLabeledStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLabeledStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceLiteralBooleanExpression: function reduceLiteralBooleanExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralBooleanExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralInfinityExpression: function reduceLiteralInfinityExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralInfinityExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralNullExpression: function reduceLiteralNullExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralNullExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralNumericExpression: function reduceLiteralNumericExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralNumericExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralRegExpExpression: function reduceLiteralRegExpExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralRegExpExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceLiteralStringExpression: function reduceLiteralStringExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceLiteralStringExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceMethod: function reduceMethod(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceMethod(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceModule: function reduceModule(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceModule(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceNewExpression: function reduceNewExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceNewExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceNewTargetExpression: function reduceNewTargetExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceNewTargetExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceObjectAssignmentTarget: function reduceObjectAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceObjectAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceObjectBinding: function reduceObjectBinding(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceObjectBinding(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceObjectExpression: function reduceObjectExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceObjectExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceReturnStatement: function reduceReturnStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceReturnStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceScript: function reduceScript(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceScript(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSetter: function reduceSetter(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSetter(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceShorthandProperty: function reduceShorthandProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceShorthandProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSpreadElement: function reduceSpreadElement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSpreadElement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSpreadProperty: function reduceSpreadProperty(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSpreadProperty(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceStaticMemberAssignmentTarget: function reduceStaticMemberAssignmentTarget(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceStaticMemberAssignmentTarget(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceStaticMemberExpression: function reduceStaticMemberExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceStaticMemberExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceStaticPropertyName: function reduceStaticPropertyName(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceStaticPropertyName(node);
      cache.set(node, res);
      return res;
    },
    reduceSuper: function reduceSuper(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSuper(node);
      cache.set(node, res);
      return res;
    },
    reduceSwitchCase: function reduceSwitchCase(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchCase(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSwitchDefault: function reduceSwitchDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSwitchStatement: function reduceSwitchStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceSwitchStatementWithDefault: function reduceSwitchStatementWithDefault(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceSwitchStatementWithDefault(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceTemplateElement: function reduceTemplateElement(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTemplateElement(node);
      cache.set(node, res);
      return res;
    },
    reduceTemplateExpression: function reduceTemplateExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTemplateExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceThisExpression: function reduceThisExpression(node) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceThisExpression(node);
      cache.set(node, res);
      return res;
    },
    reduceThrowStatement: function reduceThrowStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceThrowStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceTryCatchStatement: function reduceTryCatchStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTryCatchStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceTryFinallyStatement: function reduceTryFinallyStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceTryFinallyStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceUnaryExpression: function reduceUnaryExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceUnaryExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceUpdateExpression: function reduceUpdateExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceUpdateExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceVariableDeclaration: function reduceVariableDeclaration(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceVariableDeclaration(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceVariableDeclarationStatement: function reduceVariableDeclarationStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceVariableDeclarationStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceVariableDeclarator: function reduceVariableDeclarator(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceVariableDeclarator(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceWhileStatement: function reduceWhileStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceWhileStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceWithStatement: function reduceWithStatement(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceWithStatement(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceYieldExpression: function reduceYieldExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceYieldExpression(node, arg);
      cache.set(node, res);
      return res;
    },
    reduceYieldGeneratorExpression: function reduceYieldGeneratorExpression(node, arg) {
      if (cache.has(node)) {
        return cache.get(node);
      }
      var res = reducer.reduceYieldGeneratorExpression(node, arg);
      cache.set(node, res);
      return res;
    }
  };
} // Generated by generate-memoize.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */