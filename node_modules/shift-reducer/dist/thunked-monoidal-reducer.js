'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Generated by generate-monoidal-reducer.js
/**
 * Copyright 2018 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _shiftAst = require('shift-ast');

var _shiftAst2 = _interopRequireDefault(_shiftAst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MonoidalReducer = function () {
  function MonoidalReducer(monoid) {
    _classCallCheck(this, MonoidalReducer);

    var identity = monoid.empty();
    this.identity = identity;

    var concatThunk = void 0;
    if (monoid.prototype && typeof monoid.prototype.concatThunk === 'function') {
      concatThunk = Function.prototype.call.bind(monoid.prototype.concatThunk);
    } else if (typeof monoid.concatThunk === 'function') {
      concatThunk = monoid.concatThunk;
    } else {
      var concat = void 0;
      if (monoid.prototype && typeof monoid.prototype.concat === 'function') {
        concat = Function.prototype.call.bind(monoid.prototype.concat);
      } else if (typeof monoid.concat === 'function') {
        concat = monoid.concat;
      } else {
        throw new TypeError('Monoid must provide a `concatThunk` or `concat` method');
      }
      if (typeof monoid.isAbsorbing === 'function') {
        var isAbsorbing = monoid.isAbsorbing;
        concatThunk = function concatThunk(a, b) {
          return isAbsorbing(a) ? a : concat(a, b());
        };
      } else {
        concatThunk = function concatThunk(a, b) {
          return concat(a, b());
        };
      }
    }
    this.append = function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args.reduce(concatThunk, identity);
    };
  }

  _createClass(MonoidalReducer, [{
    key: 'reduceArrayAssignmentTarget',
    value: function reduceArrayAssignmentTarget(node, _ref) {
      var _this = this;

      var elements = _ref.elements,
          rest = _ref.rest;

      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {
        return n != null;
      })).concat([rest == null ? function () {
        return _this.identity;
      } : rest]));
    }
  }, {
    key: 'reduceArrayBinding',
    value: function reduceArrayBinding(node, _ref2) {
      var _this2 = this;

      var elements = _ref2.elements,
          rest = _ref2.rest;

      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {
        return n != null;
      })).concat([rest == null ? function () {
        return _this2.identity;
      } : rest]));
    }
  }, {
    key: 'reduceArrayExpression',
    value: function reduceArrayExpression(node, _ref3) {
      var elements = _ref3.elements;

      return this.append.apply(this, _toConsumableArray(elements.filter(function (n) {
        return n != null;
      })));
    }
  }, {
    key: 'reduceArrowExpression',
    value: function reduceArrowExpression(node, _ref4) {
      var params = _ref4.params,
          body = _ref4.body;

      return this.append(params, body);
    }
  }, {
    key: 'reduceAssignmentExpression',
    value: function reduceAssignmentExpression(node, _ref5) {
      var binding = _ref5.binding,
          expression = _ref5.expression;

      return this.append(binding, expression);
    }
  }, {
    key: 'reduceAssignmentTargetIdentifier',
    value: function reduceAssignmentTargetIdentifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceAssignmentTargetPropertyIdentifier',
    value: function reduceAssignmentTargetPropertyIdentifier(node, _ref6) {
      var _this3 = this;

      var binding = _ref6.binding,
          init = _ref6.init;

      return this.append(binding, init == null ? function () {
        return _this3.identity;
      } : init);
    }
  }, {
    key: 'reduceAssignmentTargetPropertyProperty',
    value: function reduceAssignmentTargetPropertyProperty(node, _ref7) {
      var name = _ref7.name,
          binding = _ref7.binding;

      return this.append(name, binding);
    }
  }, {
    key: 'reduceAssignmentTargetWithDefault',
    value: function reduceAssignmentTargetWithDefault(node, _ref8) {
      var binding = _ref8.binding,
          init = _ref8.init;

      return this.append(binding, init);
    }
  }, {
    key: 'reduceAwaitExpression',
    value: function reduceAwaitExpression(node, _ref9) {
      var expression = _ref9.expression;

      return expression();
    }
  }, {
    key: 'reduceBinaryExpression',
    value: function reduceBinaryExpression(node, _ref10) {
      var left = _ref10.left,
          right = _ref10.right;

      return this.append(left, right);
    }
  }, {
    key: 'reduceBindingIdentifier',
    value: function reduceBindingIdentifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceBindingPropertyIdentifier',
    value: function reduceBindingPropertyIdentifier(node, _ref11) {
      var _this4 = this;

      var binding = _ref11.binding,
          init = _ref11.init;

      return this.append(binding, init == null ? function () {
        return _this4.identity;
      } : init);
    }
  }, {
    key: 'reduceBindingPropertyProperty',
    value: function reduceBindingPropertyProperty(node, _ref12) {
      var name = _ref12.name,
          binding = _ref12.binding;

      return this.append(name, binding);
    }
  }, {
    key: 'reduceBindingWithDefault',
    value: function reduceBindingWithDefault(node, _ref13) {
      var binding = _ref13.binding,
          init = _ref13.init;

      return this.append(binding, init);
    }
  }, {
    key: 'reduceBlock',
    value: function reduceBlock(node, _ref14) {
      var statements = _ref14.statements;

      return this.append.apply(this, _toConsumableArray(statements));
    }
  }, {
    key: 'reduceBlockStatement',
    value: function reduceBlockStatement(node, _ref15) {
      var block = _ref15.block;

      return block();
    }
  }, {
    key: 'reduceBreakStatement',
    value: function reduceBreakStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceCallExpression',
    value: function reduceCallExpression(node, _ref16) {
      var callee = _ref16.callee,
          _arguments = _ref16.arguments;

      return this.append.apply(this, [callee].concat(_toConsumableArray(_arguments)));
    }
  }, {
    key: 'reduceCatchClause',
    value: function reduceCatchClause(node, _ref17) {
      var binding = _ref17.binding,
          body = _ref17.body;

      return this.append(binding, body);
    }
  }, {
    key: 'reduceClassDeclaration',
    value: function reduceClassDeclaration(node, _ref18) {
      var _this5 = this;

      var name = _ref18.name,
          _super = _ref18.super,
          elements = _ref18.elements;

      return this.append.apply(this, [name, _super == null ? function () {
        return _this5.identity;
      } : _super].concat(_toConsumableArray(elements)));
    }
  }, {
    key: 'reduceClassElement',
    value: function reduceClassElement(node, _ref19) {
      var method = _ref19.method;

      return method();
    }
  }, {
    key: 'reduceClassExpression',
    value: function reduceClassExpression(node, _ref20) {
      var _this6 = this;

      var name = _ref20.name,
          _super = _ref20.super,
          elements = _ref20.elements;

      return this.append.apply(this, [name == null ? function () {
        return _this6.identity;
      } : name, _super == null ? function () {
        return _this6.identity;
      } : _super].concat(_toConsumableArray(elements)));
    }
  }, {
    key: 'reduceCompoundAssignmentExpression',
    value: function reduceCompoundAssignmentExpression(node, _ref21) {
      var binding = _ref21.binding,
          expression = _ref21.expression;

      return this.append(binding, expression);
    }
  }, {
    key: 'reduceComputedMemberAssignmentTarget',
    value: function reduceComputedMemberAssignmentTarget(node, _ref22) {
      var object = _ref22.object,
          expression = _ref22.expression;

      return this.append(object, expression);
    }
  }, {
    key: 'reduceComputedMemberExpression',
    value: function reduceComputedMemberExpression(node, _ref23) {
      var object = _ref23.object,
          expression = _ref23.expression;

      return this.append(object, expression);
    }
  }, {
    key: 'reduceComputedPropertyName',
    value: function reduceComputedPropertyName(node, _ref24) {
      var expression = _ref24.expression;

      return expression();
    }
  }, {
    key: 'reduceConditionalExpression',
    value: function reduceConditionalExpression(node, _ref25) {
      var test = _ref25.test,
          consequent = _ref25.consequent,
          alternate = _ref25.alternate;

      return this.append(test, consequent, alternate);
    }
  }, {
    key: 'reduceContinueStatement',
    value: function reduceContinueStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDataProperty',
    value: function reduceDataProperty(node, _ref26) {
      var name = _ref26.name,
          expression = _ref26.expression;

      return this.append(name, expression);
    }
  }, {
    key: 'reduceDebuggerStatement',
    value: function reduceDebuggerStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDirective',
    value: function reduceDirective(node) {
      return this.identity;
    }
  }, {
    key: 'reduceDoWhileStatement',
    value: function reduceDoWhileStatement(node, _ref27) {
      var body = _ref27.body,
          test = _ref27.test;

      return this.append(body, test);
    }
  }, {
    key: 'reduceEmptyStatement',
    value: function reduceEmptyStatement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExport',
    value: function reduceExport(node, _ref28) {
      var declaration = _ref28.declaration;

      return declaration();
    }
  }, {
    key: 'reduceExportAllFrom',
    value: function reduceExportAllFrom(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExportDefault',
    value: function reduceExportDefault(node, _ref29) {
      var body = _ref29.body;

      return body();
    }
  }, {
    key: 'reduceExportFrom',
    value: function reduceExportFrom(node, _ref30) {
      var namedExports = _ref30.namedExports;

      return this.append.apply(this, _toConsumableArray(namedExports));
    }
  }, {
    key: 'reduceExportFromSpecifier',
    value: function reduceExportFromSpecifier(node) {
      return this.identity;
    }
  }, {
    key: 'reduceExportLocalSpecifier',
    value: function reduceExportLocalSpecifier(node, _ref31) {
      var name = _ref31.name;

      return name();
    }
  }, {
    key: 'reduceExportLocals',
    value: function reduceExportLocals(node, _ref32) {
      var namedExports = _ref32.namedExports;

      return this.append.apply(this, _toConsumableArray(namedExports));
    }
  }, {
    key: 'reduceExpressionStatement',
    value: function reduceExpressionStatement(node, _ref33) {
      var expression = _ref33.expression;

      return expression();
    }
  }, {
    key: 'reduceForAwaitStatement',
    value: function reduceForAwaitStatement(node, _ref34) {
      var left = _ref34.left,
          right = _ref34.right,
          body = _ref34.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForInStatement',
    value: function reduceForInStatement(node, _ref35) {
      var left = _ref35.left,
          right = _ref35.right,
          body = _ref35.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForOfStatement',
    value: function reduceForOfStatement(node, _ref36) {
      var left = _ref36.left,
          right = _ref36.right,
          body = _ref36.body;

      return this.append(left, right, body);
    }
  }, {
    key: 'reduceForStatement',
    value: function reduceForStatement(node, _ref37) {
      var _this7 = this;

      var init = _ref37.init,
          test = _ref37.test,
          update = _ref37.update,
          body = _ref37.body;

      return this.append(init == null ? function () {
        return _this7.identity;
      } : init, test == null ? function () {
        return _this7.identity;
      } : test, update == null ? function () {
        return _this7.identity;
      } : update, body);
    }
  }, {
    key: 'reduceFormalParameters',
    value: function reduceFormalParameters(node, _ref38) {
      var _this8 = this;

      var items = _ref38.items,
          rest = _ref38.rest;

      return this.append.apply(this, _toConsumableArray(items).concat([rest == null ? function () {
        return _this8.identity;
      } : rest]));
    }
  }, {
    key: 'reduceFunctionBody',
    value: function reduceFunctionBody(node, _ref39) {
      var directives = _ref39.directives,
          statements = _ref39.statements;

      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(statements)));
    }
  }, {
    key: 'reduceFunctionDeclaration',
    value: function reduceFunctionDeclaration(node, _ref40) {
      var name = _ref40.name,
          params = _ref40.params,
          body = _ref40.body;

      return this.append(name, params, body);
    }
  }, {
    key: 'reduceFunctionExpression',
    value: function reduceFunctionExpression(node, _ref41) {
      var _this9 = this;

      var name = _ref41.name,
          params = _ref41.params,
          body = _ref41.body;

      return this.append(name == null ? function () {
        return _this9.identity;
      } : name, params, body);
    }
  }, {
    key: 'reduceGetter',
    value: function reduceGetter(node, _ref42) {
      var name = _ref42.name,
          body = _ref42.body;

      return this.append(name, body);
    }
  }, {
    key: 'reduceIdentifierExpression',
    value: function reduceIdentifierExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceIfStatement',
    value: function reduceIfStatement(node, _ref43) {
      var _this10 = this;

      var test = _ref43.test,
          consequent = _ref43.consequent,
          alternate = _ref43.alternate;

      return this.append(test, consequent, alternate == null ? function () {
        return _this10.identity;
      } : alternate);
    }
  }, {
    key: 'reduceImport',
    value: function reduceImport(node, _ref44) {
      var _this11 = this;

      var defaultBinding = _ref44.defaultBinding,
          namedImports = _ref44.namedImports;

      return this.append.apply(this, [defaultBinding == null ? function () {
        return _this11.identity;
      } : defaultBinding].concat(_toConsumableArray(namedImports)));
    }
  }, {
    key: 'reduceImportNamespace',
    value: function reduceImportNamespace(node, _ref45) {
      var _this12 = this;

      var defaultBinding = _ref45.defaultBinding,
          namespaceBinding = _ref45.namespaceBinding;

      return this.append(defaultBinding == null ? function () {
        return _this12.identity;
      } : defaultBinding, namespaceBinding);
    }
  }, {
    key: 'reduceImportSpecifier',
    value: function reduceImportSpecifier(node, _ref46) {
      var binding = _ref46.binding;

      return binding();
    }
  }, {
    key: 'reduceLabeledStatement',
    value: function reduceLabeledStatement(node, _ref47) {
      var body = _ref47.body;

      return body();
    }
  }, {
    key: 'reduceLiteralBooleanExpression',
    value: function reduceLiteralBooleanExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralInfinityExpression',
    value: function reduceLiteralInfinityExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralNullExpression',
    value: function reduceLiteralNullExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralNumericExpression',
    value: function reduceLiteralNumericExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralRegExpExpression',
    value: function reduceLiteralRegExpExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceLiteralStringExpression',
    value: function reduceLiteralStringExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceMethod',
    value: function reduceMethod(node, _ref48) {
      var name = _ref48.name,
          params = _ref48.params,
          body = _ref48.body;

      return this.append(name, params, body);
    }
  }, {
    key: 'reduceModule',
    value: function reduceModule(node, _ref49) {
      var directives = _ref49.directives,
          items = _ref49.items;

      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(items)));
    }
  }, {
    key: 'reduceNewExpression',
    value: function reduceNewExpression(node, _ref50) {
      var callee = _ref50.callee,
          _arguments = _ref50.arguments;

      return this.append.apply(this, [callee].concat(_toConsumableArray(_arguments)));
    }
  }, {
    key: 'reduceNewTargetExpression',
    value: function reduceNewTargetExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceObjectAssignmentTarget',
    value: function reduceObjectAssignmentTarget(node, _ref51) {
      var _this13 = this;

      var properties = _ref51.properties,
          rest = _ref51.rest;

      return this.append.apply(this, _toConsumableArray(properties).concat([rest == null ? function () {
        return _this13.identity;
      } : rest]));
    }
  }, {
    key: 'reduceObjectBinding',
    value: function reduceObjectBinding(node, _ref52) {
      var _this14 = this;

      var properties = _ref52.properties,
          rest = _ref52.rest;

      return this.append.apply(this, _toConsumableArray(properties).concat([rest == null ? function () {
        return _this14.identity;
      } : rest]));
    }
  }, {
    key: 'reduceObjectExpression',
    value: function reduceObjectExpression(node, _ref53) {
      var properties = _ref53.properties;

      return this.append.apply(this, _toConsumableArray(properties));
    }
  }, {
    key: 'reduceReturnStatement',
    value: function reduceReturnStatement(node, _ref54) {
      var expression = _ref54.expression;

      return expression == null ? this.identity : expression();
    }
  }, {
    key: 'reduceScript',
    value: function reduceScript(node, _ref55) {
      var directives = _ref55.directives,
          statements = _ref55.statements;

      return this.append.apply(this, _toConsumableArray(directives).concat(_toConsumableArray(statements)));
    }
  }, {
    key: 'reduceSetter',
    value: function reduceSetter(node, _ref56) {
      var name = _ref56.name,
          param = _ref56.param,
          body = _ref56.body;

      return this.append(name, param, body);
    }
  }, {
    key: 'reduceShorthandProperty',
    value: function reduceShorthandProperty(node, _ref57) {
      var name = _ref57.name;

      return name();
    }
  }, {
    key: 'reduceSpreadElement',
    value: function reduceSpreadElement(node, _ref58) {
      var expression = _ref58.expression;

      return expression();
    }
  }, {
    key: 'reduceSpreadProperty',
    value: function reduceSpreadProperty(node, _ref59) {
      var expression = _ref59.expression;

      return expression();
    }
  }, {
    key: 'reduceStaticMemberAssignmentTarget',
    value: function reduceStaticMemberAssignmentTarget(node, _ref60) {
      var object = _ref60.object;

      return object();
    }
  }, {
    key: 'reduceStaticMemberExpression',
    value: function reduceStaticMemberExpression(node, _ref61) {
      var object = _ref61.object;

      return object();
    }
  }, {
    key: 'reduceStaticPropertyName',
    value: function reduceStaticPropertyName(node) {
      return this.identity;
    }
  }, {
    key: 'reduceSuper',
    value: function reduceSuper(node) {
      return this.identity;
    }
  }, {
    key: 'reduceSwitchCase',
    value: function reduceSwitchCase(node, _ref62) {
      var test = _ref62.test,
          consequent = _ref62.consequent;

      return this.append.apply(this, [test].concat(_toConsumableArray(consequent)));
    }
  }, {
    key: 'reduceSwitchDefault',
    value: function reduceSwitchDefault(node, _ref63) {
      var consequent = _ref63.consequent;

      return this.append.apply(this, _toConsumableArray(consequent));
    }
  }, {
    key: 'reduceSwitchStatement',
    value: function reduceSwitchStatement(node, _ref64) {
      var discriminant = _ref64.discriminant,
          cases = _ref64.cases;

      return this.append.apply(this, [discriminant].concat(_toConsumableArray(cases)));
    }
  }, {
    key: 'reduceSwitchStatementWithDefault',
    value: function reduceSwitchStatementWithDefault(node, _ref65) {
      var discriminant = _ref65.discriminant,
          preDefaultCases = _ref65.preDefaultCases,
          defaultCase = _ref65.defaultCase,
          postDefaultCases = _ref65.postDefaultCases;

      return this.append.apply(this, [discriminant].concat(_toConsumableArray(preDefaultCases), [defaultCase], _toConsumableArray(postDefaultCases)));
    }
  }, {
    key: 'reduceTemplateElement',
    value: function reduceTemplateElement(node) {
      return this.identity;
    }
  }, {
    key: 'reduceTemplateExpression',
    value: function reduceTemplateExpression(node, _ref66) {
      var _this15 = this;

      var tag = _ref66.tag,
          elements = _ref66.elements;

      return this.append.apply(this, [tag == null ? function () {
        return _this15.identity;
      } : tag].concat(_toConsumableArray(elements)));
    }
  }, {
    key: 'reduceThisExpression',
    value: function reduceThisExpression(node) {
      return this.identity;
    }
  }, {
    key: 'reduceThrowStatement',
    value: function reduceThrowStatement(node, _ref67) {
      var expression = _ref67.expression;

      return expression();
    }
  }, {
    key: 'reduceTryCatchStatement',
    value: function reduceTryCatchStatement(node, _ref68) {
      var body = _ref68.body,
          catchClause = _ref68.catchClause;

      return this.append(body, catchClause);
    }
  }, {
    key: 'reduceTryFinallyStatement',
    value: function reduceTryFinallyStatement(node, _ref69) {
      var _this16 = this;

      var body = _ref69.body,
          catchClause = _ref69.catchClause,
          finalizer = _ref69.finalizer;

      return this.append(body, catchClause == null ? function () {
        return _this16.identity;
      } : catchClause, finalizer);
    }
  }, {
    key: 'reduceUnaryExpression',
    value: function reduceUnaryExpression(node, _ref70) {
      var operand = _ref70.operand;

      return operand();
    }
  }, {
    key: 'reduceUpdateExpression',
    value: function reduceUpdateExpression(node, _ref71) {
      var operand = _ref71.operand;

      return operand();
    }
  }, {
    key: 'reduceVariableDeclaration',
    value: function reduceVariableDeclaration(node, _ref72) {
      var declarators = _ref72.declarators;

      return this.append.apply(this, _toConsumableArray(declarators));
    }
  }, {
    key: 'reduceVariableDeclarationStatement',
    value: function reduceVariableDeclarationStatement(node, _ref73) {
      var declaration = _ref73.declaration;

      return declaration();
    }
  }, {
    key: 'reduceVariableDeclarator',
    value: function reduceVariableDeclarator(node, _ref74) {
      var _this17 = this;

      var binding = _ref74.binding,
          init = _ref74.init;

      return this.append(binding, init == null ? function () {
        return _this17.identity;
      } : init);
    }
  }, {
    key: 'reduceWhileStatement',
    value: function reduceWhileStatement(node, _ref75) {
      var test = _ref75.test,
          body = _ref75.body;

      return this.append(test, body);
    }
  }, {
    key: 'reduceWithStatement',
    value: function reduceWithStatement(node, _ref76) {
      var object = _ref76.object,
          body = _ref76.body;

      return this.append(object, body);
    }
  }, {
    key: 'reduceYieldExpression',
    value: function reduceYieldExpression(node, _ref77) {
      var expression = _ref77.expression;

      return expression == null ? this.identity : expression();
    }
  }, {
    key: 'reduceYieldGeneratorExpression',
    value: function reduceYieldGeneratorExpression(node, _ref78) {
      var expression = _ref78.expression;

      return expression();
    }
  }]);

  return MonoidalReducer;
}();

exports.default = MonoidalReducer;